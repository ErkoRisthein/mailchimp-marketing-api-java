/*
 * Mailchimp Marketing API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0.55
 * Contact: apihelp@mailchimp.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.erkoristhein.mailchimp.marketing.api;

import io.github.erkoristhein.mailchimp.marketing.model.AbuseComplaint1;
import io.github.erkoristhein.mailchimp.marketing.model.AbuseComplaints1;
import io.github.erkoristhein.mailchimp.marketing.model.CampaignAdviceReport;
import io.github.erkoristhein.mailchimp.marketing.model.CampaignReport;
import io.github.erkoristhein.mailchimp.marketing.model.CampaignReports1;
import io.github.erkoristhein.mailchimp.marketing.model.CampaignSubReports;
import io.github.erkoristhein.mailchimp.marketing.model.ClickDetailMember;
import io.github.erkoristhein.mailchimp.marketing.model.ClickDetailMembers;
import io.github.erkoristhein.mailchimp.marketing.model.ClickDetailReport;
import io.github.erkoristhein.mailchimp.marketing.model.DomainPerformance;
import io.github.erkoristhein.mailchimp.marketing.model.EepurlActivity;
import io.github.erkoristhein.mailchimp.marketing.model.EmailActivity;
import io.github.erkoristhein.mailchimp.marketing.model.GetReportsIdEcommerceProductActivity200Response;
import java.time.OffsetDateTime;
import io.github.erkoristhein.mailchimp.marketing.model.OpenActivity;
import io.github.erkoristhein.mailchimp.marketing.model.OpenDetailReport;
import io.github.erkoristhein.mailchimp.marketing.model.OpenLocations;
import io.github.erkoristhein.mailchimp.marketing.model.ProblemDetailDocument;
import io.github.erkoristhein.mailchimp.marketing.model.SentTo;
import io.github.erkoristhein.mailchimp.marketing.model.Unsubscribes;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.springframework.web.client.RestClientException;

import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ReportsApi
 */
@Disabled
class ReportsApiTest {

    private final ReportsApi api = new ReportsApi();

    
    /**
     * List campaign reports
     *
     * Get campaign reports.
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void getReportsTest() {
        List<String> fields = null;
        List<String> excludeFields = null;
        Integer count = null;
        Integer offset = null;
        String type = null;
        OffsetDateTime beforeSendTime = null;
        OffsetDateTime sinceSendTime = null;

        CampaignReports1 response = api.getReports(fields, excludeFields, count, offset, type, beforeSendTime, sinceSendTime);

        // TODO: test validations
    }
    
    /**
     * Get campaign report
     *
     * Get report details for a specific sent campaign.
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void getReportsIdTest() {
        String campaignId = null;
        List<String> fields = null;
        List<String> excludeFields = null;

        CampaignReport response = api.getReportsId(campaignId, fields, excludeFields);

        // TODO: test validations
    }
    
    /**
     * List abuse reports
     *
     * Get a list of abuse complaints for a specific campaign.
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void getReportsIdAbuseReportsIdTest() {
        String campaignId = null;
        List<String> fields = null;
        List<String> excludeFields = null;

        AbuseComplaints1 response = api.getReportsIdAbuseReportsId(campaignId, fields, excludeFields);

        // TODO: test validations
    }
    
    /**
     * Get abuse report
     *
     * Get information about a specific abuse report for a campaign.
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void getReportsIdAbuseReportsIdIdTest() {
        String campaignId = null;
        String reportId = null;
        List<String> fields = null;
        List<String> excludeFields = null;

        AbuseComplaint1 response = api.getReportsIdAbuseReportsIdId(campaignId, reportId, fields, excludeFields);

        // TODO: test validations
    }
    
    /**
     * List campaign feedback
     *
     * Get feedback based on a campaign&#39;s statistics. Advice feedback is based on campaign stats like opens, clicks, unsubscribes, bounces, and more.
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void getReportsIdAdviceTest() {
        String campaignId = null;
        List<String> fields = null;
        List<String> excludeFields = null;

        CampaignAdviceReport response = api.getReportsIdAdvice(campaignId, fields, excludeFields);

        // TODO: test validations
    }
    
    /**
     * List campaign details
     *
     * Get information about clicks on specific links in your Mailchimp campaigns.
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void getReportsIdClickDetailsTest() {
        String campaignId = null;
        List<String> fields = null;
        List<String> excludeFields = null;
        Integer count = null;
        Integer offset = null;
        String sortField = null;
        String sortDir = null;

        ClickDetailReport response = api.getReportsIdClickDetails(campaignId, fields, excludeFields, count, offset, sortField, sortDir);

        // TODO: test validations
    }
    
    /**
     * Get campaign link details
     *
     * Get click details for a specific link in a campaign.
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void getReportsIdClickDetailsIdTest() {
        String campaignId = null;
        String linkId = null;
        List<String> fields = null;
        List<String> excludeFields = null;

        ClickDetailReport response = api.getReportsIdClickDetailsId(campaignId, linkId, fields, excludeFields);

        // TODO: test validations
    }
    
    /**
     * List clicked link subscribers
     *
     * Get information about list members who clicked on a specific link in a campaign.
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void getReportsIdClickDetailsIdMembersTest() {
        String campaignId = null;
        String linkId = null;
        List<String> fields = null;
        List<String> excludeFields = null;
        Integer count = null;
        Integer offset = null;

        ClickDetailMembers response = api.getReportsIdClickDetailsIdMembers(campaignId, linkId, fields, excludeFields, count, offset);

        // TODO: test validations
    }
    
    /**
     * Get clicked link subscriber
     *
     * Get information about a specific subscriber who clicked a link in a specific campaign.
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void getReportsIdClickDetailsIdMembersIdTest() {
        String campaignId = null;
        String linkId = null;
        String subscriberHash = null;
        List<String> fields = null;
        List<String> excludeFields = null;

        ClickDetailMember response = api.getReportsIdClickDetailsIdMembersId(campaignId, linkId, subscriberHash, fields, excludeFields);

        // TODO: test validations
    }
    
    /**
     * List domain performance stats
     *
     * Get statistics for the top-performing email domains in a campaign.
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void getReportsIdDomainPerformanceTest() {
        String campaignId = null;
        List<String> fields = null;
        List<String> excludeFields = null;

        DomainPerformance response = api.getReportsIdDomainPerformance(campaignId, fields, excludeFields);

        // TODO: test validations
    }
    
    /**
     * List campaign product activity
     *
     * Get breakdown of product activity for a campaign
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void getReportsIdEcommerceProductActivityTest() {
        String campaignId = null;
        List<String> fields = null;
        List<String> excludeFields = null;
        Integer count = null;
        Integer offset = null;
        String sortField = null;

        GetReportsIdEcommerceProductActivity200Response response = api.getReportsIdEcommerceProductActivity(campaignId, fields, excludeFields, count, offset, sortField);

        // TODO: test validations
    }
    
    /**
     * List EepURL activity
     *
     * Get a summary of social activity for the campaign, tracked by EepURL.
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void getReportsIdEepurlTest() {
        String campaignId = null;
        List<String> fields = null;
        List<String> excludeFields = null;

        EepurlActivity response = api.getReportsIdEepurl(campaignId, fields, excludeFields);

        // TODO: test validations
    }
    
    /**
     * List email activity
     *
     * Get a list of member&#39;s subscriber activity in a specific campaign.
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void getReportsIdEmailActivityTest() {
        String campaignId = null;
        List<String> fields = null;
        List<String> excludeFields = null;
        Integer count = null;
        Integer offset = null;
        String since = null;

        EmailActivity response = api.getReportsIdEmailActivity(campaignId, fields, excludeFields, count, offset, since);

        // TODO: test validations
    }
    
    /**
     * Get subscriber email activity
     *
     * Get a specific list member&#39;s activity in a campaign including opens, clicks, and bounces.
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void getReportsIdEmailActivityIdTest() {
        String campaignId = null;
        String subscriberHash = null;
        List<String> fields = null;
        List<String> excludeFields = null;
        String since = null;

        EmailActivity response = api.getReportsIdEmailActivityId(campaignId, subscriberHash, fields, excludeFields, since);

        // TODO: test validations
    }
    
    /**
     * List top open activities
     *
     * Get top open locations for a specific campaign.
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void getReportsIdLocationsTest() {
        String campaignId = null;
        List<String> fields = null;
        List<String> excludeFields = null;
        Integer count = null;
        Integer offset = null;

        OpenLocations response = api.getReportsIdLocations(campaignId, fields, excludeFields, count, offset);

        // TODO: test validations
    }
    
    /**
     * List campaign open details
     *
     * Get detailed information about any campaign emails that were opened by a list member.
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void getReportsIdOpenDetailsTest() {
        String campaignId = null;
        List<String> fields = null;
        List<String> excludeFields = null;
        Integer count = null;
        Integer offset = null;
        String since = null;
        String sortField = null;
        String sortDir = null;

        OpenDetailReport response = api.getReportsIdOpenDetails(campaignId, fields, excludeFields, count, offset, since, sortField, sortDir);

        // TODO: test validations
    }
    
    /**
     * Get opened campaign subscriber
     *
     * Get information about a specific subscriber who opened a campaign.
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void getReportsIdOpenDetailsIdMembersIdTest() {
        String campaignId = null;
        String subscriberHash = null;
        List<String> fields = null;
        List<String> excludeFields = null;

        OpenActivity response = api.getReportsIdOpenDetailsIdMembersId(campaignId, subscriberHash, fields, excludeFields);

        // TODO: test validations
    }
    
    /**
     * List campaign recipients
     *
     * Get information about campaign recipients.
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void getReportsIdSentToTest() {
        String campaignId = null;
        List<String> fields = null;
        List<String> excludeFields = null;
        Integer count = null;
        Integer offset = null;

        SentTo response = api.getReportsIdSentTo(campaignId, fields, excludeFields, count, offset);

        // TODO: test validations
    }
    
    /**
     * Get campaign recipient info
     *
     * Get information about a specific campaign recipient.
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void getReportsIdSentToIdTest() {
        String campaignId = null;
        String subscriberHash = null;
        List<String> fields = null;
        List<String> excludeFields = null;

        SentTo response = api.getReportsIdSentToId(campaignId, subscriberHash, fields, excludeFields);

        // TODO: test validations
    }
    
    /**
     * List child campaign reports
     *
     * Get a list of reports with child campaigns for a specific parent campaign.
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void getReportsIdSubReportsIdTest() {
        String campaignId = null;
        List<String> fields = null;
        List<String> excludeFields = null;

        CampaignSubReports response = api.getReportsIdSubReportsId(campaignId, fields, excludeFields);

        // TODO: test validations
    }
    
    /**
     * List unsubscribed members
     *
     * Get information about members who have unsubscribed from a specific campaign.
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void getReportsIdUnsubscribedTest() {
        String campaignId = null;
        List<String> fields = null;
        List<String> excludeFields = null;
        Integer count = null;
        Integer offset = null;

        Unsubscribes response = api.getReportsIdUnsubscribed(campaignId, fields, excludeFields, count, offset);

        // TODO: test validations
    }
    
    /**
     * Get unsubscribed member
     *
     * Get information about a specific list member who unsubscribed from a campaign.
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void getReportsIdUnsubscribedIdTest() {
        String campaignId = null;
        String subscriberHash = null;
        List<String> fields = null;
        List<String> excludeFields = null;

        Unsubscribes response = api.getReportsIdUnsubscribedId(campaignId, subscriberHash, fields, excludeFields);

        // TODO: test validations
    }
    
}
