/*
 * Mailchimp Marketing API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0.55
 * Contact: apihelp@mailchimp.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.erkoristhein.mailchimp.marketing.api;

import io.github.erkoristhein.mailchimp.marketing.model.AbuseComplaint;
import io.github.erkoristhein.mailchimp.marketing.model.AbuseComplaints;
import io.github.erkoristhein.mailchimp.marketing.model.AddListMembers1;
import io.github.erkoristhein.mailchimp.marketing.model.AddListMembers2;
import io.github.erkoristhein.mailchimp.marketing.model.AddListMembers3;
import io.github.erkoristhein.mailchimp.marketing.model.AddWebhook;
import io.github.erkoristhein.mailchimp.marketing.model.BatchAddRemoveListMembersToFromStaticSegment;
import io.github.erkoristhein.mailchimp.marketing.model.BatchUpdateListMembers;
import io.github.erkoristhein.mailchimp.marketing.model.CollectionOfEvents;
import io.github.erkoristhein.mailchimp.marketing.model.CollectionOfMemberActivityEvents;
import io.github.erkoristhein.mailchimp.marketing.model.CollectionOfMergeFields;
import io.github.erkoristhein.mailchimp.marketing.model.CollectionOfNotes;
import io.github.erkoristhein.mailchimp.marketing.model.CollectionOfSegments;
import io.github.erkoristhein.mailchimp.marketing.model.CollectionOfTags;
import io.github.erkoristhein.mailchimp.marketing.model.EmailClients;
import io.github.erkoristhein.mailchimp.marketing.model.Events;
import io.github.erkoristhein.mailchimp.marketing.model.GrowthHistory;
import io.github.erkoristhein.mailchimp.marketing.model.Interest;
import io.github.erkoristhein.mailchimp.marketing.model.Interest1;
import io.github.erkoristhein.mailchimp.marketing.model.InterestCategory;
import io.github.erkoristhein.mailchimp.marketing.model.InterestCategory1;
import io.github.erkoristhein.mailchimp.marketing.model.InterestGroupings;
import io.github.erkoristhein.mailchimp.marketing.model.Interests;
import io.github.erkoristhein.mailchimp.marketing.model.List7;
import io.github.erkoristhein.mailchimp.marketing.model.List8;
import io.github.erkoristhein.mailchimp.marketing.model.List9;
import io.github.erkoristhein.mailchimp.marketing.model.ListActivity;
import io.github.erkoristhein.mailchimp.marketing.model.ListLocations;
import io.github.erkoristhein.mailchimp.marketing.model.ListMembers1;
import io.github.erkoristhein.mailchimp.marketing.model.ListMembers2;
import io.github.erkoristhein.mailchimp.marketing.model.ListSignupForms;
import io.github.erkoristhein.mailchimp.marketing.model.ListWebhooks;
import io.github.erkoristhein.mailchimp.marketing.model.MemberActivityEvents;
import io.github.erkoristhein.mailchimp.marketing.model.MemberActivityEvents1;
import io.github.erkoristhein.mailchimp.marketing.model.MemberNotes;
import io.github.erkoristhein.mailchimp.marketing.model.MemberNotes1;
import io.github.erkoristhein.mailchimp.marketing.model.MemberTags;
import io.github.erkoristhein.mailchimp.marketing.model.MembersToAddRemoveToFromAStaticSegment;
import io.github.erkoristhein.mailchimp.marketing.model.MembersToSubscribeUnsubscribeToFromAListInBatch;
import io.github.erkoristhein.mailchimp.marketing.model.MergeField;
import io.github.erkoristhein.mailchimp.marketing.model.MergeField1;
import io.github.erkoristhein.mailchimp.marketing.model.MergeField2;
import io.github.erkoristhein.mailchimp.marketing.model.PostListsIdSegmentsIdMembersRequest;
import io.github.erkoristhein.mailchimp.marketing.model.ProblemDetailDocument;
import io.github.erkoristhein.mailchimp.marketing.model.SegmentMembers;
import io.github.erkoristhein.mailchimp.marketing.model.SignupForm;
import io.github.erkoristhein.mailchimp.marketing.model.SignupForm1;
import io.github.erkoristhein.mailchimp.marketing.model.SubscriberList;
import io.github.erkoristhein.mailchimp.marketing.model.SubscriberList1;
import io.github.erkoristhein.mailchimp.marketing.model.SubscriberList2;
import io.github.erkoristhein.mailchimp.marketing.model.SubscriberLists;
import io.github.erkoristhein.mailchimp.marketing.model.TagSearchResults;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.springframework.web.client.RestClientException;

import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ListsApi
 */
@Disabled
class ListsApiTest {

    private final ListsApi api = new ListsApi();

    
    /**
     * Delete list
     *
     * Delete a list from your Mailchimp account. If you delete a list, you&#39;ll lose the list history—including subscriber activity, unsubscribes, complaints, and bounces. You’ll also lose subscribers’ email addresses, unless you exported and backed up your list.
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void deleteListsIdTest() {
        String listId = null;

        api.deleteListsId(listId);

        // TODO: test validations
    }
    
    /**
     * Delete interest category
     *
     * Delete a specific interest category.
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void deleteListsIdInterestCategoriesIdTest() {
        String listId = null;
        String interestCategoryId = null;

        api.deleteListsIdInterestCategoriesId(listId, interestCategoryId);

        // TODO: test validations
    }
    
    /**
     * Delete interest in category
     *
     * Delete interests or group names in a specific category.
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void deleteListsIdInterestCategoriesIdInterestsIdTest() {
        String listId = null;
        String interestCategoryId = null;
        String interestId = null;

        api.deleteListsIdInterestCategoriesIdInterestsId(listId, interestCategoryId, interestId);

        // TODO: test validations
    }
    
    /**
     * Archive list member
     *
     * Archive a list member. To permanently delete, use the delete-permanent action.
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void deleteListsIdMembersIdTest() {
        String listId = null;
        String subscriberHash = null;

        api.deleteListsIdMembersId(listId, subscriberHash);

        // TODO: test validations
    }
    
    /**
     * Delete note
     *
     * Delete a specific note for a specific list member.
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void deleteListsIdMembersIdNotesIdTest() {
        String listId = null;
        String subscriberHash = null;
        String noteId = null;

        api.deleteListsIdMembersIdNotesId(listId, subscriberHash, noteId);

        // TODO: test validations
    }
    
    /**
     * Delete merge field
     *
     * Delete a specific merge field.
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void deleteListsIdMergeFieldsIdTest() {
        String listId = null;
        String mergeId = null;

        api.deleteListsIdMergeFieldsId(listId, mergeId);

        // TODO: test validations
    }
    
    /**
     * Delete segment
     *
     * Delete a specific segment in a list.
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void deleteListsIdSegmentsIdTest() {
        String listId = null;
        String segmentId = null;

        api.deleteListsIdSegmentsId(listId, segmentId);

        // TODO: test validations
    }
    
    /**
     * Remove list member from segment
     *
     * Remove a member from the specified static segment.
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void deleteListsIdSegmentsIdMembersIdTest() {
        String listId = null;
        String segmentId = null;
        String subscriberHash = null;

        api.deleteListsIdSegmentsIdMembersId(listId, segmentId, subscriberHash);

        // TODO: test validations
    }
    
    /**
     * Delete webhook
     *
     * Delete a specific webhook in a list.
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void deleteListsIdWebhooksIdTest() {
        String listId = null;
        String webhookId = null;

        api.deleteListsIdWebhooksId(listId, webhookId);

        // TODO: test validations
    }
    
    /**
     * List member tags
     *
     * Get the tags on a list member.
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void getListMemberTagsTest() {
        String listId = null;
        String subscriberHash = null;
        List<String> fields = null;
        List<String> excludeFields = null;
        Integer count = null;
        Integer offset = null;

        CollectionOfTags response = api.getListMemberTags(listId, subscriberHash, fields, excludeFields, count, offset);

        // TODO: test validations
    }
    
    /**
     * Get lists info
     *
     * Get information about all lists in the account.
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void getListsTest() {
        List<String> fields = null;
        List<String> excludeFields = null;
        Integer count = null;
        Integer offset = null;
        String beforeDateCreated = null;
        String sinceDateCreated = null;
        String beforeCampaignLastSent = null;
        String sinceCampaignLastSent = null;
        String email = null;
        String sortField = null;
        String sortDir = null;
        Boolean hasEcommerceStore = null;
        Boolean includeTotalContacts = null;

        SubscriberLists response = api.getLists(fields, excludeFields, count, offset, beforeDateCreated, sinceDateCreated, beforeCampaignLastSent, sinceCampaignLastSent, email, sortField, sortDir, hasEcommerceStore, includeTotalContacts);

        // TODO: test validations
    }
    
    /**
     * Get list info
     *
     * Get information about a specific list in your Mailchimp account. Results include list members who have signed up but haven&#39;t confirmed their subscription yet and unsubscribed or cleaned.
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void getListsIdTest() {
        String listId = null;
        List<String> fields = null;
        List<String> excludeFields = null;
        Boolean includeTotalContacts = null;

        SubscriberList response = api.getListsId(listId, fields, excludeFields, includeTotalContacts);

        // TODO: test validations
    }
    
    /**
     * List abuse reports
     *
     * Get all abuse reports for a specific list.
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void getListsIdAbuseReportsTest() {
        String listId = null;
        List<String> fields = null;
        List<String> excludeFields = null;
        Integer count = null;
        Integer offset = null;

        AbuseComplaints response = api.getListsIdAbuseReports(listId, fields, excludeFields, count, offset);

        // TODO: test validations
    }
    
    /**
     * Get abuse report
     *
     * Get details about a specific abuse report.
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void getListsIdAbuseReportsIdTest() {
        String listId = null;
        String reportId = null;
        List<String> fields = null;
        List<String> excludeFields = null;
        Integer count = null;
        Integer offset = null;

        AbuseComplaint response = api.getListsIdAbuseReportsId(listId, reportId, fields, excludeFields, count, offset);

        // TODO: test validations
    }
    
    /**
     * List recent activity
     *
     * Get up to the previous 180 days of daily detailed aggregated activity stats for a list, not including Automation activity.
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void getListsIdActivityTest() {
        String listId = null;
        Integer count = null;
        Integer offset = null;
        List<String> fields = null;
        List<String> excludeFields = null;

        ListActivity response = api.getListsIdActivity(listId, count, offset, fields, excludeFields);

        // TODO: test validations
    }
    
    /**
     * List top email clients
     *
     * Get a list of the top email clients based on user-agent strings.
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void getListsIdClientsTest() {
        String listId = null;
        List<String> fields = null;
        List<String> excludeFields = null;

        EmailClients response = api.getListsIdClients(listId, fields, excludeFields);

        // TODO: test validations
    }
    
    /**
     * List growth history data
     *
     * Get a month-by-month summary of a specific list&#39;s growth activity.
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void getListsIdGrowthHistoryTest() {
        String listId = null;
        List<String> fields = null;
        List<String> excludeFields = null;
        Integer count = null;
        Integer offset = null;
        String sortField = null;
        String sortDir = null;

        GrowthHistory response = api.getListsIdGrowthHistory(listId, fields, excludeFields, count, offset, sortField, sortDir);

        // TODO: test validations
    }
    
    /**
     * Get growth history by month
     *
     * Get a summary of a specific list&#39;s growth activity for a specific month and year.
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void getListsIdGrowthHistoryIdTest() {
        String listId = null;
        String month = null;
        List<String> fields = null;
        List<String> excludeFields = null;

        GrowthHistory response = api.getListsIdGrowthHistoryId(listId, month, fields, excludeFields);

        // TODO: test validations
    }
    
    /**
     * List interest categories
     *
     * Get information about a list&#39;s interest categories.
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void getListsIdInterestCategoriesTest() {
        String listId = null;
        List<String> fields = null;
        List<String> excludeFields = null;
        Integer count = null;
        Integer offset = null;
        String type = null;

        InterestGroupings response = api.getListsIdInterestCategories(listId, fields, excludeFields, count, offset, type);

        // TODO: test validations
    }
    
    /**
     * Get interest category info
     *
     * Get information about a specific interest category.
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void getListsIdInterestCategoriesIdTest() {
        String listId = null;
        String interestCategoryId = null;
        List<String> fields = null;
        List<String> excludeFields = null;

        InterestCategory response = api.getListsIdInterestCategoriesId(listId, interestCategoryId, fields, excludeFields);

        // TODO: test validations
    }
    
    /**
     * List interests in category
     *
     * Get a list of this category&#39;s interests.
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void getListsIdInterestCategoriesIdInterestsTest() {
        String listId = null;
        String interestCategoryId = null;
        List<String> fields = null;
        List<String> excludeFields = null;
        Integer count = null;
        Integer offset = null;

        Interests response = api.getListsIdInterestCategoriesIdInterests(listId, interestCategoryId, fields, excludeFields, count, offset);

        // TODO: test validations
    }
    
    /**
     * Get interest in category
     *
     * Get interests or &#39;group names&#39; for a specific category.
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void getListsIdInterestCategoriesIdInterestsIdTest() {
        String listId = null;
        String interestCategoryId = null;
        String interestId = null;
        List<String> fields = null;
        List<String> excludeFields = null;

        Interest response = api.getListsIdInterestCategoriesIdInterestsId(listId, interestCategoryId, interestId, fields, excludeFields);

        // TODO: test validations
    }
    
    /**
     * List locations
     *
     * Get the locations (countries) that the list&#39;s subscribers have been tagged to based on geocoding their IP address.
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void getListsIdLocationsTest() {
        String listId = null;
        List<String> fields = null;
        List<String> excludeFields = null;

        ListLocations response = api.getListsIdLocations(listId, fields, excludeFields);

        // TODO: test validations
    }
    
    /**
     * List members info
     *
     * Get information about members in a specific Mailchimp list.
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void getListsIdMembersTest() {
        String listId = null;
        List<String> fields = null;
        List<String> excludeFields = null;
        Integer count = null;
        Integer offset = null;
        String emailType = null;
        String status = null;
        String sinceTimestampOpt = null;
        String beforeTimestampOpt = null;
        String sinceLastChanged = null;
        String beforeLastChanged = null;
        String uniqueEmailId = null;
        Boolean vipOnly = null;
        String interestCategoryId = null;
        String interestIds = null;
        String interestMatch = null;
        String sortField = null;
        String sortDir = null;
        Boolean sinceLastCampaign = null;
        String unsubscribedSince = null;

        ListMembers2 response = api.getListsIdMembers(listId, fields, excludeFields, count, offset, emailType, status, sinceTimestampOpt, beforeTimestampOpt, sinceLastChanged, beforeLastChanged, uniqueEmailId, vipOnly, interestCategoryId, interestIds, interestMatch, sortField, sortDir, sinceLastCampaign, unsubscribedSince);

        // TODO: test validations
    }
    
    /**
     * Get member info
     *
     * Get information about a specific list member, including a currently subscribed, unsubscribed, or bounced member.
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void getListsIdMembersIdTest() {
        String listId = null;
        String subscriberHash = null;
        List<String> fields = null;
        List<String> excludeFields = null;

        ListMembers2 response = api.getListsIdMembersId(listId, subscriberHash, fields, excludeFields);

        // TODO: test validations
    }
    
    /**
     * View recent activity 50
     *
     * Get the last 50 events of a member&#39;s activity on a specific list, including opens, clicks, and unsubscribes.
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void getListsIdMembersIdActivityTest() {
        String listId = null;
        String subscriberHash = null;
        List<String> fields = null;
        List<String> excludeFields = null;
        List<String> action = null;

        MemberActivityEvents response = api.getListsIdMembersIdActivity(listId, subscriberHash, fields, excludeFields, action);

        // TODO: test validations
    }
    
    /**
     * View recent activity
     *
     * Get a member&#39;s activity on a specific list, including opens, clicks, and unsubscribes.
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void getListsIdMembersIdActivityFeedTest() {
        String listId = null;
        String subscriberHash = null;
        List<String> fields = null;
        List<String> excludeFields = null;
        Integer count = null;
        Integer offset = null;
        List<String> activityFilters = null;

        MemberActivityEvents1 response = api.getListsIdMembersIdActivityFeed(listId, subscriberHash, fields, excludeFields, count, offset, activityFilters);

        // TODO: test validations
    }
    
    /**
     * List member events
     *
     * Get events for a contact.
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void getListsIdMembersIdEventsTest() {
        String listId = null;
        String subscriberHash = null;
        Integer count = null;
        Integer offset = null;
        List<String> fields = null;
        List<String> excludeFields = null;

        CollectionOfEvents response = api.getListsIdMembersIdEvents(listId, subscriberHash, count, offset, fields, excludeFields);

        // TODO: test validations
    }
    
    /**
     * List member goal events
     *
     * Get the last 50 Goal events for a member on a specific list.
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void getListsIdMembersIdGoalsTest() {
        String listId = null;
        String subscriberHash = null;
        List<String> fields = null;
        List<String> excludeFields = null;

        CollectionOfMemberActivityEvents response = api.getListsIdMembersIdGoals(listId, subscriberHash, fields, excludeFields);

        // TODO: test validations
    }
    
    /**
     * List recent member notes
     *
     * Get recent notes for a specific list member.
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void getListsIdMembersIdNotesTest() {
        String listId = null;
        String subscriberHash = null;
        String sortField = null;
        String sortDir = null;
        List<String> fields = null;
        List<String> excludeFields = null;
        Integer count = null;
        Integer offset = null;

        CollectionOfNotes response = api.getListsIdMembersIdNotes(listId, subscriberHash, sortField, sortDir, fields, excludeFields, count, offset);

        // TODO: test validations
    }
    
    /**
     * Get member note
     *
     * Get a specific note for a specific list member.
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void getListsIdMembersIdNotesIdTest() {
        String listId = null;
        String subscriberHash = null;
        String noteId = null;
        List<String> fields = null;
        List<String> excludeFields = null;

        MemberNotes response = api.getListsIdMembersIdNotesId(listId, subscriberHash, noteId, fields, excludeFields);

        // TODO: test validations
    }
    
    /**
     * List merge fields
     *
     * Get a list of all merge fields for an audience.
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void getListsIdMergeFieldsTest() {
        String listId = null;
        List<String> fields = null;
        List<String> excludeFields = null;
        Integer count = null;
        Integer offset = null;
        String type = null;
        Boolean required = null;

        CollectionOfMergeFields response = api.getListsIdMergeFields(listId, fields, excludeFields, count, offset, type, required);

        // TODO: test validations
    }
    
    /**
     * Get merge field
     *
     * Get information about a specific merge field.
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void getListsIdMergeFieldsIdTest() {
        String listId = null;
        String mergeId = null;
        List<String> excludeFields = null;
        List<String> fields = null;

        MergeField response = api.getListsIdMergeFieldsId(listId, mergeId, excludeFields, fields);

        // TODO: test validations
    }
    
    /**
     * Get segment info
     *
     * Get information about a specific segment.
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void getListsIdSegmentsIdTest() {
        String listId = null;
        String segmentId = null;
        List<String> fields = null;
        List<String> excludeFields = null;
        Boolean includeCleaned = null;
        Boolean includeTransactional = null;
        Boolean includeUnsubscribed = null;

        List7 response = api.getListsIdSegmentsId(listId, segmentId, fields, excludeFields, includeCleaned, includeTransactional, includeUnsubscribed);

        // TODO: test validations
    }
    
    /**
     * List members in segment
     *
     * Get information about members in a saved segment.
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void getListsIdSegmentsIdMembersTest() {
        String listId = null;
        String segmentId = null;
        List<String> fields = null;
        List<String> excludeFields = null;
        Integer count = null;
        Integer offset = null;
        Boolean includeCleaned = null;
        Boolean includeTransactional = null;
        Boolean includeUnsubscribed = null;

        SegmentMembers response = api.getListsIdSegmentsIdMembers(listId, segmentId, fields, excludeFields, count, offset, includeCleaned, includeTransactional, includeUnsubscribed);

        // TODO: test validations
    }
    
    /**
     * List signup forms
     *
     * Get signup forms for a specific list.
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void getListsIdSignupFormsTest() {
        String listId = null;

        ListSignupForms response = api.getListsIdSignupForms(listId);

        // TODO: test validations
    }
    
    /**
     * Get information about all surveys for a list
     *
     * Get information about all available surveys for a specific list.
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void getListsIdSurveysTest() {
        String listId = null;

        api.getListsIdSurveys(listId);

        // TODO: test validations
    }
    
    /**
     * Get survey
     *
     * Get details about a specific survey.
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void getListsIdSurveysIdTest() {
        String listId = null;
        String surveyId = null;

        api.getListsIdSurveysId(listId, surveyId);

        // TODO: test validations
    }
    
    /**
     * List webhooks
     *
     * Get information about all webhooks for a specific list.
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void getListsIdWebhooksTest() {
        String listId = null;

        ListWebhooks response = api.getListsIdWebhooks(listId);

        // TODO: test validations
    }
    
    /**
     * Get webhook info
     *
     * Get information about a specific webhook.
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void getListsIdWebhooksIdTest() {
        String listId = null;
        String webhookId = null;

        ListWebhooks response = api.getListsIdWebhooksId(listId, webhookId);

        // TODO: test validations
    }
    
    /**
     * Update lists
     *
     * Update the settings for a specific list.
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void patchListsIdTest() {
        String listId = null;
        SubscriberList2 body = null;

        SubscriberList response = api.patchListsId(listId, body);

        // TODO: test validations
    }
    
    /**
     * Update interest category
     *
     * Update a specific interest category.
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void patchListsIdInterestCategoriesIdTest() {
        String listId = null;
        String interestCategoryId = null;
        InterestCategory1 body = null;

        InterestCategory response = api.patchListsIdInterestCategoriesId(listId, interestCategoryId, body);

        // TODO: test validations
    }
    
    /**
     * Update interest in category
     *
     * Update interests or &#39;group names&#39; for a specific category.
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void patchListsIdInterestCategoriesIdInterestsIdTest() {
        String listId = null;
        String interestCategoryId = null;
        String interestId = null;
        Interest1 body = null;

        Interest response = api.patchListsIdInterestCategoriesIdInterestsId(listId, interestCategoryId, interestId, body);

        // TODO: test validations
    }
    
    /**
     * Update list member
     *
     * Update information for a specific list member.
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void patchListsIdMembersIdTest() {
        String listId = null;
        String subscriberHash = null;
        AddListMembers3 body = null;
        Boolean skipMergeValidation = null;

        ListMembers2 response = api.patchListsIdMembersId(listId, subscriberHash, body, skipMergeValidation);

        // TODO: test validations
    }
    
    /**
     * Update note
     *
     * Update a specific note for a specific list member.
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void patchListsIdMembersIdNotesIdTest() {
        String listId = null;
        String subscriberHash = null;
        String noteId = null;
        MemberNotes1 body = null;

        MemberNotes response = api.patchListsIdMembersIdNotesId(listId, subscriberHash, noteId, body);

        // TODO: test validations
    }
    
    /**
     * Update merge field
     *
     * Update a specific merge field.
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void patchListsIdMergeFieldsIdTest() {
        String listId = null;
        String mergeId = null;
        MergeField2 body = null;

        MergeField response = api.patchListsIdMergeFieldsId(listId, mergeId, body);

        // TODO: test validations
    }
    
    /**
     * Update segment
     *
     * Update a specific segment in a list.
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void patchListsIdSegmentsIdTest() {
        String listId = null;
        String segmentId = null;
        List9 body = null;

        List7 response = api.patchListsIdSegmentsId(listId, segmentId, body);

        // TODO: test validations
    }
    
    /**
     * Update webhook
     *
     * Update the settings for an existing webhook.
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void patchListsIdWebhooksIdTest() {
        String listId = null;
        String webhookId = null;
        AddWebhook body = null;

        ListWebhooks response = api.patchListsIdWebhooksId(listId, webhookId, body);

        // TODO: test validations
    }
    
    /**
     * Add event
     *
     * Add an event for a list member.
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void postListMemberEventsTest() {
        String listId = null;
        String subscriberHash = null;
        Events body = null;

        api.postListMemberEvents(listId, subscriberHash, body);

        // TODO: test validations
    }
    
    /**
     * Add or remove member tags
     *
     * Add or remove tags from a list member. If a tag that does not exist is passed in and set as &#39;active&#39;, a new tag will be created.
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void postListMemberTagsTest() {
        String listId = null;
        String subscriberHash = null;
        MemberTags body = null;

        api.postListMemberTags(listId, subscriberHash, body);

        // TODO: test validations
    }
    
    /**
     * Add list
     *
     * Create a new list in your Mailchimp account.
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void postListsTest() {
        SubscriberList1 body = null;

        SubscriberList response = api.postLists(body);

        // TODO: test validations
    }
    
    /**
     * Batch subscribe or unsubscribe
     *
     * Batch subscribe or unsubscribe list members.
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void postListsIdTest() {
        String listId = null;
        MembersToSubscribeUnsubscribeToFromAListInBatch body = null;
        Boolean skipMergeValidation = null;
        Boolean skipDuplicateCheck = null;

        BatchUpdateListMembers response = api.postListsId(listId, body, skipMergeValidation, skipDuplicateCheck);

        // TODO: test validations
    }
    
    /**
     * Add interest category
     *
     * Create a new interest category.
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void postListsIdInterestCategoriesTest() {
        String listId = null;
        InterestCategory1 body = null;

        InterestCategory response = api.postListsIdInterestCategories(listId, body);

        // TODO: test validations
    }
    
    /**
     * Add interest in category
     *
     * Create a new interest or &#39;group name&#39; for a specific category.
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void postListsIdInterestCategoriesIdInterestsTest() {
        String listId = null;
        String interestCategoryId = null;
        Interest1 body = null;

        Interest response = api.postListsIdInterestCategoriesIdInterests(listId, interestCategoryId, body);

        // TODO: test validations
    }
    
    /**
     * Add member to list
     *
     * Add a new member to the list.
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void postListsIdMembersTest() {
        String listId = null;
        AddListMembers1 body = null;
        Boolean skipMergeValidation = null;

        ListMembers2 response = api.postListsIdMembers(listId, body, skipMergeValidation);

        // TODO: test validations
    }
    
    /**
     * Delete list member
     *
     * Delete all personally identifiable information related to a list member, and remove them from a list. This will make it impossible to re-import the list member.
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void postListsIdMembersHashActionsDeletePermanentTest() {
        String listId = null;
        String subscriberHash = null;

        api.postListsIdMembersHashActionsDeletePermanent(listId, subscriberHash);

        // TODO: test validations
    }
    
    /**
     * Add member note
     *
     * Add a new note for a specific subscriber.
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void postListsIdMembersIdNotesTest() {
        String listId = null;
        String subscriberHash = null;
        MemberNotes1 body = null;

        MemberNotes response = api.postListsIdMembersIdNotes(listId, subscriberHash, body);

        // TODO: test validations
    }
    
    /**
     * Add merge field
     *
     * Add a new merge field for a specific audience.
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void postListsIdMergeFieldsTest() {
        String listId = null;
        MergeField1 body = null;

        MergeField response = api.postListsIdMergeFields(listId, body);

        // TODO: test validations
    }
    
    /**
     * Add segment
     *
     * Create a new segment in a specific list.
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void postListsIdSegmentsTest() {
        String listId = null;
        List8 body = null;

        List7 response = api.postListsIdSegments(listId, body);

        // TODO: test validations
    }
    
    /**
     * Batch add or remove members
     *
     * Batch add/remove list members to static segment
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void postListsIdSegmentsIdTest() {
        String listId = null;
        String segmentId = null;
        MembersToAddRemoveToFromAStaticSegment body = null;

        BatchAddRemoveListMembersToFromStaticSegment response = api.postListsIdSegmentsId(listId, segmentId, body);

        // TODO: test validations
    }
    
    /**
     * Add member to segment
     *
     * Add a member to a static segment.
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void postListsIdSegmentsIdMembersTest() {
        String listId = null;
        String segmentId = null;
        PostListsIdSegmentsIdMembersRequest body = null;

        ListMembers1 response = api.postListsIdSegmentsIdMembers(listId, segmentId, body);

        // TODO: test validations
    }
    
    /**
     * Customize signup form
     *
     * Customize a list&#39;s default signup form.
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void postListsIdSignupFormsTest() {
        String listId = null;
        SignupForm1 body = null;

        SignupForm response = api.postListsIdSignupForms(listId, body);

        // TODO: test validations
    }
    
    /**
     * Add webhook
     *
     * Create a new webhook for a specific list.
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void postListsIdWebhooksTest() {
        String listId = null;
        AddWebhook body = null;

        ListWebhooks response = api.postListsIdWebhooks(listId, body);

        // TODO: test validations
    }
    
    /**
     * List segments
     *
     * Get information about all available segments for a specific list.
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void previewASegmentTest() {
        String listId = null;
        List<String> fields = null;
        List<String> excludeFields = null;
        Integer count = null;
        Integer offset = null;
        String type = null;
        String sinceCreatedAt = null;
        String beforeCreatedAt = null;
        Boolean includeCleaned = null;
        Boolean includeTransactional = null;
        Boolean includeUnsubscribed = null;
        String sinceUpdatedAt = null;
        String beforeUpdatedAt = null;

        CollectionOfSegments response = api.previewASegment(listId, fields, excludeFields, count, offset, type, sinceCreatedAt, beforeCreatedAt, includeCleaned, includeTransactional, includeUnsubscribed, sinceUpdatedAt, beforeUpdatedAt);

        // TODO: test validations
    }
    
    /**
     * Add or update list member
     *
     * Add or update a list member.
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void putListsIdMembersIdTest() {
        String listId = null;
        String subscriberHash = null;
        AddListMembers2 body = null;
        Boolean skipMergeValidation = null;

        ListMembers2 response = api.putListsIdMembersId(listId, subscriberHash, body, skipMergeValidation);

        // TODO: test validations
    }
    
    /**
     * Search for tags on a list by name.
     *
     * Search for tags on a list by name. If no name is provided, will return all tags on the list.
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void searchTagsByNameTest() {
        String listId = null;
        String name = null;

        TagSearchResults response = api.searchTagsByName(listId, name);

        // TODO: test validations
    }
    
}
