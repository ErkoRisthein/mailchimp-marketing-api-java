/*
 * Mailchimp Marketing API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0.81
 * Contact: apihelp@mailchimp.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.erkoristhein.mailchimp.marketing.api;

import io.github.erkoristhein.mailchimp.marketing.model.FileManager;
import io.github.erkoristhein.mailchimp.marketing.model.FileManagerFolders;
import io.github.erkoristhein.mailchimp.marketing.model.GalleryFile;
import io.github.erkoristhein.mailchimp.marketing.model.GalleryFile1;
import io.github.erkoristhein.mailchimp.marketing.model.GalleryFile2;
import io.github.erkoristhein.mailchimp.marketing.model.GalleryFolder;
import io.github.erkoristhein.mailchimp.marketing.model.GalleryFolder1;
import io.github.erkoristhein.mailchimp.marketing.model.ProblemDetailDocument;
import org.junit.Test;
import org.junit.Ignore;

import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for FileManagerApi
 */
@Ignore
public class FileManagerApiTest {

    private final FileManagerApi api = new FileManagerApi();

    
    /**
     * Delete file
     *
     * Remove a specific file from the File Manager.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteFileManagerFilesIdTest() {
        String fileId = null;

        api.deleteFileManagerFilesId(fileId);

        // TODO: test validations
    }
    
    /**
     * Delete folder
     *
     * Delete a specific folder in the File Manager.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteFileManagerFoldersIdTest() {
        String folderId = null;

        api.deleteFileManagerFoldersId(folderId);

        // TODO: test validations
    }
    
    /**
     * List stored files
     *
     * Get a list of available images and files stored in the File Manager for the account.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFileManagerFilesTest() {
        List<String> fields = null;
        List<String> excludeFields = null;
        Integer count = null;
        Integer offset = null;
        String type = null;
        String createdBy = null;
        String beforeCreatedAt = null;
        String sinceCreatedAt = null;
        String sortField = null;
        String sortDir = null;

        FileManager response = api.getFileManagerFiles(fields, excludeFields, count, offset, type, createdBy, beforeCreatedAt, sinceCreatedAt, sortField, sortDir);

        // TODO: test validations
    }
    
    /**
     * Get file
     *
     * Get information about a specific file in the File Manager.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFileManagerFilesIdTest() {
        String fileId = null;
        List<String> fields = null;
        List<String> excludeFields = null;

        GalleryFile response = api.getFileManagerFilesId(fileId, fields, excludeFields);

        // TODO: test validations
    }
    
    /**
     * List folders
     *
     * Get a list of all folders in the File Manager.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFileManagerFoldersTest() {
        List<String> fields = null;
        List<String> excludeFields = null;
        Integer count = null;
        Integer offset = null;
        String createdBy = null;
        String beforeCreatedAt = null;
        String sinceCreatedAt = null;

        FileManagerFolders response = api.getFileManagerFolders(fields, excludeFields, count, offset, createdBy, beforeCreatedAt, sinceCreatedAt);

        // TODO: test validations
    }
    
    /**
     * Get folder
     *
     * Get information about a specific folder in the File Manager.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFileManagerFoldersIdTest() {
        String folderId = null;
        List<String> fields = null;
        List<String> excludeFields = null;

        GalleryFolder response = api.getFileManagerFoldersId(folderId, fields, excludeFields);

        // TODO: test validations
    }
    
    /**
     * Update file
     *
     * Update a file in the File Manager.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchFileManagerFilesIdTest() {
        String fileId = null;
        GalleryFile2 body = null;

        GalleryFile response = api.patchFileManagerFilesId(fileId, body);

        // TODO: test validations
    }
    
    /**
     * Update folder
     *
     * Update a specific File Manager folder.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchFileManagerFoldersIdTest() {
        String folderId = null;
        GalleryFolder1 body = null;

        GalleryFolder response = api.patchFileManagerFoldersId(folderId, body);

        // TODO: test validations
    }
    
    /**
     * Add file
     *
     * Upload a new image or file to the File Manager.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postFileManagerFilesTest() {
        GalleryFile1 body = null;

        GalleryFile response = api.postFileManagerFiles(body);

        // TODO: test validations
    }
    
    /**
     * Add folder
     *
     * Create a new folder in the File Manager.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postFileManagerFoldersTest() {
        GalleryFolder1 body = null;

        GalleryFolder response = api.postFileManagerFolders(body);

        // TODO: test validations
    }
    
}
