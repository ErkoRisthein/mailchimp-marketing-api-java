/*
 * Mailchimp Marketing API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0.81
 * Contact: apihelp@mailchimp.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.erkoristhein.mailchimp.marketing.api;

import io.github.erkoristhein.mailchimp.marketing.model.GetReportingFacebookAds200Response;
import io.github.erkoristhein.mailchimp.marketing.model.GetReportingFacebookAdsId200Response;
import io.github.erkoristhein.mailchimp.marketing.model.GetReportingLandingPages200Response;
import io.github.erkoristhein.mailchimp.marketing.model.GetReportingSurveys200Response;
import io.github.erkoristhein.mailchimp.marketing.model.GetReportingSurveysIdQuestions200Response;
import io.github.erkoristhein.mailchimp.marketing.model.GetReportingSurveysIdQuestionsIdAnswers200Response;
import io.github.erkoristhein.mailchimp.marketing.model.GetReportingSurveysIdResponses200Response;
import io.github.erkoristhein.mailchimp.marketing.model.GetReportsIdEcommerceProductActivity200Response;
import io.github.erkoristhein.mailchimp.marketing.model.LandingPageReport;
import io.github.erkoristhein.mailchimp.marketing.model.ProblemDetailDocument;
import io.github.erkoristhein.mailchimp.marketing.model.SurveyQuestionReport;
import io.github.erkoristhein.mailchimp.marketing.model.SurveyReport;
import io.github.erkoristhein.mailchimp.marketing.model.SurveyResponse;
import org.junit.Test;
import org.junit.Ignore;

import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ReportingApi
 */
@Ignore
public class ReportingApiTest {

    private final ReportingApi api = new ReportingApi();

    
    /**
     * List facebook ads reports
     *
     * Get reports of Facebook ads.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getReportingFacebookAdsTest() {
        List<String> fields = null;
        List<String> excludeFields = null;
        Integer count = null;
        Integer offset = null;
        String sortField = null;
        String sortDir = null;

        GetReportingFacebookAds200Response response = api.getReportingFacebookAds(fields, excludeFields, count, offset, sortField, sortDir);

        // TODO: test validations
    }
    
    /**
     * Get facebook ad report
     *
     * Get report of a Facebook ad.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getReportingFacebookAdsIdTest() {
        String outreachId = null;
        List<String> fields = null;
        List<String> excludeFields = null;

        GetReportingFacebookAdsId200Response response = api.getReportingFacebookAdsId(outreachId, fields, excludeFields);

        // TODO: test validations
    }
    
    /**
     * List facebook ecommerce report
     *
     * Get breakdown of product activity for an outreach.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getReportingFacebookAdsIdEcommerceProductActivityTest() {
        String outreachId = null;
        List<String> fields = null;
        List<String> excludeFields = null;
        Integer count = null;
        Integer offset = null;
        String sortField = null;

        GetReportsIdEcommerceProductActivity200Response response = api.getReportingFacebookAdsIdEcommerceProductActivity(outreachId, fields, excludeFields, count, offset, sortField);

        // TODO: test validations
    }
    
    /**
     * List landing pages reports
     *
     * Get reports of landing pages.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getReportingLandingPagesTest() {
        List<String> fields = null;
        List<String> excludeFields = null;
        Integer count = null;
        Integer offset = null;

        GetReportingLandingPages200Response response = api.getReportingLandingPages(fields, excludeFields, count, offset);

        // TODO: test validations
    }
    
    /**
     * Get landing page report
     *
     * Get report of a landing page.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getReportingLandingPagesIdTest() {
        String outreachId = null;
        List<String> fields = null;
        List<String> excludeFields = null;

        LandingPageReport response = api.getReportingLandingPagesId(outreachId, fields, excludeFields);

        // TODO: test validations
    }
    
    /**
     * List survey reports
     *
     * Get reports for surveys.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getReportingSurveysTest() {
        List<String> fields = null;
        List<String> excludeFields = null;
        Integer count = null;
        Integer offset = null;

        GetReportingSurveys200Response response = api.getReportingSurveys(fields, excludeFields, count, offset);

        // TODO: test validations
    }
    
    /**
     * Get survey report
     *
     * Get report for a survey.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getReportingSurveysIdTest() {
        String outreachId = null;
        List<String> fields = null;
        List<String> excludeFields = null;

        SurveyReport response = api.getReportingSurveysId(outreachId, fields, excludeFields);

        // TODO: test validations
    }
    
    /**
     * List survey question reports
     *
     * Get reports for survey questions.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getReportingSurveysIdQuestionsTest() {
        String outreachId = null;
        List<String> fields = null;
        List<String> excludeFields = null;

        GetReportingSurveysIdQuestions200Response response = api.getReportingSurveysIdQuestions(outreachId, fields, excludeFields);

        // TODO: test validations
    }
    
    /**
     * Get survey question report
     *
     * Get report for a survey question.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getReportingSurveysIdQuestionsIdTest() {
        String outreachId = null;
        String questionId = null;
        List<String> fields = null;
        List<String> excludeFields = null;

        SurveyQuestionReport response = api.getReportingSurveysIdQuestionsId(outreachId, questionId, fields, excludeFields);

        // TODO: test validations
    }
    
    /**
     * List answers for question
     *
     * Get answers for a survey question.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getReportingSurveysIdQuestionsIdAnswersTest() {
        String outreachId = null;
        String questionId = null;
        List<String> fields = null;
        List<String> excludeFields = null;
        String respondentFamiliarityIs = null;

        GetReportingSurveysIdQuestionsIdAnswers200Response response = api.getReportingSurveysIdQuestionsIdAnswers(outreachId, questionId, fields, excludeFields, respondentFamiliarityIs);

        // TODO: test validations
    }
    
    /**
     * List survey responses
     *
     * Get responses to a survey.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getReportingSurveysIdResponsesTest() {
        String outreachId = null;
        List<String> fields = null;
        List<String> excludeFields = null;
        Integer answeredQuestion = null;
        String choseAnswer = null;
        String respondentFamiliarityIs = null;

        GetReportingSurveysIdResponses200Response response = api.getReportingSurveysIdResponses(outreachId, fields, excludeFields, answeredQuestion, choseAnswer, respondentFamiliarityIs);

        // TODO: test validations
    }
    
    /**
     * Get survey response
     *
     * Get a single survey response.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getReportingSurveysIdResponsesIdTest() {
        String outreachId = null;
        String responseId = null;

        SurveyResponse response = api.getReportingSurveysIdResponsesId(outreachId, responseId);

        // TODO: test validations
    }
    
}
