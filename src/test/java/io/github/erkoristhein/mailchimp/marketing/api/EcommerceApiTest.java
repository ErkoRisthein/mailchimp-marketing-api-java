/*
 * Mailchimp Marketing API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0.55
 * Contact: apihelp@mailchimp.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.erkoristhein.mailchimp.marketing.api;

import io.github.erkoristhein.mailchimp.marketing.model.CartLines;
import io.github.erkoristhein.mailchimp.marketing.model.Carts;
import io.github.erkoristhein.mailchimp.marketing.model.Customers;
import io.github.erkoristhein.mailchimp.marketing.model.ECommerceCart;
import io.github.erkoristhein.mailchimp.marketing.model.ECommerceCart1;
import io.github.erkoristhein.mailchimp.marketing.model.ECommerceCart2;
import io.github.erkoristhein.mailchimp.marketing.model.ECommerceCartLineItem;
import io.github.erkoristhein.mailchimp.marketing.model.ECommerceCartLineItem1;
import io.github.erkoristhein.mailchimp.marketing.model.ECommerceCartLineItem2;
import io.github.erkoristhein.mailchimp.marketing.model.ECommerceCustomer;
import io.github.erkoristhein.mailchimp.marketing.model.ECommerceCustomer2;
import io.github.erkoristhein.mailchimp.marketing.model.ECommerceCustomer3;
import io.github.erkoristhein.mailchimp.marketing.model.ECommerceCustomer4;
import io.github.erkoristhein.mailchimp.marketing.model.ECommerceOrder;
import io.github.erkoristhein.mailchimp.marketing.model.ECommerceOrder1;
import io.github.erkoristhein.mailchimp.marketing.model.ECommerceOrder2;
import io.github.erkoristhein.mailchimp.marketing.model.ECommerceOrderLineItem;
import io.github.erkoristhein.mailchimp.marketing.model.ECommerceOrderLineItem1;
import io.github.erkoristhein.mailchimp.marketing.model.ECommerceOrderLineItem2;
import io.github.erkoristhein.mailchimp.marketing.model.ECommerceProduct;
import io.github.erkoristhein.mailchimp.marketing.model.ECommerceProduct1;
import io.github.erkoristhein.mailchimp.marketing.model.ECommerceProduct2;
import io.github.erkoristhein.mailchimp.marketing.model.ECommerceProductImage;
import io.github.erkoristhein.mailchimp.marketing.model.ECommerceProductImage1;
import io.github.erkoristhein.mailchimp.marketing.model.ECommerceProductImage2;
import io.github.erkoristhein.mailchimp.marketing.model.ECommerceProductVariant;
import io.github.erkoristhein.mailchimp.marketing.model.ECommerceProductVariant1;
import io.github.erkoristhein.mailchimp.marketing.model.ECommerceProductVariant2;
import io.github.erkoristhein.mailchimp.marketing.model.ECommercePromoCode;
import io.github.erkoristhein.mailchimp.marketing.model.ECommercePromoCode1;
import io.github.erkoristhein.mailchimp.marketing.model.ECommercePromoCode2;
import io.github.erkoristhein.mailchimp.marketing.model.ECommercePromoRule;
import io.github.erkoristhein.mailchimp.marketing.model.ECommercePromoRule1;
import io.github.erkoristhein.mailchimp.marketing.model.ECommercePromoRule2;
import io.github.erkoristhein.mailchimp.marketing.model.ECommerceStore;
import io.github.erkoristhein.mailchimp.marketing.model.ECommerceStore1;
import io.github.erkoristhein.mailchimp.marketing.model.ECommerceStore2;
import io.github.erkoristhein.mailchimp.marketing.model.ECommerceStores;
import io.github.erkoristhein.mailchimp.marketing.model.EcommerceProductImages;
import io.github.erkoristhein.mailchimp.marketing.model.EcommerceProductVariants;
import io.github.erkoristhein.mailchimp.marketing.model.OrderLines;
import io.github.erkoristhein.mailchimp.marketing.model.Orders;
import io.github.erkoristhein.mailchimp.marketing.model.Orders1;
import io.github.erkoristhein.mailchimp.marketing.model.ProblemDetailDocument;
import io.github.erkoristhein.mailchimp.marketing.model.Products;
import io.github.erkoristhein.mailchimp.marketing.model.PromoCodes;
import io.github.erkoristhein.mailchimp.marketing.model.PromoRules;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.springframework.web.client.RestClientException;

import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for EcommerceApi
 */
@Disabled
class EcommerceApiTest {

    private final EcommerceApi api = new EcommerceApi();

    
    /**
     * Delete store
     *
     * Delete a store. Deleting a store will also delete any associated subresources, including Customers, Orders, Products, and Carts.
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void deleteEcommerceStoresIdTest() {
        String storeId = null;

        Object response = api.deleteEcommerceStoresId(storeId);

        // TODO: test validations
    }
    
    /**
     * Delete cart
     *
     * Delete a cart.
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void deleteEcommerceStoresIdCartsIdTest() {
        String storeId = null;
        String cartId = null;

        api.deleteEcommerceStoresIdCartsId(storeId, cartId);

        // TODO: test validations
    }
    
    /**
     * Delete cart line item
     *
     * Delete a specific cart line item.
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void deleteEcommerceStoresIdCartsLinesIdTest() {
        String storeId = null;
        String cartId = null;
        String lineId = null;

        api.deleteEcommerceStoresIdCartsLinesId(storeId, cartId, lineId);

        // TODO: test validations
    }
    
    /**
     * Delete customer
     *
     * Delete a customer from a store.
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void deleteEcommerceStoresIdCustomersIdTest() {
        String storeId = null;
        String customerId = null;

        api.deleteEcommerceStoresIdCustomersId(storeId, customerId);

        // TODO: test validations
    }
    
    /**
     * Delete order
     *
     * Delete an order.
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void deleteEcommerceStoresIdOrdersIdTest() {
        String storeId = null;
        String orderId = null;

        api.deleteEcommerceStoresIdOrdersId(storeId, orderId);

        // TODO: test validations
    }
    
    /**
     * Delete order line item
     *
     * Delete a specific order line item.
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void deleteEcommerceStoresIdOrdersIdLinesIdTest() {
        String storeId = null;
        String orderId = null;
        String lineId = null;

        api.deleteEcommerceStoresIdOrdersIdLinesId(storeId, orderId, lineId);

        // TODO: test validations
    }
    
    /**
     * Delete product
     *
     * Delete a product.
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void deleteEcommerceStoresIdProductsIdTest() {
        String storeId = null;
        String productId = null;

        api.deleteEcommerceStoresIdProductsId(storeId, productId);

        // TODO: test validations
    }
    
    /**
     * Delete product image
     *
     * Delete a product image.
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void deleteEcommerceStoresIdProductsIdImagesIdTest() {
        String storeId = null;
        String productId = null;
        String imageId = null;

        api.deleteEcommerceStoresIdProductsIdImagesId(storeId, productId, imageId);

        // TODO: test validations
    }
    
    /**
     * Delete product variant
     *
     * Delete a product variant.
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void deleteEcommerceStoresIdProductsIdVariantsIdTest() {
        String storeId = null;
        String productId = null;
        String variantId = null;

        api.deleteEcommerceStoresIdProductsIdVariantsId(storeId, productId, variantId);

        // TODO: test validations
    }
    
    /**
     * Delete promo code
     *
     * Delete a promo code from a store.
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void deleteEcommerceStoresIdPromocodesIdTest() {
        String storeId = null;
        String promoRuleId = null;
        String promoCodeId = null;

        api.deleteEcommerceStoresIdPromocodesId(storeId, promoRuleId, promoCodeId);

        // TODO: test validations
    }
    
    /**
     * Delete promo rule
     *
     * Delete a promo rule from a store.
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void deleteEcommerceStoresIdPromorulesIdTest() {
        String storeId = null;
        String promoRuleId = null;

        api.deleteEcommerceStoresIdPromorulesId(storeId, promoRuleId);

        // TODO: test validations
    }
    
    /**
     * List account orders
     *
     * Get information about an account&#39;s orders.
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void getEcommerceOrdersTest() {
        List<String> fields = null;
        List<String> excludeFields = null;
        Integer count = null;
        Integer offset = null;
        String campaignId = null;
        String outreachId = null;
        String customerId = null;
        Boolean hasOutreach = null;

        Orders response = api.getEcommerceOrders(fields, excludeFields, count, offset, campaignId, outreachId, customerId, hasOutreach);

        // TODO: test validations
    }
    
    /**
     * List stores
     *
     * Get information about all stores in the account.
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void getEcommerceStoresTest() {
        List<String> fields = null;
        List<String> excludeFields = null;
        Integer count = null;
        Integer offset = null;

        ECommerceStores response = api.getEcommerceStores(fields, excludeFields, count, offset);

        // TODO: test validations
    }
    
    /**
     * Get store info
     *
     * Get information about a specific store.
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void getEcommerceStoresIdTest() {
        String storeId = null;
        List<String> fields = null;
        List<String> excludeFields = null;

        ECommerceStore response = api.getEcommerceStoresId(storeId, fields, excludeFields);

        // TODO: test validations
    }
    
    /**
     * List carts
     *
     * Get information about a store&#39;s carts.
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void getEcommerceStoresIdCartsTest() {
        String storeId = null;
        List<String> fields = null;
        List<String> excludeFields = null;
        Integer count = null;
        Integer offset = null;

        Carts response = api.getEcommerceStoresIdCarts(storeId, fields, excludeFields, count, offset);

        // TODO: test validations
    }
    
    /**
     * Get cart info
     *
     * Get information about a specific cart.
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void getEcommerceStoresIdCartsIdTest() {
        String storeId = null;
        String cartId = null;
        List<String> fields = null;
        List<String> excludeFields = null;

        ECommerceCart response = api.getEcommerceStoresIdCartsId(storeId, cartId, fields, excludeFields);

        // TODO: test validations
    }
    
    /**
     * List cart line items
     *
     * Get information about a cart&#39;s line items.
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void getEcommerceStoresIdCartsIdLinesTest() {
        String storeId = null;
        String cartId = null;
        List<String> fields = null;
        List<String> excludeFields = null;
        Integer count = null;
        Integer offset = null;

        CartLines response = api.getEcommerceStoresIdCartsIdLines(storeId, cartId, fields, excludeFields, count, offset);

        // TODO: test validations
    }
    
    /**
     * Get cart line item
     *
     * Get information about a specific cart line item.
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void getEcommerceStoresIdCartsIdLinesIdTest() {
        String storeId = null;
        String cartId = null;
        String lineId = null;
        List<String> fields = null;
        List<String> excludeFields = null;

        ECommerceCartLineItem response = api.getEcommerceStoresIdCartsIdLinesId(storeId, cartId, lineId, fields, excludeFields);

        // TODO: test validations
    }
    
    /**
     * List customers
     *
     * Get information about a store&#39;s customers.
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void getEcommerceStoresIdCustomersTest() {
        String storeId = null;
        List<String> fields = null;
        List<String> excludeFields = null;
        Integer count = null;
        Integer offset = null;
        String emailAddress = null;

        Customers response = api.getEcommerceStoresIdCustomers(storeId, fields, excludeFields, count, offset, emailAddress);

        // TODO: test validations
    }
    
    /**
     * Get customer info
     *
     * Get information about a specific customer.
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void getEcommerceStoresIdCustomersIdTest() {
        String storeId = null;
        String customerId = null;
        List<String> fields = null;
        List<String> excludeFields = null;

        ECommerceCustomer response = api.getEcommerceStoresIdCustomersId(storeId, customerId, fields, excludeFields);

        // TODO: test validations
    }
    
    /**
     * List orders
     *
     * Get information about a store&#39;s orders.
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void getEcommerceStoresIdOrdersTest() {
        String storeId = null;
        List<String> fields = null;
        List<String> excludeFields = null;
        Integer count = null;
        Integer offset = null;
        String customerId = null;
        Boolean hasOutreach = null;
        String campaignId = null;
        String outreachId = null;

        Orders1 response = api.getEcommerceStoresIdOrders(storeId, fields, excludeFields, count, offset, customerId, hasOutreach, campaignId, outreachId);

        // TODO: test validations
    }
    
    /**
     * Get order info
     *
     * Get information about a specific order.
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void getEcommerceStoresIdOrdersIdTest() {
        String storeId = null;
        String orderId = null;
        List<String> fields = null;
        List<String> excludeFields = null;

        ECommerceOrder response = api.getEcommerceStoresIdOrdersId(storeId, orderId, fields, excludeFields);

        // TODO: test validations
    }
    
    /**
     * List order line items
     *
     * Get information about an order&#39;s line items.
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void getEcommerceStoresIdOrdersIdLinesTest() {
        String storeId = null;
        String orderId = null;
        List<String> fields = null;
        List<String> excludeFields = null;
        Integer count = null;
        Integer offset = null;

        OrderLines response = api.getEcommerceStoresIdOrdersIdLines(storeId, orderId, fields, excludeFields, count, offset);

        // TODO: test validations
    }
    
    /**
     * Get order line item
     *
     * Get information about a specific order line item.
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void getEcommerceStoresIdOrdersIdLinesIdTest() {
        String storeId = null;
        String orderId = null;
        String lineId = null;
        List<String> fields = null;
        List<String> excludeFields = null;

        ECommerceOrderLineItem response = api.getEcommerceStoresIdOrdersIdLinesId(storeId, orderId, lineId, fields, excludeFields);

        // TODO: test validations
    }
    
    /**
     * List product
     *
     * Get information about a store&#39;s products.
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void getEcommerceStoresIdProductsTest() {
        String storeId = null;
        List<String> fields = null;
        List<String> excludeFields = null;
        Integer count = null;
        Integer offset = null;

        Products response = api.getEcommerceStoresIdProducts(storeId, fields, excludeFields, count, offset);

        // TODO: test validations
    }
    
    /**
     * Get product info
     *
     * Get information about a specific product.
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void getEcommerceStoresIdProductsIdTest() {
        String storeId = null;
        String productId = null;
        List<String> fields = null;
        List<String> excludeFields = null;

        ECommerceProduct response = api.getEcommerceStoresIdProductsId(storeId, productId, fields, excludeFields);

        // TODO: test validations
    }
    
    /**
     * List product images
     *
     * Get information about a product&#39;s images.
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void getEcommerceStoresIdProductsIdImagesTest() {
        String storeId = null;
        String productId = null;
        List<String> fields = null;
        List<String> excludeFields = null;
        Integer count = null;
        Integer offset = null;

        EcommerceProductImages response = api.getEcommerceStoresIdProductsIdImages(storeId, productId, fields, excludeFields, count, offset);

        // TODO: test validations
    }
    
    /**
     * Get product image info
     *
     * Get information about a specific product image.
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void getEcommerceStoresIdProductsIdImagesIdTest() {
        String storeId = null;
        String productId = null;
        String imageId = null;
        List<String> fields = null;
        List<String> excludeFields = null;

        ECommerceProductImage response = api.getEcommerceStoresIdProductsIdImagesId(storeId, productId, imageId, fields, excludeFields);

        // TODO: test validations
    }
    
    /**
     * List product variants
     *
     * Get information about a product&#39;s variants.
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void getEcommerceStoresIdProductsIdVariantsTest() {
        String storeId = null;
        String productId = null;
        List<String> fields = null;
        List<String> excludeFields = null;
        Integer count = null;
        Integer offset = null;

        EcommerceProductVariants response = api.getEcommerceStoresIdProductsIdVariants(storeId, productId, fields, excludeFields, count, offset);

        // TODO: test validations
    }
    
    /**
     * Get product variant info
     *
     * Get information about a specific product variant.
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void getEcommerceStoresIdProductsIdVariantsIdTest() {
        String storeId = null;
        String productId = null;
        String variantId = null;
        List<String> fields = null;
        List<String> excludeFields = null;

        ECommerceProductVariant response = api.getEcommerceStoresIdProductsIdVariantsId(storeId, productId, variantId, fields, excludeFields);

        // TODO: test validations
    }
    
    /**
     * List promo codes
     *
     * Get information about a store&#39;s promo codes.
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void getEcommerceStoresIdPromocodesTest() {
        String promoRuleId = null;
        String storeId = null;
        List<String> fields = null;
        List<String> excludeFields = null;
        Integer count = null;
        Integer offset = null;

        PromoCodes response = api.getEcommerceStoresIdPromocodes(promoRuleId, storeId, fields, excludeFields, count, offset);

        // TODO: test validations
    }
    
    /**
     * Get promo code
     *
     * Get information about a specific promo code.
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void getEcommerceStoresIdPromocodesIdTest() {
        String storeId = null;
        String promoRuleId = null;
        String promoCodeId = null;
        List<String> fields = null;
        List<String> excludeFields = null;

        ECommercePromoCode response = api.getEcommerceStoresIdPromocodesId(storeId, promoRuleId, promoCodeId, fields, excludeFields);

        // TODO: test validations
    }
    
    /**
     * List promo rules
     *
     * Get information about a store&#39;s promo rules.
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void getEcommerceStoresIdPromorulesTest() {
        String storeId = null;
        List<String> fields = null;
        List<String> excludeFields = null;
        Integer count = null;
        Integer offset = null;

        PromoRules response = api.getEcommerceStoresIdPromorules(storeId, fields, excludeFields, count, offset);

        // TODO: test validations
    }
    
    /**
     * Get promo rule
     *
     * Get information about a specific promo rule.
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void getEcommerceStoresIdPromorulesIdTest() {
        String storeId = null;
        String promoRuleId = null;
        List<String> fields = null;
        List<String> excludeFields = null;

        ECommercePromoRule response = api.getEcommerceStoresIdPromorulesId(storeId, promoRuleId, fields, excludeFields);

        // TODO: test validations
    }
    
    /**
     * Update store
     *
     * Update a store.
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void patchEcommerceStoresIdTest() {
        String storeId = null;
        ECommerceStore2 body = null;

        ECommerceStore response = api.patchEcommerceStoresId(storeId, body);

        // TODO: test validations
    }
    
    /**
     * Update cart
     *
     * Update a specific cart.
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void patchEcommerceStoresIdCartsIdTest() {
        String storeId = null;
        String cartId = null;
        ECommerceCart2 body = null;

        ECommerceCart response = api.patchEcommerceStoresIdCartsId(storeId, cartId, body);

        // TODO: test validations
    }
    
    /**
     * Update cart line item
     *
     * Update a specific cart line item.
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void patchEcommerceStoresIdCartsIdLinesIdTest() {
        String storeId = null;
        String cartId = null;
        String lineId = null;
        ECommerceCartLineItem2 body = null;

        ECommerceCartLineItem response = api.patchEcommerceStoresIdCartsIdLinesId(storeId, cartId, lineId, body);

        // TODO: test validations
    }
    
    /**
     * Update customer
     *
     * Update a customer.
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void patchEcommerceStoresIdCustomersIdTest() {
        String storeId = null;
        String customerId = null;
        ECommerceCustomer2 body = null;

        ECommerceCustomer response = api.patchEcommerceStoresIdCustomersId(storeId, customerId, body);

        // TODO: test validations
    }
    
    /**
     * Update order
     *
     * Update a specific order.
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void patchEcommerceStoresIdOrdersIdTest() {
        String storeId = null;
        String orderId = null;
        ECommerceOrder2 body = null;

        ECommerceOrder response = api.patchEcommerceStoresIdOrdersId(storeId, orderId, body);

        // TODO: test validations
    }
    
    /**
     * Update order line item
     *
     * Update a specific order line item.
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void patchEcommerceStoresIdOrdersIdLinesIdTest() {
        String storeId = null;
        String orderId = null;
        String lineId = null;
        ECommerceOrderLineItem2 body = null;

        ECommerceOrderLineItem response = api.patchEcommerceStoresIdOrdersIdLinesId(storeId, orderId, lineId, body);

        // TODO: test validations
    }
    
    /**
     * Update product
     *
     * Update a specific product.
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void patchEcommerceStoresIdProductsIdTest() {
        String storeId = null;
        String productId = null;
        ECommerceProduct2 body = null;

        ECommerceProduct response = api.patchEcommerceStoresIdProductsId(storeId, productId, body);

        // TODO: test validations
    }
    
    /**
     * Update product image
     *
     * Update a product image.
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void patchEcommerceStoresIdProductsIdImagesIdTest() {
        String storeId = null;
        String productId = null;
        String imageId = null;
        ECommerceProductImage2 body = null;

        ECommerceProductImage response = api.patchEcommerceStoresIdProductsIdImagesId(storeId, productId, imageId, body);

        // TODO: test validations
    }
    
    /**
     * Update product variant
     *
     * Update a product variant.
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void patchEcommerceStoresIdProductsIdVariantsIdTest() {
        String storeId = null;
        String productId = null;
        String variantId = null;
        ECommerceProductVariant2 body = null;

        ECommerceProductVariant response = api.patchEcommerceStoresIdProductsIdVariantsId(storeId, productId, variantId, body);

        // TODO: test validations
    }
    
    /**
     * Update promo code
     *
     * Update a promo code.
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void patchEcommerceStoresIdPromocodesIdTest() {
        String storeId = null;
        String promoRuleId = null;
        String promoCodeId = null;
        ECommercePromoCode2 body = null;

        ECommercePromoCode response = api.patchEcommerceStoresIdPromocodesId(storeId, promoRuleId, promoCodeId, body);

        // TODO: test validations
    }
    
    /**
     * Update promo rule
     *
     * Update a promo rule.
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void patchEcommerceStoresIdPromorulesIdTest() {
        String storeId = null;
        String promoRuleId = null;
        ECommercePromoRule2 body = null;

        ECommercePromoRule response = api.patchEcommerceStoresIdPromorulesId(storeId, promoRuleId, body);

        // TODO: test validations
    }
    
    /**
     * Add store
     *
     * Add a new store to your Mailchimp account.
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void postEcommerceStoresTest() {
        ECommerceStore1 body = null;

        ECommerceStore response = api.postEcommerceStores(body);

        // TODO: test validations
    }
    
    /**
     * Add cart
     *
     * Add a new cart to a store.
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void postEcommerceStoresIdCartsTest() {
        String storeId = null;
        ECommerceCart1 body = null;

        ECommerceCart response = api.postEcommerceStoresIdCarts(storeId, body);

        // TODO: test validations
    }
    
    /**
     * Add cart line item
     *
     * Add a new line item to an existing cart.
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void postEcommerceStoresIdCartsIdLinesTest() {
        String storeId = null;
        String cartId = null;
        ECommerceCartLineItem1 body = null;

        ECommerceCartLineItem response = api.postEcommerceStoresIdCartsIdLines(storeId, cartId, body);

        // TODO: test validations
    }
    
    /**
     * Add customer
     *
     * Add a new customer to a store.
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void postEcommerceStoresIdCustomersTest() {
        String storeId = null;
        ECommerceCustomer3 body = null;

        ECommerceCustomer response = api.postEcommerceStoresIdCustomers(storeId, body);

        // TODO: test validations
    }
    
    /**
     * Add order
     *
     * Add a new order to a store.
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void postEcommerceStoresIdOrdersTest() {
        String storeId = null;
        ECommerceOrder1 body = null;

        ECommerceOrder response = api.postEcommerceStoresIdOrders(storeId, body);

        // TODO: test validations
    }
    
    /**
     * Add order line item
     *
     * Add a new line item to an existing order.
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void postEcommerceStoresIdOrdersIdLinesTest() {
        String storeId = null;
        String orderId = null;
        ECommerceOrderLineItem1 body = null;

        ECommerceOrderLineItem response = api.postEcommerceStoresIdOrdersIdLines(storeId, orderId, body);

        // TODO: test validations
    }
    
    /**
     * Add product
     *
     * Add a new product to a store.
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void postEcommerceStoresIdProductsTest() {
        String storeId = null;
        ECommerceProduct1 body = null;

        ECommerceProduct response = api.postEcommerceStoresIdProducts(storeId, body);

        // TODO: test validations
    }
    
    /**
     * Add product image
     *
     * Add a new image to the product.
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void postEcommerceStoresIdProductsIdImagesTest() {
        String storeId = null;
        String productId = null;
        ECommerceProductImage1 body = null;

        ECommerceProductImage response = api.postEcommerceStoresIdProductsIdImages(storeId, productId, body);

        // TODO: test validations
    }
    
    /**
     * Add product variant
     *
     * Add a new variant to the product.
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void postEcommerceStoresIdProductsIdVariantsTest() {
        String storeId = null;
        String productId = null;
        ECommerceProductVariant1 body = null;

        ECommerceProductVariant response = api.postEcommerceStoresIdProductsIdVariants(storeId, productId, body);

        // TODO: test validations
    }
    
    /**
     * Add promo code
     *
     * Add a new promo code to a store.
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void postEcommerceStoresIdPromocodesTest() {
        String storeId = null;
        String promoRuleId = null;
        ECommercePromoCode1 body = null;

        ECommercePromoCode response = api.postEcommerceStoresIdPromocodes(storeId, promoRuleId, body);

        // TODO: test validations
    }
    
    /**
     * Add promo rule
     *
     * Add a new promo rule to a store.
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void postEcommerceStoresIdPromorulesTest() {
        String storeId = null;
        ECommercePromoRule1 body = null;

        ECommercePromoRule response = api.postEcommerceStoresIdPromorules(storeId, body);

        // TODO: test validations
    }
    
    /**
     * Add or update customer
     *
     * Add or update a customer.
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void putEcommerceStoresIdCustomersIdTest() {
        String storeId = null;
        String customerId = null;
        ECommerceCustomer4 body = null;

        ECommerceCustomer response = api.putEcommerceStoresIdCustomersId(storeId, customerId, body);

        // TODO: test validations
    }
    
    /**
     * Add or update product variant
     *
     * Add or update a product variant.
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void putEcommerceStoresIdProductsIdVariantsIdTest() {
        String storeId = null;
        String productId = null;
        String variantId = null;
        ECommerceProductVariant1 body = null;

        ECommerceProductVariant response = api.putEcommerceStoresIdProductsIdVariantsId(storeId, productId, variantId, body);

        // TODO: test validations
    }
    
}
