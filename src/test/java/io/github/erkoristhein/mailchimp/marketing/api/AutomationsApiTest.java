/*
 * Mailchimp Marketing API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0.81
 * Contact: apihelp@mailchimp.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.erkoristhein.mailchimp.marketing.api;

import io.github.erkoristhein.mailchimp.marketing.model.AutomationEmails;
import io.github.erkoristhein.mailchimp.marketing.model.AutomationWorkflow;
import io.github.erkoristhein.mailchimp.marketing.model.AutomationWorkflow1;
import io.github.erkoristhein.mailchimp.marketing.model.AutomationWorkflowEmail;
import io.github.erkoristhein.mailchimp.marketing.model.GetAutomations200Response;
import io.github.erkoristhein.mailchimp.marketing.model.GetAutomationsIdEmailsIdQueue200Response;
import java.time.OffsetDateTime;
import io.github.erkoristhein.mailchimp.marketing.model.ProblemDetailDocument;
import io.github.erkoristhein.mailchimp.marketing.model.RemovedSubscribers;
import io.github.erkoristhein.mailchimp.marketing.model.SubscriberInAutomationQueue1;
import io.github.erkoristhein.mailchimp.marketing.model.SubscriberInAutomationQueue2;
import io.github.erkoristhein.mailchimp.marketing.model.SubscriberRemovedFromAutomationWorkflow;
import io.github.erkoristhein.mailchimp.marketing.model.UpdateInformationAboutASpecificWorkflowEmail;
import org.junit.Test;
import org.junit.Ignore;

import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AutomationsApi
 */
@Ignore
public class AutomationsApiTest {

    private final AutomationsApi api = new AutomationsApi();

    
    /**
     * Archive automation
     *
     * Archiving will permanently end your automation and keep the report data. You’ll be able to replicate your archived automation, but you can’t restart it.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void archiveAutomationsTest() {
        String workflowId = null;

        api.archiveAutomations(workflowId);

        // TODO: test validations
    }
    
    /**
     * Delete workflow email
     *
     * Removes an individual classic automation workflow email. Emails from certain workflow types, including the Abandoned Cart Email (abandonedCart) and Product Retargeting Email (abandonedBrowse) Workflows, cannot be deleted.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteAutomationsIdEmailsIdTest() {
        String workflowId = null;
        String workflowEmailId = null;

        api.deleteAutomationsIdEmailsId(workflowId, workflowEmailId);

        // TODO: test validations
    }
    
    /**
     * List automations
     *
     * Get a summary of an account&#39;s classic automations.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAutomationsTest() {
        Integer count = null;
        Integer offset = null;
        List<String> fields = null;
        List<String> excludeFields = null;
        OffsetDateTime beforeCreateTime = null;
        OffsetDateTime sinceCreateTime = null;
        OffsetDateTime beforeStartTime = null;
        OffsetDateTime sinceStartTime = null;
        String status = null;

        GetAutomations200Response response = api.getAutomations(count, offset, fields, excludeFields, beforeCreateTime, sinceCreateTime, beforeStartTime, sinceStartTime, status);

        // TODO: test validations
    }
    
    /**
     * Get automation info
     *
     * Get a summary of an individual classic automation workflow&#39;s settings and content. The &#x60;trigger_settings&#x60; object returns information for the first email in the workflow.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAutomationsIdTest() {
        String workflowId = null;
        List<String> fields = null;
        List<String> excludeFields = null;

        AutomationWorkflow response = api.getAutomationsId(workflowId, fields, excludeFields);

        // TODO: test validations
    }
    
    /**
     * List automated emails
     *
     * Get a summary of the emails in a classic automation workflow.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAutomationsIdEmailsTest() {
        String workflowId = null;

        AutomationEmails response = api.getAutomationsIdEmails(workflowId);

        // TODO: test validations
    }
    
    /**
     * Get workflow email info
     *
     * Get information about an individual classic automation workflow email.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAutomationsIdEmailsIdTest() {
        String workflowId = null;
        String workflowEmailId = null;

        AutomationWorkflowEmail response = api.getAutomationsIdEmailsId(workflowId, workflowEmailId);

        // TODO: test validations
    }
    
    /**
     * List automated email subscribers
     *
     * Get information about a classic automation email queue.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAutomationsIdEmailsIdQueueTest() {
        String workflowId = null;
        String workflowEmailId = null;

        GetAutomationsIdEmailsIdQueue200Response response = api.getAutomationsIdEmailsIdQueue(workflowId, workflowEmailId);

        // TODO: test validations
    }
    
    /**
     * Get automated email subscriber
     *
     * Get information about a specific subscriber in a classic automation email queue.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAutomationsIdEmailsIdQueueIdTest() {
        String workflowId = null;
        String workflowEmailId = null;
        String subscriberHash = null;

        SubscriberInAutomationQueue2 response = api.getAutomationsIdEmailsIdQueueId(workflowId, workflowEmailId, subscriberHash);

        // TODO: test validations
    }
    
    /**
     * List subscribers removed from workflow
     *
     * Get information about subscribers who were removed from a classic automation workflow.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAutomationsIdRemovedSubscribersTest() {
        String workflowId = null;

        RemovedSubscribers response = api.getAutomationsIdRemovedSubscribers(workflowId);

        // TODO: test validations
    }
    
    /**
     * Get subscriber removed from workflow
     *
     * Get information about a specific subscriber who was removed from a classic automation workflow.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAutomationsIdRemovedSubscribersIdTest() {
        String workflowId = null;
        String subscriberHash = null;

        SubscriberRemovedFromAutomationWorkflow response = api.getAutomationsIdRemovedSubscribersId(workflowId, subscriberHash);

        // TODO: test validations
    }
    
    /**
     * Update workflow email
     *
     * Update settings for a classic automation workflow email.  Only works with workflows of type: abandonedBrowse, abandonedCart, emailFollowup, or singleWelcome.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchAutomationEmailWorkflowIdTest() {
        String workflowId = null;
        String workflowEmailId = null;
        UpdateInformationAboutASpecificWorkflowEmail body = null;

        AutomationWorkflowEmail response = api.patchAutomationEmailWorkflowId(workflowId, workflowEmailId, body);

        // TODO: test validations
    }
    
    /**
     * Add automation
     *
     * Create a new classic automation in your Mailchimp account.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postAutomationsTest() {
        AutomationWorkflow1 body = null;

        AutomationWorkflow response = api.postAutomations(body);

        // TODO: test validations
    }
    
    /**
     * Pause automation emails
     *
     * Pause all emails in a specific classic automation workflow.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postAutomationsIdActionsPauseAllEmailsTest() {
        String workflowId = null;

        api.postAutomationsIdActionsPauseAllEmails(workflowId);

        // TODO: test validations
    }
    
    /**
     * Start automation emails
     *
     * Start all emails in a classic automation workflow.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postAutomationsIdActionsStartAllEmailsTest() {
        String workflowId = null;

        api.postAutomationsIdActionsStartAllEmails(workflowId);

        // TODO: test validations
    }
    
    /**
     * Pause automated email
     *
     * Pause an automated email.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postAutomationsIdEmailsIdActionsPauseTest() {
        String workflowId = null;
        String workflowEmailId = null;

        api.postAutomationsIdEmailsIdActionsPause(workflowId, workflowEmailId);

        // TODO: test validations
    }
    
    /**
     * Start automated email
     *
     * Start an automated email.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postAutomationsIdEmailsIdActionsStartTest() {
        String workflowId = null;
        String workflowEmailId = null;

        api.postAutomationsIdEmailsIdActionsStart(workflowId, workflowEmailId);

        // TODO: test validations
    }
    
    /**
     * Add subscriber to workflow email
     *
     * Manually add a subscriber to a workflow, bypassing the default trigger settings. You can also use this endpoint to trigger a series of automated emails in an API 3.0 workflow type.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postAutomationsIdEmailsIdQueueTest() {
        String workflowId = null;
        String workflowEmailId = null;
        SubscriberInAutomationQueue1 body = null;

        SubscriberInAutomationQueue2 response = api.postAutomationsIdEmailsIdQueue(workflowId, workflowEmailId, body);

        // TODO: test validations
    }
    
    /**
     * Remove subscriber from workflow
     *
     * Remove a subscriber from a specific classic automation workflow. You can remove a subscriber at any point in an automation workflow, regardless of how many emails they&#39;ve been sent from that workflow. Once they&#39;re removed, they can never be added back to the same workflow.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postAutomationsIdRemovedSubscribersTest() {
        String workflowId = null;
        SubscriberInAutomationQueue1 body = null;

        SubscriberRemovedFromAutomationWorkflow response = api.postAutomationsIdRemovedSubscribers(workflowId, body);

        // TODO: test validations
    }
    
}
