/*
 * Mailchimp Marketing API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0.55
 * Contact: apihelp@mailchimp.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.erkoristhein.mailchimp.marketing.model;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.github.erkoristhein.mailchimp.marketing.model.ABSplitStats;
import io.github.erkoristhein.mailchimp.marketing.model.Bounces;
import io.github.erkoristhein.mailchimp.marketing.model.CampaignDeliveryStatus;
import io.github.erkoristhein.mailchimp.marketing.model.Clicks;
import io.github.erkoristhein.mailchimp.marketing.model.ECommerceReport1;
import io.github.erkoristhein.mailchimp.marketing.model.FacebookLikes;
import io.github.erkoristhein.mailchimp.marketing.model.Forwards;
import io.github.erkoristhein.mailchimp.marketing.model.IndustryStats1;
import io.github.erkoristhein.mailchimp.marketing.model.ListStats;
import io.github.erkoristhein.mailchimp.marketing.model.Opens;
import io.github.erkoristhein.mailchimp.marketing.model.ResourceLink;
import io.github.erkoristhein.mailchimp.marketing.model.ShareReport;
import io.github.erkoristhein.mailchimp.marketing.model.TimeseriesInner;
import io.github.erkoristhein.mailchimp.marketing.model.TimewarpStatsInner;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for CampaignReport
 */
class CampaignReportTest {
    private final CampaignReport model = new CampaignReport();

    /**
     * Model tests for CampaignReport
     */
    @Test
    void testCampaignReport() {
        // TODO: test CampaignReport
    }

    /**
     * Test the property 'id'
     */
    @Test
    void idTest() {
        // TODO: test id
    }

    /**
     * Test the property 'campaignTitle'
     */
    @Test
    void campaignTitleTest() {
        // TODO: test campaignTitle
    }

    /**
     * Test the property 'type'
     */
    @Test
    void typeTest() {
        // TODO: test type
    }

    /**
     * Test the property 'listId'
     */
    @Test
    void listIdTest() {
        // TODO: test listId
    }

    /**
     * Test the property 'listIsActive'
     */
    @Test
    void listIsActiveTest() {
        // TODO: test listIsActive
    }

    /**
     * Test the property 'listName'
     */
    @Test
    void listNameTest() {
        // TODO: test listName
    }

    /**
     * Test the property 'subjectLine'
     */
    @Test
    void subjectLineTest() {
        // TODO: test subjectLine
    }

    /**
     * Test the property 'previewText'
     */
    @Test
    void previewTextTest() {
        // TODO: test previewText
    }

    /**
     * Test the property 'emailsSent'
     */
    @Test
    void emailsSentTest() {
        // TODO: test emailsSent
    }

    /**
     * Test the property 'abuseReports'
     */
    @Test
    void abuseReportsTest() {
        // TODO: test abuseReports
    }

    /**
     * Test the property 'unsubscribed'
     */
    @Test
    void unsubscribedTest() {
        // TODO: test unsubscribed
    }

    /**
     * Test the property 'sendTime'
     */
    @Test
    void sendTimeTest() {
        // TODO: test sendTime
    }

    /**
     * Test the property 'rssLastSend'
     */
    @Test
    void rssLastSendTest() {
        // TODO: test rssLastSend
    }

    /**
     * Test the property 'bounces'
     */
    @Test
    void bouncesTest() {
        // TODO: test bounces
    }

    /**
     * Test the property 'forwards'
     */
    @Test
    void forwardsTest() {
        // TODO: test forwards
    }

    /**
     * Test the property 'opens'
     */
    @Test
    void opensTest() {
        // TODO: test opens
    }

    /**
     * Test the property 'clicks'
     */
    @Test
    void clicksTest() {
        // TODO: test clicks
    }

    /**
     * Test the property 'facebookLikes'
     */
    @Test
    void facebookLikesTest() {
        // TODO: test facebookLikes
    }

    /**
     * Test the property 'industryStats'
     */
    @Test
    void industryStatsTest() {
        // TODO: test industryStats
    }

    /**
     * Test the property 'listStats'
     */
    @Test
    void listStatsTest() {
        // TODO: test listStats
    }

    /**
     * Test the property 'abSplit'
     */
    @Test
    void abSplitTest() {
        // TODO: test abSplit
    }

    /**
     * Test the property 'timewarp'
     */
    @Test
    void timewarpTest() {
        // TODO: test timewarp
    }

    /**
     * Test the property 'timeseries'
     */
    @Test
    void timeseriesTest() {
        // TODO: test timeseries
    }

    /**
     * Test the property 'shareReport'
     */
    @Test
    void shareReportTest() {
        // TODO: test shareReport
    }

    /**
     * Test the property 'ecommerce'
     */
    @Test
    void ecommerceTest() {
        // TODO: test ecommerce
    }

    /**
     * Test the property 'deliveryStatus'
     */
    @Test
    void deliveryStatusTest() {
        // TODO: test deliveryStatus
    }

    /**
     * Test the property 'links'
     */
    @Test
    void linksTest() {
        // TODO: test links
    }

}
