/*
 * Mailchimp Marketing API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0.55
 * Contact: apihelp@mailchimp.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.erkoristhein.mailchimp.marketing.api;

import io.github.erkoristhein.mailchimp.marketing.model.Campaign;
import io.github.erkoristhein.mailchimp.marketing.model.Campaign1;
import io.github.erkoristhein.mailchimp.marketing.model.Campaign2;
import io.github.erkoristhein.mailchimp.marketing.model.Campaign3;
import io.github.erkoristhein.mailchimp.marketing.model.CampaignContent;
import io.github.erkoristhein.mailchimp.marketing.model.CampaignContent1;
import io.github.erkoristhein.mailchimp.marketing.model.CampaignFeedback1;
import io.github.erkoristhein.mailchimp.marketing.model.CampaignFeedback2;
import io.github.erkoristhein.mailchimp.marketing.model.CampaignFeedback3;
import io.github.erkoristhein.mailchimp.marketing.model.CampaignReports;
import io.github.erkoristhein.mailchimp.marketing.model.GetCampaigns200Response;
import java.time.OffsetDateTime;
import io.github.erkoristhein.mailchimp.marketing.model.PostCampaignsIdActionsCreateResendRequest;
import io.github.erkoristhein.mailchimp.marketing.model.PostCampaignsIdActionsScheduleRequest;
import io.github.erkoristhein.mailchimp.marketing.model.PostCampaignsIdActionsTestRequest;
import io.github.erkoristhein.mailchimp.marketing.model.ProblemDetailDocument;
import io.github.erkoristhein.mailchimp.marketing.model.SendChecklist;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.springframework.web.client.RestClientException;

import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for CampaignsApi
 */
@Disabled
class CampaignsApiTest {

    private final CampaignsApi api = new CampaignsApi();

    
    /**
     * Delete campaign
     *
     * Remove a campaign from your Mailchimp account.
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void deleteCampaignsIdTest() {
        String campaignId = null;

        api.deleteCampaignsId(campaignId);

        // TODO: test validations
    }
    
    /**
     * Delete campaign feedback message
     *
     * Remove a specific feedback message for a campaign.
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void deleteCampaignsIdFeedbackIdTest() {
        String campaignId = null;
        String feedbackId = null;

        api.deleteCampaignsIdFeedbackId(campaignId, feedbackId);

        // TODO: test validations
    }
    
    /**
     * List campaigns
     *
     * Get all campaigns in an account.
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void getCampaignsTest() {
        List<String> fields = null;
        List<String> excludeFields = null;
        Integer count = null;
        Integer offset = null;
        String type = null;
        String status = null;
        OffsetDateTime beforeSendTime = null;
        OffsetDateTime sinceSendTime = null;
        OffsetDateTime beforeCreateTime = null;
        OffsetDateTime sinceCreateTime = null;
        String listId = null;
        String folderId = null;
        String memberId = null;
        String sortField = null;
        String sortDir = null;
        Boolean includeResendShortcutEligibility = null;

        GetCampaigns200Response response = api.getCampaigns(fields, excludeFields, count, offset, type, status, beforeSendTime, sinceSendTime, beforeCreateTime, sinceCreateTime, listId, folderId, memberId, sortField, sortDir, includeResendShortcutEligibility);

        // TODO: test validations
    }
    
    /**
     * Get campaign info
     *
     * Get information about a specific campaign.
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void getCampaignsIdTest() {
        String campaignId = null;
        List<String> fields = null;
        List<String> excludeFields = null;
        Boolean includeResendShortcutEligibility = null;

        Campaign response = api.getCampaignsId(campaignId, fields, excludeFields, includeResendShortcutEligibility);

        // TODO: test validations
    }
    
    /**
     * Get campaign content
     *
     * Get the the HTML and plain-text content for a campaign.
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void getCampaignsIdContentTest() {
        String campaignId = null;
        List<String> fields = null;
        List<String> excludeFields = null;

        CampaignContent response = api.getCampaignsIdContent(campaignId, fields, excludeFields);

        // TODO: test validations
    }
    
    /**
     * List campaign feedback
     *
     * Get team feedback while you&#39;re working together on a Mailchimp campaign.
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void getCampaignsIdFeedbackTest() {
        String campaignId = null;
        List<String> fields = null;
        List<String> excludeFields = null;

        CampaignReports response = api.getCampaignsIdFeedback(campaignId, fields, excludeFields);

        // TODO: test validations
    }
    
    /**
     * Get campaign feedback message
     *
     * Get a specific feedback message from a campaign.
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void getCampaignsIdFeedbackIdTest() {
        String campaignId = null;
        String feedbackId = null;
        List<String> fields = null;
        List<String> excludeFields = null;

        CampaignFeedback2 response = api.getCampaignsIdFeedbackId(campaignId, feedbackId, fields, excludeFields);

        // TODO: test validations
    }
    
    /**
     * Get campaign send checklist
     *
     * Review the send checklist for a campaign, and resolve any issues before sending.
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void getCampaignsIdSendChecklistTest() {
        String campaignId = null;
        List<String> fields = null;
        List<String> excludeFields = null;

        SendChecklist response = api.getCampaignsIdSendChecklist(campaignId, fields, excludeFields);

        // TODO: test validations
    }
    
    /**
     * Update campaign settings
     *
     * Update some or all of the settings for a specific campaign.
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void patchCampaignsIdTest() {
        String campaignId = null;
        Campaign2 body = null;

        Campaign response = api.patchCampaignsId(campaignId, body);

        // TODO: test validations
    }
    
    /**
     * Update campaign feedback message
     *
     * Update a specific feedback message for a campaign.
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void patchCampaignsIdFeedbackIdTest() {
        String campaignId = null;
        String feedbackId = null;
        CampaignFeedback3 body = null;

        CampaignFeedback2 response = api.patchCampaignsIdFeedbackId(campaignId, feedbackId, body);

        // TODO: test validations
    }
    
    /**
     * Add campaign
     *
     * Create a new Mailchimp campaign.
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void postCampaignsTest() {
        Campaign1 body = null;

        Campaign response = api.postCampaigns(body);

        // TODO: test validations
    }
    
    /**
     * Cancel campaign
     *
     * Cancel a Regular or Plain-Text Campaign after you send, before all of your recipients receive it. This feature is included with Mailchimp Pro.
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void postCampaignsIdActionsCancelSendTest() {
        String campaignId = null;

        api.postCampaignsIdActionsCancelSend(campaignId);

        // TODO: test validations
    }
    
    /**
     * Resend campaign
     *
     * Remove the guesswork for resending a campaign to certain segments. You can use this endpoint as a shortcut to replicate a campaign and resend it to common segments, such as those who didn&#39;t open the campaign, or any new subscribers since it was sent.
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void postCampaignsIdActionsCreateResendTest() {
        String campaignId = null;
        PostCampaignsIdActionsCreateResendRequest body = null;

        Campaign3 response = api.postCampaignsIdActionsCreateResend(campaignId, body);

        // TODO: test validations
    }
    
    /**
     * Pause rss campaign
     *
     * Pause an RSS-Driven campaign.
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void postCampaignsIdActionsPauseTest() {
        String campaignId = null;

        api.postCampaignsIdActionsPause(campaignId);

        // TODO: test validations
    }
    
    /**
     * Replicate campaign
     *
     * Replicate a campaign in saved or send status.
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void postCampaignsIdActionsReplicateTest() {
        String campaignId = null;

        Campaign3 response = api.postCampaignsIdActionsReplicate(campaignId);

        // TODO: test validations
    }
    
    /**
     * Resume rss campaign
     *
     * Resume an RSS-Driven campaign.
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void postCampaignsIdActionsResumeTest() {
        String campaignId = null;

        api.postCampaignsIdActionsResume(campaignId);

        // TODO: test validations
    }
    
    /**
     * Schedule campaign
     *
     * Schedule a campaign for delivery. If you&#39;re using Multivariate Campaigns to test send times or sending RSS Campaigns, use the send action instead.
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void postCampaignsIdActionsScheduleTest() {
        String campaignId = null;
        PostCampaignsIdActionsScheduleRequest body = null;

        api.postCampaignsIdActionsSchedule(campaignId, body);

        // TODO: test validations
    }
    
    /**
     * Send campaign
     *
     * Send a Mailchimp campaign. For RSS Campaigns, the campaign will send according to its schedule. All other campaigns will send immediately.
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void postCampaignsIdActionsSendTest() {
        String campaignId = null;

        api.postCampaignsIdActionsSend(campaignId);

        // TODO: test validations
    }
    
    /**
     * Send test email
     *
     * Send a test email.
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void postCampaignsIdActionsTestTest() {
        String campaignId = null;
        PostCampaignsIdActionsTestRequest body = null;

        api.postCampaignsIdActionsTest(campaignId, body);

        // TODO: test validations
    }
    
    /**
     * Unschedule campaign
     *
     * Unschedule a scheduled campaign that hasn&#39;t started sending.
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void postCampaignsIdActionsUnscheduleTest() {
        String campaignId = null;

        api.postCampaignsIdActionsUnschedule(campaignId);

        // TODO: test validations
    }
    
    /**
     * Add campaign feedback
     *
     * Add feedback on a specific campaign.
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void postCampaignsIdFeedbackTest() {
        String campaignId = null;
        CampaignFeedback1 body = null;

        CampaignFeedback2 response = api.postCampaignsIdFeedback(campaignId, body);

        // TODO: test validations
    }
    
    /**
     * Set campaign content
     *
     * Set the content for a campaign.
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void putCampaignsIdContentTest() {
        String campaignId = null;
        CampaignContent1 body = null;

        CampaignContent response = api.putCampaignsIdContent(campaignId, body);

        // TODO: test validations
    }
    
}
