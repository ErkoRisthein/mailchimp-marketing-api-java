/*
 * Mailchimp Marketing API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0.55
 * Contact: apihelp@mailchimp.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.erkoristhein.mailchimp.marketing.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.github.erkoristhein.mailchimp.marketing.model.MergeFieldOptions2;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * A [merge field](https://mailchimp.com/developer/marketing/docs/merge-fields/) for an audience.
 */
@JsonPropertyOrder({
  MergeField2.JSON_PROPERTY_TAG,
  MergeField2.JSON_PROPERTY_NAME,
  MergeField2.JSON_PROPERTY_REQUIRED,
  MergeField2.JSON_PROPERTY_DEFAULT_VALUE,
  MergeField2.JSON_PROPERTY_PUBLIC,
  MergeField2.JSON_PROPERTY_DISPLAY_ORDER,
  MergeField2.JSON_PROPERTY_OPTIONS,
  MergeField2.JSON_PROPERTY_HELP_TEXT
})
@JsonTypeName("Merge_Field_2")
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-26T16:39:59.516441+03:00[Europe/Helsinki]", comments = "Generator version: 7.5.0")
public class MergeField2 {
  public static final String JSON_PROPERTY_TAG = "tag";
  private String tag;

  public static final String JSON_PROPERTY_NAME = "name";
  private String name;

  public static final String JSON_PROPERTY_REQUIRED = "required";
  private Boolean required;

  public static final String JSON_PROPERTY_DEFAULT_VALUE = "default_value";
  private String defaultValue;

  public static final String JSON_PROPERTY_PUBLIC = "public";
  private Boolean _public;

  public static final String JSON_PROPERTY_DISPLAY_ORDER = "display_order";
  private Integer displayOrder;

  public static final String JSON_PROPERTY_OPTIONS = "options";
  private MergeFieldOptions2 options;

  public static final String JSON_PROPERTY_HELP_TEXT = "help_text";
  private String helpText;

  public MergeField2() {
  }

  public MergeField2 tag(String tag) {
    
    this.tag = tag;
    return this;
  }

   /**
   * The merge tag used for Mailchimp campaigns and [adding contact information](https://mailchimp.com/developer/marketing/docs/merge-fields/#add-merge-data-to-contacts).
   * @return tag
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TAG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getTag() {
    return tag;
  }


  @JsonProperty(JSON_PROPERTY_TAG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTag(String tag) {
    this.tag = tag;
  }


  public MergeField2 name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * The name of the merge field (audience field).
   * @return name
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setName(String name) {
    this.name = name;
  }


  public MergeField2 required(Boolean required) {
    
    this.required = required;
    return this;
  }

   /**
   * Whether the merge field is required to import a contact.
   * @return required
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_REQUIRED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getRequired() {
    return required;
  }


  @JsonProperty(JSON_PROPERTY_REQUIRED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRequired(Boolean required) {
    this.required = required;
  }


  public MergeField2 defaultValue(String defaultValue) {
    
    this.defaultValue = defaultValue;
    return this;
  }

   /**
   * The default value for the merge field if &#x60;null&#x60;.
   * @return defaultValue
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DEFAULT_VALUE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDefaultValue() {
    return defaultValue;
  }


  @JsonProperty(JSON_PROPERTY_DEFAULT_VALUE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDefaultValue(String defaultValue) {
    this.defaultValue = defaultValue;
  }


  public MergeField2 _public(Boolean _public) {
    
    this._public = _public;
    return this;
  }

   /**
   * Whether the merge field is displayed on the signup form.
   * @return _public
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PUBLIC)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getPublic() {
    return _public;
  }


  @JsonProperty(JSON_PROPERTY_PUBLIC)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPublic(Boolean _public) {
    this._public = _public;
  }


  public MergeField2 displayOrder(Integer displayOrder) {
    
    this.displayOrder = displayOrder;
    return this;
  }

   /**
   * The order that the merge field displays on the list signup form.
   * @return displayOrder
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DISPLAY_ORDER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getDisplayOrder() {
    return displayOrder;
  }


  @JsonProperty(JSON_PROPERTY_DISPLAY_ORDER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDisplayOrder(Integer displayOrder) {
    this.displayOrder = displayOrder;
  }


  public MergeField2 options(MergeFieldOptions2 options) {
    
    this.options = options;
    return this;
  }

   /**
   * Get options
   * @return options
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_OPTIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public MergeFieldOptions2 getOptions() {
    return options;
  }


  @JsonProperty(JSON_PROPERTY_OPTIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOptions(MergeFieldOptions2 options) {
    this.options = options;
  }


  public MergeField2 helpText(String helpText) {
    
    this.helpText = helpText;
    return this;
  }

   /**
   * Extra text to help the subscriber fill out the form.
   * @return helpText
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_HELP_TEXT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getHelpText() {
    return helpText;
  }


  @JsonProperty(JSON_PROPERTY_HELP_TEXT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setHelpText(String helpText) {
    this.helpText = helpText;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MergeField2 mergeField2 = (MergeField2) o;
    return Objects.equals(this.tag, mergeField2.tag) &&
        Objects.equals(this.name, mergeField2.name) &&
        Objects.equals(this.required, mergeField2.required) &&
        Objects.equals(this.defaultValue, mergeField2.defaultValue) &&
        Objects.equals(this._public, mergeField2._public) &&
        Objects.equals(this.displayOrder, mergeField2.displayOrder) &&
        Objects.equals(this.options, mergeField2.options) &&
        Objects.equals(this.helpText, mergeField2.helpText);
  }

  @Override
  public int hashCode() {
    return Objects.hash(tag, name, required, defaultValue, _public, displayOrder, options, helpText);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MergeField2 {\n");
    sb.append("    tag: ").append(toIndentedString(tag)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    required: ").append(toIndentedString(required)).append("\n");
    sb.append("    defaultValue: ").append(toIndentedString(defaultValue)).append("\n");
    sb.append("    _public: ").append(toIndentedString(_public)).append("\n");
    sb.append("    displayOrder: ").append(toIndentedString(displayOrder)).append("\n");
    sb.append("    options: ").append(toIndentedString(options)).append("\n");
    sb.append("    helpText: ").append(toIndentedString(helpText)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

