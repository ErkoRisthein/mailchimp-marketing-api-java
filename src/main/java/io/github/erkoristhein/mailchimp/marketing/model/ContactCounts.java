/*
 * Mailchimp Marketing API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0.55
 * Contact: apihelp@mailchimp.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.erkoristhein.mailchimp.marketing.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * For email question types, how many are new, known, or unknown contacts.
 */
@JsonPropertyOrder({
  ContactCounts.JSON_PROPERTY_KNOWN,
  ContactCounts.JSON_PROPERTY_UNKNOWN,
  ContactCounts.JSON_PROPERTY_NEW
})
@JsonTypeName("Contact_Counts")
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-26T16:39:59.516441+03:00[Europe/Helsinki]", comments = "Generator version: 7.5.0")
public class ContactCounts {
  public static final String JSON_PROPERTY_KNOWN = "known";
  private Integer known;

  public static final String JSON_PROPERTY_UNKNOWN = "unknown";
  private Integer unknown;

  public static final String JSON_PROPERTY_NEW = "new";
  private Integer _new;

  public ContactCounts() {
  }

  public ContactCounts known(Integer known) {
    
    this.known = known;
    return this;
  }

   /**
   * The number of known contacts that responded to this survey.
   * @return known
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_KNOWN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getKnown() {
    return known;
  }


  @JsonProperty(JSON_PROPERTY_KNOWN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setKnown(Integer known) {
    this.known = known;
  }


  public ContactCounts unknown(Integer unknown) {
    
    this.unknown = unknown;
    return this;
  }

   /**
   * The number of unknown contacts that responded to this survey.
   * @return unknown
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_UNKNOWN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getUnknown() {
    return unknown;
  }


  @JsonProperty(JSON_PROPERTY_UNKNOWN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUnknown(Integer unknown) {
    this.unknown = unknown;
  }


  public ContactCounts _new(Integer _new) {
    
    this._new = _new;
    return this;
  }

   /**
   * The number of new contacts that responded to this survey.
   * @return _new
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NEW)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getNew() {
    return _new;
  }


  @JsonProperty(JSON_PROPERTY_NEW)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNew(Integer _new) {
    this._new = _new;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ContactCounts contactCounts = (ContactCounts) o;
    return Objects.equals(this.known, contactCounts.known) &&
        Objects.equals(this.unknown, contactCounts.unknown) &&
        Objects.equals(this._new, contactCounts._new);
  }

  @Override
  public int hashCode() {
    return Objects.hash(known, unknown, _new);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ContactCounts {\n");
    sb.append("    known: ").append(toIndentedString(known)).append("\n");
    sb.append("    unknown: ").append(toIndentedString(unknown)).append("\n");
    sb.append("    _new: ").append(toIndentedString(_new)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

