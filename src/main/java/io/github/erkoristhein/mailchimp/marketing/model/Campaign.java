/*
 * Mailchimp Marketing API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0.55
 * Contact: apihelp@mailchimp.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.erkoristhein.mailchimp.marketing.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.github.erkoristhein.mailchimp.marketing.model.ABTestOptions;
import io.github.erkoristhein.mailchimp.marketing.model.ABTestingOptions;
import io.github.erkoristhein.mailchimp.marketing.model.CampaignDeliveryStatus;
import io.github.erkoristhein.mailchimp.marketing.model.CampaignReportSummary2;
import io.github.erkoristhein.mailchimp.marketing.model.CampaignSettings2;
import io.github.erkoristhein.mailchimp.marketing.model.CampaignSocialCard;
import io.github.erkoristhein.mailchimp.marketing.model.CampaignTrackingOptions1;
import io.github.erkoristhein.mailchimp.marketing.model.List3;
import io.github.erkoristhein.mailchimp.marketing.model.RSSOptions;
import io.github.erkoristhein.mailchimp.marketing.model.ResendShortcutEligibility;
import io.github.erkoristhein.mailchimp.marketing.model.ResourceLink;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * A summary of an individual campaign&#39;s settings and content.
 */
@JsonPropertyOrder({
  Campaign.JSON_PROPERTY_ID,
  Campaign.JSON_PROPERTY_WEB_ID,
  Campaign.JSON_PROPERTY_PARENT_CAMPAIGN_ID,
  Campaign.JSON_PROPERTY_TYPE,
  Campaign.JSON_PROPERTY_CREATE_TIME,
  Campaign.JSON_PROPERTY_ARCHIVE_URL,
  Campaign.JSON_PROPERTY_LONG_ARCHIVE_URL,
  Campaign.JSON_PROPERTY_STATUS,
  Campaign.JSON_PROPERTY_EMAILS_SENT,
  Campaign.JSON_PROPERTY_SEND_TIME,
  Campaign.JSON_PROPERTY_CONTENT_TYPE,
  Campaign.JSON_PROPERTY_NEEDS_BLOCK_REFRESH,
  Campaign.JSON_PROPERTY_RESENDABLE,
  Campaign.JSON_PROPERTY_RECIPIENTS,
  Campaign.JSON_PROPERTY_SETTINGS,
  Campaign.JSON_PROPERTY_VARIATE_SETTINGS,
  Campaign.JSON_PROPERTY_TRACKING,
  Campaign.JSON_PROPERTY_RSS_OPTS,
  Campaign.JSON_PROPERTY_AB_SPLIT_OPTS,
  Campaign.JSON_PROPERTY_SOCIAL_CARD,
  Campaign.JSON_PROPERTY_REPORT_SUMMARY,
  Campaign.JSON_PROPERTY_DELIVERY_STATUS,
  Campaign.JSON_PROPERTY_RESEND_SHORTCUT_ELIGIBILITY,
  Campaign.JSON_PROPERTY_LINKS
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-26T16:39:59.516441+03:00[Europe/Helsinki]", comments = "Generator version: 7.5.0")
public class Campaign {
  public static final String JSON_PROPERTY_ID = "id";
  private String id;

  public static final String JSON_PROPERTY_WEB_ID = "web_id";
  private Integer webId;

  public static final String JSON_PROPERTY_PARENT_CAMPAIGN_ID = "parent_campaign_id";
  private String parentCampaignId;

  /**
   * There are four types of [campaigns](https://mailchimp.com/help/getting-started-with-campaigns/) you can create in Mailchimp. A/B Split campaigns have been deprecated and variate campaigns should be used instead.
   */
  public enum TypeEnum {
    REGULAR("regular"),
    
    PLAINTEXT("plaintext"),
    
    ABSPLIT("absplit"),
    
    RSS("rss"),
    
    VARIATE("variate");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_TYPE = "type";
  private TypeEnum type;

  public static final String JSON_PROPERTY_CREATE_TIME = "create_time";
  private OffsetDateTime createTime;

  public static final String JSON_PROPERTY_ARCHIVE_URL = "archive_url";
  private String archiveUrl;

  public static final String JSON_PROPERTY_LONG_ARCHIVE_URL = "long_archive_url";
  private String longArchiveUrl;

  /**
   * The current status of the campaign.
   */
  public enum StatusEnum {
    SAVE("save"),
    
    PAUSED("paused"),
    
    SCHEDULE("schedule"),
    
    SENDING("sending"),
    
    SENT("sent"),
    
    CANCELED("canceled"),
    
    CANCELING("canceling"),
    
    ARCHIVED("archived");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_STATUS = "status";
  private StatusEnum status;

  public static final String JSON_PROPERTY_EMAILS_SENT = "emails_sent";
  private Integer emailsSent;

  public static final String JSON_PROPERTY_SEND_TIME = "send_time";
  private OffsetDateTime sendTime;

  /**
   * How the campaign&#39;s content is put together.
   */
  public enum ContentTypeEnum {
    TEMPLATE("template"),
    
    HTML("html"),
    
    URL("url"),
    
    MULTICHANNEL("multichannel");

    private String value;

    ContentTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static ContentTypeEnum fromValue(String value) {
      for (ContentTypeEnum b : ContentTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_CONTENT_TYPE = "content_type";
  private ContentTypeEnum contentType;

  public static final String JSON_PROPERTY_NEEDS_BLOCK_REFRESH = "needs_block_refresh";
  private Boolean needsBlockRefresh;

  public static final String JSON_PROPERTY_RESENDABLE = "resendable";
  private Boolean resendable;

  public static final String JSON_PROPERTY_RECIPIENTS = "recipients";
  private List3 recipients;

  public static final String JSON_PROPERTY_SETTINGS = "settings";
  private CampaignSettings2 settings;

  public static final String JSON_PROPERTY_VARIATE_SETTINGS = "variate_settings";
  private ABTestOptions variateSettings;

  public static final String JSON_PROPERTY_TRACKING = "tracking";
  private CampaignTrackingOptions1 tracking;

  public static final String JSON_PROPERTY_RSS_OPTS = "rss_opts";
  private RSSOptions rssOpts;

  public static final String JSON_PROPERTY_AB_SPLIT_OPTS = "ab_split_opts";
  private ABTestingOptions abSplitOpts;

  public static final String JSON_PROPERTY_SOCIAL_CARD = "social_card";
  private CampaignSocialCard socialCard;

  public static final String JSON_PROPERTY_REPORT_SUMMARY = "report_summary";
  private CampaignReportSummary2 reportSummary;

  public static final String JSON_PROPERTY_DELIVERY_STATUS = "delivery_status";
  private CampaignDeliveryStatus deliveryStatus;

  public static final String JSON_PROPERTY_RESEND_SHORTCUT_ELIGIBILITY = "resend_shortcut_eligibility";
  private ResendShortcutEligibility resendShortcutEligibility;

  public static final String JSON_PROPERTY_LINKS = "_links";
  private List<ResourceLink> links = new ArrayList<>();

  public Campaign() {
  }

  @JsonCreator
  public Campaign(
    @JsonProperty(JSON_PROPERTY_ID) String id, 
    @JsonProperty(JSON_PROPERTY_WEB_ID) Integer webId, 
    @JsonProperty(JSON_PROPERTY_PARENT_CAMPAIGN_ID) String parentCampaignId, 
    @JsonProperty(JSON_PROPERTY_CREATE_TIME) OffsetDateTime createTime, 
    @JsonProperty(JSON_PROPERTY_ARCHIVE_URL) String archiveUrl, 
    @JsonProperty(JSON_PROPERTY_LONG_ARCHIVE_URL) String longArchiveUrl, 
    @JsonProperty(JSON_PROPERTY_STATUS) StatusEnum status, 
    @JsonProperty(JSON_PROPERTY_EMAILS_SENT) Integer emailsSent, 
    @JsonProperty(JSON_PROPERTY_SEND_TIME) OffsetDateTime sendTime, 
    @JsonProperty(JSON_PROPERTY_NEEDS_BLOCK_REFRESH) Boolean needsBlockRefresh, 
    @JsonProperty(JSON_PROPERTY_RESENDABLE) Boolean resendable, 
    @JsonProperty(JSON_PROPERTY_LINKS) List<ResourceLink> links
  ) {
    this();
    this.id = id;
    this.webId = webId;
    this.parentCampaignId = parentCampaignId;
    this.createTime = createTime;
    this.archiveUrl = archiveUrl;
    this.longArchiveUrl = longArchiveUrl;
    this.status = status;
    this.emailsSent = emailsSent;
    this.sendTime = sendTime;
    this.needsBlockRefresh = needsBlockRefresh;
    this.resendable = resendable;
    this.links = links;
  }

   /**
   * A string that uniquely identifies this campaign.
   * @return id
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getId() {
    return id;
  }




   /**
   * The ID used in the Mailchimp web application. View this campaign in your Mailchimp account at &#x60;https://{dc}.admin.mailchimp.com/campaigns/show/?id&#x3D;{web_id}&#x60;.
   * @return webId
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_WEB_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getWebId() {
    return webId;
  }




   /**
   * If this campaign is the child of another campaign, this identifies the parent campaign. For Example, for RSS or Automation children.
   * @return parentCampaignId
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PARENT_CAMPAIGN_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getParentCampaignId() {
    return parentCampaignId;
  }




  public Campaign type(TypeEnum type) {
    
    this.type = type;
    return this;
  }

   /**
   * There are four types of [campaigns](https://mailchimp.com/help/getting-started-with-campaigns/) you can create in Mailchimp. A/B Split campaigns have been deprecated and variate campaigns should be used instead.
   * @return type
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public TypeEnum getType() {
    return type;
  }


  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setType(TypeEnum type) {
    this.type = type;
  }


   /**
   * The date and time the campaign was created in ISO 8601 format.
   * @return createTime
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CREATE_TIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OffsetDateTime getCreateTime() {
    return createTime;
  }




   /**
   * The link to the campaign&#39;s archive version in ISO 8601 format.
   * @return archiveUrl
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ARCHIVE_URL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getArchiveUrl() {
    return archiveUrl;
  }




   /**
   * The original link to the campaign&#39;s archive version.
   * @return longArchiveUrl
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LONG_ARCHIVE_URL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getLongArchiveUrl() {
    return longArchiveUrl;
  }




   /**
   * The current status of the campaign.
   * @return status
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_STATUS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public StatusEnum getStatus() {
    return status;
  }




   /**
   * The total number of emails sent for this campaign.
   * @return emailsSent
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_EMAILS_SENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getEmailsSent() {
    return emailsSent;
  }




   /**
   * The date and time a campaign was sent.
   * @return sendTime
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SEND_TIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OffsetDateTime getSendTime() {
    return sendTime;
  }




  public Campaign contentType(ContentTypeEnum contentType) {
    
    this.contentType = contentType;
    return this;
  }

   /**
   * How the campaign&#39;s content is put together.
   * @return contentType
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CONTENT_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ContentTypeEnum getContentType() {
    return contentType;
  }


  @JsonProperty(JSON_PROPERTY_CONTENT_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setContentType(ContentTypeEnum contentType) {
    this.contentType = contentType;
  }


   /**
   * Determines if the campaign needs its blocks refreshed by opening the web-based campaign editor. Deprecated and will always return false.
   * @return needsBlockRefresh
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NEEDS_BLOCK_REFRESH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getNeedsBlockRefresh() {
    return needsBlockRefresh;
  }




   /**
   * Determines if the campaign qualifies to be resent to non-openers.
   * @return resendable
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_RESENDABLE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getResendable() {
    return resendable;
  }




  public Campaign recipients(List3 recipients) {
    
    this.recipients = recipients;
    return this;
  }

   /**
   * Get recipients
   * @return recipients
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_RECIPIENTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List3 getRecipients() {
    return recipients;
  }


  @JsonProperty(JSON_PROPERTY_RECIPIENTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRecipients(List3 recipients) {
    this.recipients = recipients;
  }


  public Campaign settings(CampaignSettings2 settings) {
    
    this.settings = settings;
    return this;
  }

   /**
   * Get settings
   * @return settings
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SETTINGS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public CampaignSettings2 getSettings() {
    return settings;
  }


  @JsonProperty(JSON_PROPERTY_SETTINGS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSettings(CampaignSettings2 settings) {
    this.settings = settings;
  }


  public Campaign variateSettings(ABTestOptions variateSettings) {
    
    this.variateSettings = variateSettings;
    return this;
  }

   /**
   * Get variateSettings
   * @return variateSettings
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_VARIATE_SETTINGS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ABTestOptions getVariateSettings() {
    return variateSettings;
  }


  @JsonProperty(JSON_PROPERTY_VARIATE_SETTINGS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setVariateSettings(ABTestOptions variateSettings) {
    this.variateSettings = variateSettings;
  }


  public Campaign tracking(CampaignTrackingOptions1 tracking) {
    
    this.tracking = tracking;
    return this;
  }

   /**
   * Get tracking
   * @return tracking
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TRACKING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public CampaignTrackingOptions1 getTracking() {
    return tracking;
  }


  @JsonProperty(JSON_PROPERTY_TRACKING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTracking(CampaignTrackingOptions1 tracking) {
    this.tracking = tracking;
  }


  public Campaign rssOpts(RSSOptions rssOpts) {
    
    this.rssOpts = rssOpts;
    return this;
  }

   /**
   * Get rssOpts
   * @return rssOpts
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_RSS_OPTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public RSSOptions getRssOpts() {
    return rssOpts;
  }


  @JsonProperty(JSON_PROPERTY_RSS_OPTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRssOpts(RSSOptions rssOpts) {
    this.rssOpts = rssOpts;
  }


  public Campaign abSplitOpts(ABTestingOptions abSplitOpts) {
    
    this.abSplitOpts = abSplitOpts;
    return this;
  }

   /**
   * Get abSplitOpts
   * @return abSplitOpts
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_AB_SPLIT_OPTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ABTestingOptions getAbSplitOpts() {
    return abSplitOpts;
  }


  @JsonProperty(JSON_PROPERTY_AB_SPLIT_OPTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAbSplitOpts(ABTestingOptions abSplitOpts) {
    this.abSplitOpts = abSplitOpts;
  }


  public Campaign socialCard(CampaignSocialCard socialCard) {
    
    this.socialCard = socialCard;
    return this;
  }

   /**
   * Get socialCard
   * @return socialCard
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SOCIAL_CARD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public CampaignSocialCard getSocialCard() {
    return socialCard;
  }


  @JsonProperty(JSON_PROPERTY_SOCIAL_CARD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSocialCard(CampaignSocialCard socialCard) {
    this.socialCard = socialCard;
  }


  public Campaign reportSummary(CampaignReportSummary2 reportSummary) {
    
    this.reportSummary = reportSummary;
    return this;
  }

   /**
   * Get reportSummary
   * @return reportSummary
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_REPORT_SUMMARY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public CampaignReportSummary2 getReportSummary() {
    return reportSummary;
  }


  @JsonProperty(JSON_PROPERTY_REPORT_SUMMARY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setReportSummary(CampaignReportSummary2 reportSummary) {
    this.reportSummary = reportSummary;
  }


  public Campaign deliveryStatus(CampaignDeliveryStatus deliveryStatus) {
    
    this.deliveryStatus = deliveryStatus;
    return this;
  }

   /**
   * Get deliveryStatus
   * @return deliveryStatus
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DELIVERY_STATUS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public CampaignDeliveryStatus getDeliveryStatus() {
    return deliveryStatus;
  }


  @JsonProperty(JSON_PROPERTY_DELIVERY_STATUS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDeliveryStatus(CampaignDeliveryStatus deliveryStatus) {
    this.deliveryStatus = deliveryStatus;
  }


  public Campaign resendShortcutEligibility(ResendShortcutEligibility resendShortcutEligibility) {
    
    this.resendShortcutEligibility = resendShortcutEligibility;
    return this;
  }

   /**
   * Get resendShortcutEligibility
   * @return resendShortcutEligibility
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_RESEND_SHORTCUT_ELIGIBILITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ResendShortcutEligibility getResendShortcutEligibility() {
    return resendShortcutEligibility;
  }


  @JsonProperty(JSON_PROPERTY_RESEND_SHORTCUT_ELIGIBILITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setResendShortcutEligibility(ResendShortcutEligibility resendShortcutEligibility) {
    this.resendShortcutEligibility = resendShortcutEligibility;
  }


   /**
   * A list of link types and descriptions for the API schema documents.
   * @return links
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LINKS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<ResourceLink> getLinks() {
    return links;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Campaign campaign = (Campaign) o;
    return Objects.equals(this.id, campaign.id) &&
        Objects.equals(this.webId, campaign.webId) &&
        Objects.equals(this.parentCampaignId, campaign.parentCampaignId) &&
        Objects.equals(this.type, campaign.type) &&
        Objects.equals(this.createTime, campaign.createTime) &&
        Objects.equals(this.archiveUrl, campaign.archiveUrl) &&
        Objects.equals(this.longArchiveUrl, campaign.longArchiveUrl) &&
        Objects.equals(this.status, campaign.status) &&
        Objects.equals(this.emailsSent, campaign.emailsSent) &&
        Objects.equals(this.sendTime, campaign.sendTime) &&
        Objects.equals(this.contentType, campaign.contentType) &&
        Objects.equals(this.needsBlockRefresh, campaign.needsBlockRefresh) &&
        Objects.equals(this.resendable, campaign.resendable) &&
        Objects.equals(this.recipients, campaign.recipients) &&
        Objects.equals(this.settings, campaign.settings) &&
        Objects.equals(this.variateSettings, campaign.variateSettings) &&
        Objects.equals(this.tracking, campaign.tracking) &&
        Objects.equals(this.rssOpts, campaign.rssOpts) &&
        Objects.equals(this.abSplitOpts, campaign.abSplitOpts) &&
        Objects.equals(this.socialCard, campaign.socialCard) &&
        Objects.equals(this.reportSummary, campaign.reportSummary) &&
        Objects.equals(this.deliveryStatus, campaign.deliveryStatus) &&
        Objects.equals(this.resendShortcutEligibility, campaign.resendShortcutEligibility) &&
        Objects.equals(this.links, campaign.links);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, webId, parentCampaignId, type, createTime, archiveUrl, longArchiveUrl, status, emailsSent, sendTime, contentType, needsBlockRefresh, resendable, recipients, settings, variateSettings, tracking, rssOpts, abSplitOpts, socialCard, reportSummary, deliveryStatus, resendShortcutEligibility, links);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Campaign {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    webId: ").append(toIndentedString(webId)).append("\n");
    sb.append("    parentCampaignId: ").append(toIndentedString(parentCampaignId)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    archiveUrl: ").append(toIndentedString(archiveUrl)).append("\n");
    sb.append("    longArchiveUrl: ").append(toIndentedString(longArchiveUrl)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    emailsSent: ").append(toIndentedString(emailsSent)).append("\n");
    sb.append("    sendTime: ").append(toIndentedString(sendTime)).append("\n");
    sb.append("    contentType: ").append(toIndentedString(contentType)).append("\n");
    sb.append("    needsBlockRefresh: ").append(toIndentedString(needsBlockRefresh)).append("\n");
    sb.append("    resendable: ").append(toIndentedString(resendable)).append("\n");
    sb.append("    recipients: ").append(toIndentedString(recipients)).append("\n");
    sb.append("    settings: ").append(toIndentedString(settings)).append("\n");
    sb.append("    variateSettings: ").append(toIndentedString(variateSettings)).append("\n");
    sb.append("    tracking: ").append(toIndentedString(tracking)).append("\n");
    sb.append("    rssOpts: ").append(toIndentedString(rssOpts)).append("\n");
    sb.append("    abSplitOpts: ").append(toIndentedString(abSplitOpts)).append("\n");
    sb.append("    socialCard: ").append(toIndentedString(socialCard)).append("\n");
    sb.append("    reportSummary: ").append(toIndentedString(reportSummary)).append("\n");
    sb.append("    deliveryStatus: ").append(toIndentedString(deliveryStatus)).append("\n");
    sb.append("    resendShortcutEligibility: ").append(toIndentedString(resendShortcutEligibility)).append("\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

