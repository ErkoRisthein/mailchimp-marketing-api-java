/*
 * Mailchimp Marketing API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0.55
 * Contact: apihelp@mailchimp.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.erkoristhein.mailchimp.marketing.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * A single question and the response to that question.
 */
@JsonPropertyOrder({
  Response.JSON_PROPERTY_QUESTION_ID,
  Response.JSON_PROPERTY_QUESTION_TYPE,
  Response.JSON_PROPERTY_QUERY,
  Response.JSON_PROPERTY_ANSWER
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-26T16:39:59.516441+03:00[Europe/Helsinki]", comments = "Generator version: 7.5.0")
public class Response {
  public static final String JSON_PROPERTY_QUESTION_ID = "question_id";
  private String questionId;

  /**
   * The type of question this is.
   */
  public enum QuestionTypeEnum {
    PICKONE("pickOne"),
    
    PICKMANY("pickMany"),
    
    RANGE("range"),
    
    TEXT("text"),
    
    EMAIL("email");

    private String value;

    QuestionTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static QuestionTypeEnum fromValue(String value) {
      for (QuestionTypeEnum b : QuestionTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_QUESTION_TYPE = "question_type";
  private QuestionTypeEnum questionType;

  public static final String JSON_PROPERTY_QUERY = "query";
  private String query;

  public static final String JSON_PROPERTY_ANSWER = "answer";
  private String answer;

  public Response() {
  }

  public Response questionId(String questionId) {
    
    this.questionId = questionId;
    return this;
  }

   /**
   * The unique ID for this question.
   * @return questionId
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_QUESTION_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getQuestionId() {
    return questionId;
  }


  @JsonProperty(JSON_PROPERTY_QUESTION_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setQuestionId(String questionId) {
    this.questionId = questionId;
  }


  public Response questionType(QuestionTypeEnum questionType) {
    
    this.questionType = questionType;
    return this;
  }

   /**
   * The type of question this is.
   * @return questionType
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_QUESTION_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public QuestionTypeEnum getQuestionType() {
    return questionType;
  }


  @JsonProperty(JSON_PROPERTY_QUESTION_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setQuestionType(QuestionTypeEnum questionType) {
    this.questionType = questionType;
  }


  public Response query(String query) {
    
    this.query = query;
    return this;
  }

   /**
   * The survey question.
   * @return query
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_QUERY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getQuery() {
    return query;
  }


  @JsonProperty(JSON_PROPERTY_QUERY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setQuery(String query) {
    this.query = query;
  }


  public Response answer(String answer) {
    
    this.answer = answer;
    return this;
  }

   /**
   * The answer to this survey question.
   * @return answer
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ANSWER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getAnswer() {
    return answer;
  }


  @JsonProperty(JSON_PROPERTY_ANSWER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAnswer(String answer) {
    this.answer = answer;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Response response = (Response) o;
    return Objects.equals(this.questionId, response.questionId) &&
        Objects.equals(this.questionType, response.questionType) &&
        Objects.equals(this.query, response.query) &&
        Objects.equals(this.answer, response.answer);
  }

  @Override
  public int hashCode() {
    return Objects.hash(questionId, questionType, query, answer);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Response {\n");
    sb.append("    questionId: ").append(toIndentedString(questionId)).append("\n");
    sb.append("    questionType: ").append(toIndentedString(questionType)).append("\n");
    sb.append("    query: ").append(toIndentedString(query)).append("\n");
    sb.append("    answer: ").append(toIndentedString(answer)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

