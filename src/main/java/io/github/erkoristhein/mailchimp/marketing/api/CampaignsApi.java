package io.github.erkoristhein.mailchimp.marketing.api;

import io.github.erkoristhein.mailchimp.marketing.ApiClient;

import io.github.erkoristhein.mailchimp.marketing.model.Campaign;
import io.github.erkoristhein.mailchimp.marketing.model.Campaign1;
import io.github.erkoristhein.mailchimp.marketing.model.Campaign2;
import io.github.erkoristhein.mailchimp.marketing.model.Campaign3;
import io.github.erkoristhein.mailchimp.marketing.model.CampaignContent;
import io.github.erkoristhein.mailchimp.marketing.model.CampaignContent1;
import io.github.erkoristhein.mailchimp.marketing.model.CampaignFeedback1;
import io.github.erkoristhein.mailchimp.marketing.model.CampaignFeedback2;
import io.github.erkoristhein.mailchimp.marketing.model.CampaignFeedback3;
import io.github.erkoristhein.mailchimp.marketing.model.CampaignReports;
import io.github.erkoristhein.mailchimp.marketing.model.GetCampaigns200Response;
import java.time.OffsetDateTime;
import io.github.erkoristhein.mailchimp.marketing.model.PostCampaignsIdActionsScheduleRequest;
import io.github.erkoristhein.mailchimp.marketing.model.PostCampaignsIdActionsTestRequest;
import io.github.erkoristhein.mailchimp.marketing.model.ProblemDetailDocument;
import io.github.erkoristhein.mailchimp.marketing.model.SendChecklist;

import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.util.LinkedMultiValueMap;
import org.springframework.util.MultiValueMap;
import org.springframework.web.client.RestClientException;
import org.springframework.web.client.HttpClientErrorException;
import org.springframework.core.ParameterizedTypeReference;
import org.springframework.core.io.FileSystemResource;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-02-03T13:08:30.305646+02:00[Europe/Tallinn]")
public class CampaignsApi {
    private ApiClient apiClient;

    public CampaignsApi() {
        this(new ApiClient());
    }

    public CampaignsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Delete campaign
     * Remove a campaign from your Mailchimp account.
     * <p><b>204</b> - Empty Response
     * <p><b>0</b> - An error generated by the Mailchimp API.
     * @param campaignId The unique id for the campaign. (required)
     * @throws RestClientException if an error occurs while attempting to invoke the API
     */
    public void deleteCampaignsId(String campaignId) throws RestClientException {
        deleteCampaignsIdWithHttpInfo(campaignId);
    }

    /**
     * Delete campaign
     * Remove a campaign from your Mailchimp account.
     * <p><b>204</b> - Empty Response
     * <p><b>0</b> - An error generated by the Mailchimp API.
     * @param campaignId The unique id for the campaign. (required)
     * @return ResponseEntity&lt;Void&gt;
     * @throws RestClientException if an error occurs while attempting to invoke the API
     */
    public ResponseEntity<Void> deleteCampaignsIdWithHttpInfo(String campaignId) throws RestClientException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new HttpClientErrorException(HttpStatus.BAD_REQUEST, "Missing the required parameter 'campaignId' when calling deleteCampaignsId");
        }
        
        // create path and map variables
        final Map<String, Object> uriVariables = new HashMap<String, Object>();
        uriVariables.put("campaign_id", campaignId);

        final MultiValueMap<String, String> localVarQueryParams = new LinkedMultiValueMap<String, String>();
        final HttpHeaders localVarHeaderParams = new HttpHeaders();
        final MultiValueMap<String, String> localVarCookieParams = new LinkedMultiValueMap<String, String>();
        final MultiValueMap<String, Object> localVarFormParams = new LinkedMultiValueMap<String, Object>();

        final String[] localVarAccepts = { 
            "application/json", "application/problem+json"
         };
        final List<MediaType> localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        final String[] localVarContentTypes = {  };
        final MediaType localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

        String[] localVarAuthNames = new String[] { "basicAuth" };

        ParameterizedTypeReference<Void> localReturnType = new ParameterizedTypeReference<Void>() {};
        return apiClient.invokeAPI("/campaigns/{campaign_id}", HttpMethod.DELETE, uriVariables, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localReturnType);
    }
    /**
     * Delete campaign feedback message
     * Remove a specific feedback message for a campaign.
     * <p><b>204</b> - Empty Response
     * <p><b>0</b> - An error generated by the Mailchimp API.
     * @param campaignId The unique id for the campaign. (required)
     * @param feedbackId The unique id for the feedback message. (required)
     * @throws RestClientException if an error occurs while attempting to invoke the API
     */
    public void deleteCampaignsIdFeedbackId(String campaignId, String feedbackId) throws RestClientException {
        deleteCampaignsIdFeedbackIdWithHttpInfo(campaignId, feedbackId);
    }

    /**
     * Delete campaign feedback message
     * Remove a specific feedback message for a campaign.
     * <p><b>204</b> - Empty Response
     * <p><b>0</b> - An error generated by the Mailchimp API.
     * @param campaignId The unique id for the campaign. (required)
     * @param feedbackId The unique id for the feedback message. (required)
     * @return ResponseEntity&lt;Void&gt;
     * @throws RestClientException if an error occurs while attempting to invoke the API
     */
    public ResponseEntity<Void> deleteCampaignsIdFeedbackIdWithHttpInfo(String campaignId, String feedbackId) throws RestClientException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new HttpClientErrorException(HttpStatus.BAD_REQUEST, "Missing the required parameter 'campaignId' when calling deleteCampaignsIdFeedbackId");
        }
        
        // verify the required parameter 'feedbackId' is set
        if (feedbackId == null) {
            throw new HttpClientErrorException(HttpStatus.BAD_REQUEST, "Missing the required parameter 'feedbackId' when calling deleteCampaignsIdFeedbackId");
        }
        
        // create path and map variables
        final Map<String, Object> uriVariables = new HashMap<String, Object>();
        uriVariables.put("campaign_id", campaignId);
        uriVariables.put("feedback_id", feedbackId);

        final MultiValueMap<String, String> localVarQueryParams = new LinkedMultiValueMap<String, String>();
        final HttpHeaders localVarHeaderParams = new HttpHeaders();
        final MultiValueMap<String, String> localVarCookieParams = new LinkedMultiValueMap<String, String>();
        final MultiValueMap<String, Object> localVarFormParams = new LinkedMultiValueMap<String, Object>();

        final String[] localVarAccepts = { 
            "application/json", "application/problem+json"
         };
        final List<MediaType> localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        final String[] localVarContentTypes = {  };
        final MediaType localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

        String[] localVarAuthNames = new String[] { "basicAuth" };

        ParameterizedTypeReference<Void> localReturnType = new ParameterizedTypeReference<Void>() {};
        return apiClient.invokeAPI("/campaigns/{campaign_id}/feedback/{feedback_id}", HttpMethod.DELETE, uriVariables, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localReturnType);
    }
    /**
     * List campaigns
     * Get all campaigns in an account.
     * <p><b>200</b> - 
     * <p><b>0</b> - An error generated by the Mailchimp API.
     * @param fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation. (optional)
     * @param excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation. (optional)
     * @param count The number of records to return. Default value is 10. Maximum value is 1000 (optional, default to 10)
     * @param offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (optional, default to 0)
     * @param type The campaign type. (optional)
     * @param status The status of the campaign. (optional)
     * @param beforeSendTime Restrict the response to campaigns sent before the set time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00. (optional)
     * @param sinceSendTime Restrict the response to campaigns sent after the set time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00. (optional)
     * @param beforeCreateTime Restrict the response to campaigns created before the set time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00. (optional)
     * @param sinceCreateTime Restrict the response to campaigns created after the set time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00. (optional)
     * @param listId The unique id for the list. (optional)
     * @param folderId The unique folder id. (optional)
     * @param memberId Retrieve campaigns sent to a particular list member. Member ID is The MD5 hash of the lowercase version of the list member’s email address. (optional)
     * @param sortField Returns files sorted by the specified field. (optional)
     * @param sortDir Determines the order direction for sorted results. (optional)
     * @return GetCampaigns200Response
     * @throws RestClientException if an error occurs while attempting to invoke the API
     */
    public GetCampaigns200Response getCampaigns(List<String> fields, List<String> excludeFields, Integer count, Integer offset, String type, String status, OffsetDateTime beforeSendTime, OffsetDateTime sinceSendTime, OffsetDateTime beforeCreateTime, OffsetDateTime sinceCreateTime, String listId, String folderId, String memberId, String sortField, String sortDir) throws RestClientException {
        return getCampaignsWithHttpInfo(fields, excludeFields, count, offset, type, status, beforeSendTime, sinceSendTime, beforeCreateTime, sinceCreateTime, listId, folderId, memberId, sortField, sortDir).getBody();
    }

    /**
     * List campaigns
     * Get all campaigns in an account.
     * <p><b>200</b> - 
     * <p><b>0</b> - An error generated by the Mailchimp API.
     * @param fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation. (optional)
     * @param excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation. (optional)
     * @param count The number of records to return. Default value is 10. Maximum value is 1000 (optional, default to 10)
     * @param offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (optional, default to 0)
     * @param type The campaign type. (optional)
     * @param status The status of the campaign. (optional)
     * @param beforeSendTime Restrict the response to campaigns sent before the set time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00. (optional)
     * @param sinceSendTime Restrict the response to campaigns sent after the set time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00. (optional)
     * @param beforeCreateTime Restrict the response to campaigns created before the set time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00. (optional)
     * @param sinceCreateTime Restrict the response to campaigns created after the set time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00. (optional)
     * @param listId The unique id for the list. (optional)
     * @param folderId The unique folder id. (optional)
     * @param memberId Retrieve campaigns sent to a particular list member. Member ID is The MD5 hash of the lowercase version of the list member’s email address. (optional)
     * @param sortField Returns files sorted by the specified field. (optional)
     * @param sortDir Determines the order direction for sorted results. (optional)
     * @return ResponseEntity&lt;GetCampaigns200Response&gt;
     * @throws RestClientException if an error occurs while attempting to invoke the API
     */
    public ResponseEntity<GetCampaigns200Response> getCampaignsWithHttpInfo(List<String> fields, List<String> excludeFields, Integer count, Integer offset, String type, String status, OffsetDateTime beforeSendTime, OffsetDateTime sinceSendTime, OffsetDateTime beforeCreateTime, OffsetDateTime sinceCreateTime, String listId, String folderId, String memberId, String sortField, String sortDir) throws RestClientException {
        Object localVarPostBody = null;
        

        final MultiValueMap<String, String> localVarQueryParams = new LinkedMultiValueMap<String, String>();
        final HttpHeaders localVarHeaderParams = new HttpHeaders();
        final MultiValueMap<String, String> localVarCookieParams = new LinkedMultiValueMap<String, String>();
        final MultiValueMap<String, Object> localVarFormParams = new LinkedMultiValueMap<String, Object>();

        localVarQueryParams.putAll(apiClient.parameterToMultiValueMap(ApiClient.CollectionFormat.valueOf("csv".toUpperCase(Locale.ROOT)), "fields", fields));
        localVarQueryParams.putAll(apiClient.parameterToMultiValueMap(ApiClient.CollectionFormat.valueOf("csv".toUpperCase(Locale.ROOT)), "exclude_fields", excludeFields));
        localVarQueryParams.putAll(apiClient.parameterToMultiValueMap(null, "count", count));
        localVarQueryParams.putAll(apiClient.parameterToMultiValueMap(null, "offset", offset));
        localVarQueryParams.putAll(apiClient.parameterToMultiValueMap(null, "type", type));
        localVarQueryParams.putAll(apiClient.parameterToMultiValueMap(null, "status", status));
        localVarQueryParams.putAll(apiClient.parameterToMultiValueMap(null, "before_send_time", beforeSendTime));
        localVarQueryParams.putAll(apiClient.parameterToMultiValueMap(null, "since_send_time", sinceSendTime));
        localVarQueryParams.putAll(apiClient.parameterToMultiValueMap(null, "before_create_time", beforeCreateTime));
        localVarQueryParams.putAll(apiClient.parameterToMultiValueMap(null, "since_create_time", sinceCreateTime));
        localVarQueryParams.putAll(apiClient.parameterToMultiValueMap(null, "list_id", listId));
        localVarQueryParams.putAll(apiClient.parameterToMultiValueMap(null, "folder_id", folderId));
        localVarQueryParams.putAll(apiClient.parameterToMultiValueMap(null, "member_id", memberId));
        localVarQueryParams.putAll(apiClient.parameterToMultiValueMap(null, "sort_field", sortField));
        localVarQueryParams.putAll(apiClient.parameterToMultiValueMap(null, "sort_dir", sortDir));


        final String[] localVarAccepts = { 
            "application/json", "application/problem+json"
         };
        final List<MediaType> localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        final String[] localVarContentTypes = {  };
        final MediaType localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

        String[] localVarAuthNames = new String[] { "basicAuth" };

        ParameterizedTypeReference<GetCampaigns200Response> localReturnType = new ParameterizedTypeReference<GetCampaigns200Response>() {};
        return apiClient.invokeAPI("/campaigns", HttpMethod.GET, Collections.<String, Object>emptyMap(), localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localReturnType);
    }
    /**
     * Get campaign info
     * Get information about a specific campaign.
     * <p><b>200</b> - 
     * <p><b>0</b> - An error generated by the Mailchimp API.
     * @param campaignId The unique id for the campaign. (required)
     * @param fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation. (optional)
     * @param excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation. (optional)
     * @return Campaign
     * @throws RestClientException if an error occurs while attempting to invoke the API
     */
    public Campaign getCampaignsId(String campaignId, List<String> fields, List<String> excludeFields) throws RestClientException {
        return getCampaignsIdWithHttpInfo(campaignId, fields, excludeFields).getBody();
    }

    /**
     * Get campaign info
     * Get information about a specific campaign.
     * <p><b>200</b> - 
     * <p><b>0</b> - An error generated by the Mailchimp API.
     * @param campaignId The unique id for the campaign. (required)
     * @param fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation. (optional)
     * @param excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation. (optional)
     * @return ResponseEntity&lt;Campaign&gt;
     * @throws RestClientException if an error occurs while attempting to invoke the API
     */
    public ResponseEntity<Campaign> getCampaignsIdWithHttpInfo(String campaignId, List<String> fields, List<String> excludeFields) throws RestClientException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new HttpClientErrorException(HttpStatus.BAD_REQUEST, "Missing the required parameter 'campaignId' when calling getCampaignsId");
        }
        
        // create path and map variables
        final Map<String, Object> uriVariables = new HashMap<String, Object>();
        uriVariables.put("campaign_id", campaignId);

        final MultiValueMap<String, String> localVarQueryParams = new LinkedMultiValueMap<String, String>();
        final HttpHeaders localVarHeaderParams = new HttpHeaders();
        final MultiValueMap<String, String> localVarCookieParams = new LinkedMultiValueMap<String, String>();
        final MultiValueMap<String, Object> localVarFormParams = new LinkedMultiValueMap<String, Object>();

        localVarQueryParams.putAll(apiClient.parameterToMultiValueMap(ApiClient.CollectionFormat.valueOf("csv".toUpperCase(Locale.ROOT)), "fields", fields));
        localVarQueryParams.putAll(apiClient.parameterToMultiValueMap(ApiClient.CollectionFormat.valueOf("csv".toUpperCase(Locale.ROOT)), "exclude_fields", excludeFields));


        final String[] localVarAccepts = { 
            "application/json", "application/problem+json"
         };
        final List<MediaType> localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        final String[] localVarContentTypes = {  };
        final MediaType localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

        String[] localVarAuthNames = new String[] { "basicAuth" };

        ParameterizedTypeReference<Campaign> localReturnType = new ParameterizedTypeReference<Campaign>() {};
        return apiClient.invokeAPI("/campaigns/{campaign_id}", HttpMethod.GET, uriVariables, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localReturnType);
    }
    /**
     * Get campaign content
     * Get the the HTML and plain-text content for a campaign.
     * <p><b>200</b> - 
     * <p><b>0</b> - An error generated by the Mailchimp API.
     * @param campaignId The unique id for the campaign. (required)
     * @param fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation. (optional)
     * @param excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation. (optional)
     * @return CampaignContent
     * @throws RestClientException if an error occurs while attempting to invoke the API
     */
    public CampaignContent getCampaignsIdContent(String campaignId, List<String> fields, List<String> excludeFields) throws RestClientException {
        return getCampaignsIdContentWithHttpInfo(campaignId, fields, excludeFields).getBody();
    }

    /**
     * Get campaign content
     * Get the the HTML and plain-text content for a campaign.
     * <p><b>200</b> - 
     * <p><b>0</b> - An error generated by the Mailchimp API.
     * @param campaignId The unique id for the campaign. (required)
     * @param fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation. (optional)
     * @param excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation. (optional)
     * @return ResponseEntity&lt;CampaignContent&gt;
     * @throws RestClientException if an error occurs while attempting to invoke the API
     */
    public ResponseEntity<CampaignContent> getCampaignsIdContentWithHttpInfo(String campaignId, List<String> fields, List<String> excludeFields) throws RestClientException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new HttpClientErrorException(HttpStatus.BAD_REQUEST, "Missing the required parameter 'campaignId' when calling getCampaignsIdContent");
        }
        
        // create path and map variables
        final Map<String, Object> uriVariables = new HashMap<String, Object>();
        uriVariables.put("campaign_id", campaignId);

        final MultiValueMap<String, String> localVarQueryParams = new LinkedMultiValueMap<String, String>();
        final HttpHeaders localVarHeaderParams = new HttpHeaders();
        final MultiValueMap<String, String> localVarCookieParams = new LinkedMultiValueMap<String, String>();
        final MultiValueMap<String, Object> localVarFormParams = new LinkedMultiValueMap<String, Object>();

        localVarQueryParams.putAll(apiClient.parameterToMultiValueMap(ApiClient.CollectionFormat.valueOf("csv".toUpperCase(Locale.ROOT)), "fields", fields));
        localVarQueryParams.putAll(apiClient.parameterToMultiValueMap(ApiClient.CollectionFormat.valueOf("csv".toUpperCase(Locale.ROOT)), "exclude_fields", excludeFields));


        final String[] localVarAccepts = { 
            "application/json", "application/problem+json"
         };
        final List<MediaType> localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        final String[] localVarContentTypes = {  };
        final MediaType localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

        String[] localVarAuthNames = new String[] { "basicAuth" };

        ParameterizedTypeReference<CampaignContent> localReturnType = new ParameterizedTypeReference<CampaignContent>() {};
        return apiClient.invokeAPI("/campaigns/{campaign_id}/content", HttpMethod.GET, uriVariables, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localReturnType);
    }
    /**
     * List campaign feedback
     * Get team feedback while you&#39;re working together on a Mailchimp campaign.
     * <p><b>200</b> - 
     * <p><b>0</b> - An error generated by the Mailchimp API.
     * @param campaignId The unique id for the campaign. (required)
     * @param fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation. (optional)
     * @param excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation. (optional)
     * @return CampaignReports
     * @throws RestClientException if an error occurs while attempting to invoke the API
     */
    public CampaignReports getCampaignsIdFeedback(String campaignId, List<String> fields, List<String> excludeFields) throws RestClientException {
        return getCampaignsIdFeedbackWithHttpInfo(campaignId, fields, excludeFields).getBody();
    }

    /**
     * List campaign feedback
     * Get team feedback while you&#39;re working together on a Mailchimp campaign.
     * <p><b>200</b> - 
     * <p><b>0</b> - An error generated by the Mailchimp API.
     * @param campaignId The unique id for the campaign. (required)
     * @param fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation. (optional)
     * @param excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation. (optional)
     * @return ResponseEntity&lt;CampaignReports&gt;
     * @throws RestClientException if an error occurs while attempting to invoke the API
     */
    public ResponseEntity<CampaignReports> getCampaignsIdFeedbackWithHttpInfo(String campaignId, List<String> fields, List<String> excludeFields) throws RestClientException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new HttpClientErrorException(HttpStatus.BAD_REQUEST, "Missing the required parameter 'campaignId' when calling getCampaignsIdFeedback");
        }
        
        // create path and map variables
        final Map<String, Object> uriVariables = new HashMap<String, Object>();
        uriVariables.put("campaign_id", campaignId);

        final MultiValueMap<String, String> localVarQueryParams = new LinkedMultiValueMap<String, String>();
        final HttpHeaders localVarHeaderParams = new HttpHeaders();
        final MultiValueMap<String, String> localVarCookieParams = new LinkedMultiValueMap<String, String>();
        final MultiValueMap<String, Object> localVarFormParams = new LinkedMultiValueMap<String, Object>();

        localVarQueryParams.putAll(apiClient.parameterToMultiValueMap(ApiClient.CollectionFormat.valueOf("csv".toUpperCase(Locale.ROOT)), "fields", fields));
        localVarQueryParams.putAll(apiClient.parameterToMultiValueMap(ApiClient.CollectionFormat.valueOf("csv".toUpperCase(Locale.ROOT)), "exclude_fields", excludeFields));


        final String[] localVarAccepts = { 
            "application/json", "application/problem+json"
         };
        final List<MediaType> localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        final String[] localVarContentTypes = {  };
        final MediaType localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

        String[] localVarAuthNames = new String[] { "basicAuth" };

        ParameterizedTypeReference<CampaignReports> localReturnType = new ParameterizedTypeReference<CampaignReports>() {};
        return apiClient.invokeAPI("/campaigns/{campaign_id}/feedback", HttpMethod.GET, uriVariables, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localReturnType);
    }
    /**
     * Get campaign feedback message
     * Get a specific feedback message from a campaign.
     * <p><b>200</b> - 
     * <p><b>0</b> - An error generated by the Mailchimp API.
     * @param campaignId The unique id for the campaign. (required)
     * @param feedbackId The unique id for the feedback message. (required)
     * @param fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation. (optional)
     * @param excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation. (optional)
     * @return CampaignFeedback2
     * @throws RestClientException if an error occurs while attempting to invoke the API
     */
    public CampaignFeedback2 getCampaignsIdFeedbackId(String campaignId, String feedbackId, List<String> fields, List<String> excludeFields) throws RestClientException {
        return getCampaignsIdFeedbackIdWithHttpInfo(campaignId, feedbackId, fields, excludeFields).getBody();
    }

    /**
     * Get campaign feedback message
     * Get a specific feedback message from a campaign.
     * <p><b>200</b> - 
     * <p><b>0</b> - An error generated by the Mailchimp API.
     * @param campaignId The unique id for the campaign. (required)
     * @param feedbackId The unique id for the feedback message. (required)
     * @param fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation. (optional)
     * @param excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation. (optional)
     * @return ResponseEntity&lt;CampaignFeedback2&gt;
     * @throws RestClientException if an error occurs while attempting to invoke the API
     */
    public ResponseEntity<CampaignFeedback2> getCampaignsIdFeedbackIdWithHttpInfo(String campaignId, String feedbackId, List<String> fields, List<String> excludeFields) throws RestClientException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new HttpClientErrorException(HttpStatus.BAD_REQUEST, "Missing the required parameter 'campaignId' when calling getCampaignsIdFeedbackId");
        }
        
        // verify the required parameter 'feedbackId' is set
        if (feedbackId == null) {
            throw new HttpClientErrorException(HttpStatus.BAD_REQUEST, "Missing the required parameter 'feedbackId' when calling getCampaignsIdFeedbackId");
        }
        
        // create path and map variables
        final Map<String, Object> uriVariables = new HashMap<String, Object>();
        uriVariables.put("campaign_id", campaignId);
        uriVariables.put("feedback_id", feedbackId);

        final MultiValueMap<String, String> localVarQueryParams = new LinkedMultiValueMap<String, String>();
        final HttpHeaders localVarHeaderParams = new HttpHeaders();
        final MultiValueMap<String, String> localVarCookieParams = new LinkedMultiValueMap<String, String>();
        final MultiValueMap<String, Object> localVarFormParams = new LinkedMultiValueMap<String, Object>();

        localVarQueryParams.putAll(apiClient.parameterToMultiValueMap(ApiClient.CollectionFormat.valueOf("csv".toUpperCase(Locale.ROOT)), "fields", fields));
        localVarQueryParams.putAll(apiClient.parameterToMultiValueMap(ApiClient.CollectionFormat.valueOf("csv".toUpperCase(Locale.ROOT)), "exclude_fields", excludeFields));


        final String[] localVarAccepts = { 
            "application/json", "application/problem+json"
         };
        final List<MediaType> localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        final String[] localVarContentTypes = {  };
        final MediaType localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

        String[] localVarAuthNames = new String[] { "basicAuth" };

        ParameterizedTypeReference<CampaignFeedback2> localReturnType = new ParameterizedTypeReference<CampaignFeedback2>() {};
        return apiClient.invokeAPI("/campaigns/{campaign_id}/feedback/{feedback_id}", HttpMethod.GET, uriVariables, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localReturnType);
    }
    /**
     * Get campaign send checklist
     * Review the send checklist for a campaign, and resolve any issues before sending.
     * <p><b>200</b> - 
     * <p><b>0</b> - An error generated by the Mailchimp API.
     * @param campaignId The unique id for the campaign. (required)
     * @param fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation. (optional)
     * @param excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation. (optional)
     * @return SendChecklist
     * @throws RestClientException if an error occurs while attempting to invoke the API
     */
    public SendChecklist getCampaignsIdSendChecklist(String campaignId, List<String> fields, List<String> excludeFields) throws RestClientException {
        return getCampaignsIdSendChecklistWithHttpInfo(campaignId, fields, excludeFields).getBody();
    }

    /**
     * Get campaign send checklist
     * Review the send checklist for a campaign, and resolve any issues before sending.
     * <p><b>200</b> - 
     * <p><b>0</b> - An error generated by the Mailchimp API.
     * @param campaignId The unique id for the campaign. (required)
     * @param fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation. (optional)
     * @param excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation. (optional)
     * @return ResponseEntity&lt;SendChecklist&gt;
     * @throws RestClientException if an error occurs while attempting to invoke the API
     */
    public ResponseEntity<SendChecklist> getCampaignsIdSendChecklistWithHttpInfo(String campaignId, List<String> fields, List<String> excludeFields) throws RestClientException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new HttpClientErrorException(HttpStatus.BAD_REQUEST, "Missing the required parameter 'campaignId' when calling getCampaignsIdSendChecklist");
        }
        
        // create path and map variables
        final Map<String, Object> uriVariables = new HashMap<String, Object>();
        uriVariables.put("campaign_id", campaignId);

        final MultiValueMap<String, String> localVarQueryParams = new LinkedMultiValueMap<String, String>();
        final HttpHeaders localVarHeaderParams = new HttpHeaders();
        final MultiValueMap<String, String> localVarCookieParams = new LinkedMultiValueMap<String, String>();
        final MultiValueMap<String, Object> localVarFormParams = new LinkedMultiValueMap<String, Object>();

        localVarQueryParams.putAll(apiClient.parameterToMultiValueMap(ApiClient.CollectionFormat.valueOf("csv".toUpperCase(Locale.ROOT)), "fields", fields));
        localVarQueryParams.putAll(apiClient.parameterToMultiValueMap(ApiClient.CollectionFormat.valueOf("csv".toUpperCase(Locale.ROOT)), "exclude_fields", excludeFields));


        final String[] localVarAccepts = { 
            "application/json", "application/problem+json"
         };
        final List<MediaType> localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        final String[] localVarContentTypes = {  };
        final MediaType localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

        String[] localVarAuthNames = new String[] { "basicAuth" };

        ParameterizedTypeReference<SendChecklist> localReturnType = new ParameterizedTypeReference<SendChecklist>() {};
        return apiClient.invokeAPI("/campaigns/{campaign_id}/send-checklist", HttpMethod.GET, uriVariables, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localReturnType);
    }
    /**
     * Update campaign settings
     * Update some or all of the settings for a specific campaign.
     * <p><b>200</b> - 
     * <p><b>0</b> - An error generated by the Mailchimp API.
     * @param campaignId The unique id for the campaign. (required)
     * @param body  (required)
     * @return Campaign
     * @throws RestClientException if an error occurs while attempting to invoke the API
     */
    public Campaign patchCampaignsId(String campaignId, Campaign2 body) throws RestClientException {
        return patchCampaignsIdWithHttpInfo(campaignId, body).getBody();
    }

    /**
     * Update campaign settings
     * Update some or all of the settings for a specific campaign.
     * <p><b>200</b> - 
     * <p><b>0</b> - An error generated by the Mailchimp API.
     * @param campaignId The unique id for the campaign. (required)
     * @param body  (required)
     * @return ResponseEntity&lt;Campaign&gt;
     * @throws RestClientException if an error occurs while attempting to invoke the API
     */
    public ResponseEntity<Campaign> patchCampaignsIdWithHttpInfo(String campaignId, Campaign2 body) throws RestClientException {
        Object localVarPostBody = body;
        
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new HttpClientErrorException(HttpStatus.BAD_REQUEST, "Missing the required parameter 'campaignId' when calling patchCampaignsId");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new HttpClientErrorException(HttpStatus.BAD_REQUEST, "Missing the required parameter 'body' when calling patchCampaignsId");
        }
        
        // create path and map variables
        final Map<String, Object> uriVariables = new HashMap<String, Object>();
        uriVariables.put("campaign_id", campaignId);

        final MultiValueMap<String, String> localVarQueryParams = new LinkedMultiValueMap<String, String>();
        final HttpHeaders localVarHeaderParams = new HttpHeaders();
        final MultiValueMap<String, String> localVarCookieParams = new LinkedMultiValueMap<String, String>();
        final MultiValueMap<String, Object> localVarFormParams = new LinkedMultiValueMap<String, Object>();

        final String[] localVarAccepts = { 
            "application/json", "application/problem+json"
         };
        final List<MediaType> localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        final String[] localVarContentTypes = { 
            "application/json"
         };
        final MediaType localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

        String[] localVarAuthNames = new String[] { "basicAuth" };

        ParameterizedTypeReference<Campaign> localReturnType = new ParameterizedTypeReference<Campaign>() {};
        return apiClient.invokeAPI("/campaigns/{campaign_id}", HttpMethod.PATCH, uriVariables, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localReturnType);
    }
    /**
     * Update campaign feedback message
     * Update a specific feedback message for a campaign.
     * <p><b>200</b> - 
     * <p><b>0</b> - An error generated by the Mailchimp API.
     * @param campaignId The unique id for the campaign. (required)
     * @param feedbackId The unique id for the feedback message. (required)
     * @param body  (required)
     * @return CampaignFeedback2
     * @throws RestClientException if an error occurs while attempting to invoke the API
     */
    public CampaignFeedback2 patchCampaignsIdFeedbackId(String campaignId, String feedbackId, CampaignFeedback3 body) throws RestClientException {
        return patchCampaignsIdFeedbackIdWithHttpInfo(campaignId, feedbackId, body).getBody();
    }

    /**
     * Update campaign feedback message
     * Update a specific feedback message for a campaign.
     * <p><b>200</b> - 
     * <p><b>0</b> - An error generated by the Mailchimp API.
     * @param campaignId The unique id for the campaign. (required)
     * @param feedbackId The unique id for the feedback message. (required)
     * @param body  (required)
     * @return ResponseEntity&lt;CampaignFeedback2&gt;
     * @throws RestClientException if an error occurs while attempting to invoke the API
     */
    public ResponseEntity<CampaignFeedback2> patchCampaignsIdFeedbackIdWithHttpInfo(String campaignId, String feedbackId, CampaignFeedback3 body) throws RestClientException {
        Object localVarPostBody = body;
        
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new HttpClientErrorException(HttpStatus.BAD_REQUEST, "Missing the required parameter 'campaignId' when calling patchCampaignsIdFeedbackId");
        }
        
        // verify the required parameter 'feedbackId' is set
        if (feedbackId == null) {
            throw new HttpClientErrorException(HttpStatus.BAD_REQUEST, "Missing the required parameter 'feedbackId' when calling patchCampaignsIdFeedbackId");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new HttpClientErrorException(HttpStatus.BAD_REQUEST, "Missing the required parameter 'body' when calling patchCampaignsIdFeedbackId");
        }
        
        // create path and map variables
        final Map<String, Object> uriVariables = new HashMap<String, Object>();
        uriVariables.put("campaign_id", campaignId);
        uriVariables.put("feedback_id", feedbackId);

        final MultiValueMap<String, String> localVarQueryParams = new LinkedMultiValueMap<String, String>();
        final HttpHeaders localVarHeaderParams = new HttpHeaders();
        final MultiValueMap<String, String> localVarCookieParams = new LinkedMultiValueMap<String, String>();
        final MultiValueMap<String, Object> localVarFormParams = new LinkedMultiValueMap<String, Object>();

        final String[] localVarAccepts = { 
            "application/json", "application/problem+json"
         };
        final List<MediaType> localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        final String[] localVarContentTypes = { 
            "application/json"
         };
        final MediaType localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

        String[] localVarAuthNames = new String[] { "basicAuth" };

        ParameterizedTypeReference<CampaignFeedback2> localReturnType = new ParameterizedTypeReference<CampaignFeedback2>() {};
        return apiClient.invokeAPI("/campaigns/{campaign_id}/feedback/{feedback_id}", HttpMethod.PATCH, uriVariables, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localReturnType);
    }
    /**
     * Add campaign
     * Create a new Mailchimp campaign.
     * <p><b>200</b> - 
     * <p><b>0</b> - An error generated by the Mailchimp API.
     * @param body  (required)
     * @return Campaign
     * @throws RestClientException if an error occurs while attempting to invoke the API
     */
    public Campaign postCampaigns(Campaign1 body) throws RestClientException {
        return postCampaignsWithHttpInfo(body).getBody();
    }

    /**
     * Add campaign
     * Create a new Mailchimp campaign.
     * <p><b>200</b> - 
     * <p><b>0</b> - An error generated by the Mailchimp API.
     * @param body  (required)
     * @return ResponseEntity&lt;Campaign&gt;
     * @throws RestClientException if an error occurs while attempting to invoke the API
     */
    public ResponseEntity<Campaign> postCampaignsWithHttpInfo(Campaign1 body) throws RestClientException {
        Object localVarPostBody = body;
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new HttpClientErrorException(HttpStatus.BAD_REQUEST, "Missing the required parameter 'body' when calling postCampaigns");
        }
        

        final MultiValueMap<String, String> localVarQueryParams = new LinkedMultiValueMap<String, String>();
        final HttpHeaders localVarHeaderParams = new HttpHeaders();
        final MultiValueMap<String, String> localVarCookieParams = new LinkedMultiValueMap<String, String>();
        final MultiValueMap<String, Object> localVarFormParams = new LinkedMultiValueMap<String, Object>();

        final String[] localVarAccepts = { 
            "application/json", "application/problem+json"
         };
        final List<MediaType> localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        final String[] localVarContentTypes = { 
            "application/json"
         };
        final MediaType localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

        String[] localVarAuthNames = new String[] { "basicAuth" };

        ParameterizedTypeReference<Campaign> localReturnType = new ParameterizedTypeReference<Campaign>() {};
        return apiClient.invokeAPI("/campaigns", HttpMethod.POST, Collections.<String, Object>emptyMap(), localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localReturnType);
    }
    /**
     * Cancel campaign
     * Cancel a Regular or Plain-Text Campaign after you send, before all of your recipients receive it. This feature is included with Mailchimp Pro.
     * <p><b>204</b> - Empty Response
     * <p><b>0</b> - An error generated by the Mailchimp API.
     * @param campaignId The unique id for the campaign. (required)
     * @throws RestClientException if an error occurs while attempting to invoke the API
     */
    public void postCampaignsIdActionsCancelSend(String campaignId) throws RestClientException {
        postCampaignsIdActionsCancelSendWithHttpInfo(campaignId);
    }

    /**
     * Cancel campaign
     * Cancel a Regular or Plain-Text Campaign after you send, before all of your recipients receive it. This feature is included with Mailchimp Pro.
     * <p><b>204</b> - Empty Response
     * <p><b>0</b> - An error generated by the Mailchimp API.
     * @param campaignId The unique id for the campaign. (required)
     * @return ResponseEntity&lt;Void&gt;
     * @throws RestClientException if an error occurs while attempting to invoke the API
     */
    public ResponseEntity<Void> postCampaignsIdActionsCancelSendWithHttpInfo(String campaignId) throws RestClientException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new HttpClientErrorException(HttpStatus.BAD_REQUEST, "Missing the required parameter 'campaignId' when calling postCampaignsIdActionsCancelSend");
        }
        
        // create path and map variables
        final Map<String, Object> uriVariables = new HashMap<String, Object>();
        uriVariables.put("campaign_id", campaignId);

        final MultiValueMap<String, String> localVarQueryParams = new LinkedMultiValueMap<String, String>();
        final HttpHeaders localVarHeaderParams = new HttpHeaders();
        final MultiValueMap<String, String> localVarCookieParams = new LinkedMultiValueMap<String, String>();
        final MultiValueMap<String, Object> localVarFormParams = new LinkedMultiValueMap<String, Object>();

        final String[] localVarAccepts = { 
            "application/json", "application/problem+json"
         };
        final List<MediaType> localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        final String[] localVarContentTypes = {  };
        final MediaType localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

        String[] localVarAuthNames = new String[] { "basicAuth" };

        ParameterizedTypeReference<Void> localReturnType = new ParameterizedTypeReference<Void>() {};
        return apiClient.invokeAPI("/campaigns/{campaign_id}/actions/cancel-send", HttpMethod.POST, uriVariables, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localReturnType);
    }
    /**
     * Resend campaign
     * Creates a Resend to Non-Openers version of this campaign. We will also check if this campaign meets the criteria for Resend to Non-Openers campaigns.
     * <p><b>200</b> - 
     * <p><b>0</b> - An error generated by the Mailchimp API.
     * @param campaignId The unique id for the campaign. (required)
     * @return Campaign3
     * @throws RestClientException if an error occurs while attempting to invoke the API
     */
    public Campaign3 postCampaignsIdActionsCreateResend(String campaignId) throws RestClientException {
        return postCampaignsIdActionsCreateResendWithHttpInfo(campaignId).getBody();
    }

    /**
     * Resend campaign
     * Creates a Resend to Non-Openers version of this campaign. We will also check if this campaign meets the criteria for Resend to Non-Openers campaigns.
     * <p><b>200</b> - 
     * <p><b>0</b> - An error generated by the Mailchimp API.
     * @param campaignId The unique id for the campaign. (required)
     * @return ResponseEntity&lt;Campaign3&gt;
     * @throws RestClientException if an error occurs while attempting to invoke the API
     */
    public ResponseEntity<Campaign3> postCampaignsIdActionsCreateResendWithHttpInfo(String campaignId) throws RestClientException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new HttpClientErrorException(HttpStatus.BAD_REQUEST, "Missing the required parameter 'campaignId' when calling postCampaignsIdActionsCreateResend");
        }
        
        // create path and map variables
        final Map<String, Object> uriVariables = new HashMap<String, Object>();
        uriVariables.put("campaign_id", campaignId);

        final MultiValueMap<String, String> localVarQueryParams = new LinkedMultiValueMap<String, String>();
        final HttpHeaders localVarHeaderParams = new HttpHeaders();
        final MultiValueMap<String, String> localVarCookieParams = new LinkedMultiValueMap<String, String>();
        final MultiValueMap<String, Object> localVarFormParams = new LinkedMultiValueMap<String, Object>();

        final String[] localVarAccepts = { 
            "application/json", "application/problem+json"
         };
        final List<MediaType> localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        final String[] localVarContentTypes = {  };
        final MediaType localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

        String[] localVarAuthNames = new String[] { "basicAuth" };

        ParameterizedTypeReference<Campaign3> localReturnType = new ParameterizedTypeReference<Campaign3>() {};
        return apiClient.invokeAPI("/campaigns/{campaign_id}/actions/create-resend", HttpMethod.POST, uriVariables, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localReturnType);
    }
    /**
     * Pause rss campaign
     * Pause an RSS-Driven campaign.
     * <p><b>204</b> - Empty Response
     * <p><b>0</b> - An error generated by the Mailchimp API.
     * @param campaignId The unique id for the campaign. (required)
     * @throws RestClientException if an error occurs while attempting to invoke the API
     */
    public void postCampaignsIdActionsPause(String campaignId) throws RestClientException {
        postCampaignsIdActionsPauseWithHttpInfo(campaignId);
    }

    /**
     * Pause rss campaign
     * Pause an RSS-Driven campaign.
     * <p><b>204</b> - Empty Response
     * <p><b>0</b> - An error generated by the Mailchimp API.
     * @param campaignId The unique id for the campaign. (required)
     * @return ResponseEntity&lt;Void&gt;
     * @throws RestClientException if an error occurs while attempting to invoke the API
     */
    public ResponseEntity<Void> postCampaignsIdActionsPauseWithHttpInfo(String campaignId) throws RestClientException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new HttpClientErrorException(HttpStatus.BAD_REQUEST, "Missing the required parameter 'campaignId' when calling postCampaignsIdActionsPause");
        }
        
        // create path and map variables
        final Map<String, Object> uriVariables = new HashMap<String, Object>();
        uriVariables.put("campaign_id", campaignId);

        final MultiValueMap<String, String> localVarQueryParams = new LinkedMultiValueMap<String, String>();
        final HttpHeaders localVarHeaderParams = new HttpHeaders();
        final MultiValueMap<String, String> localVarCookieParams = new LinkedMultiValueMap<String, String>();
        final MultiValueMap<String, Object> localVarFormParams = new LinkedMultiValueMap<String, Object>();

        final String[] localVarAccepts = { 
            "application/json", "application/problem+json"
         };
        final List<MediaType> localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        final String[] localVarContentTypes = {  };
        final MediaType localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

        String[] localVarAuthNames = new String[] { "basicAuth" };

        ParameterizedTypeReference<Void> localReturnType = new ParameterizedTypeReference<Void>() {};
        return apiClient.invokeAPI("/campaigns/{campaign_id}/actions/pause", HttpMethod.POST, uriVariables, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localReturnType);
    }
    /**
     * Replicate campaign
     * Replicate a campaign in saved or send status.
     * <p><b>200</b> - 
     * <p><b>0</b> - An error generated by the Mailchimp API.
     * @param campaignId The unique id for the campaign. (required)
     * @return Campaign3
     * @throws RestClientException if an error occurs while attempting to invoke the API
     */
    public Campaign3 postCampaignsIdActionsReplicate(String campaignId) throws RestClientException {
        return postCampaignsIdActionsReplicateWithHttpInfo(campaignId).getBody();
    }

    /**
     * Replicate campaign
     * Replicate a campaign in saved or send status.
     * <p><b>200</b> - 
     * <p><b>0</b> - An error generated by the Mailchimp API.
     * @param campaignId The unique id for the campaign. (required)
     * @return ResponseEntity&lt;Campaign3&gt;
     * @throws RestClientException if an error occurs while attempting to invoke the API
     */
    public ResponseEntity<Campaign3> postCampaignsIdActionsReplicateWithHttpInfo(String campaignId) throws RestClientException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new HttpClientErrorException(HttpStatus.BAD_REQUEST, "Missing the required parameter 'campaignId' when calling postCampaignsIdActionsReplicate");
        }
        
        // create path and map variables
        final Map<String, Object> uriVariables = new HashMap<String, Object>();
        uriVariables.put("campaign_id", campaignId);

        final MultiValueMap<String, String> localVarQueryParams = new LinkedMultiValueMap<String, String>();
        final HttpHeaders localVarHeaderParams = new HttpHeaders();
        final MultiValueMap<String, String> localVarCookieParams = new LinkedMultiValueMap<String, String>();
        final MultiValueMap<String, Object> localVarFormParams = new LinkedMultiValueMap<String, Object>();

        final String[] localVarAccepts = { 
            "application/json", "application/problem+json"
         };
        final List<MediaType> localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        final String[] localVarContentTypes = {  };
        final MediaType localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

        String[] localVarAuthNames = new String[] { "basicAuth" };

        ParameterizedTypeReference<Campaign3> localReturnType = new ParameterizedTypeReference<Campaign3>() {};
        return apiClient.invokeAPI("/campaigns/{campaign_id}/actions/replicate", HttpMethod.POST, uriVariables, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localReturnType);
    }
    /**
     * Resume rss campaign
     * Resume an RSS-Driven campaign.
     * <p><b>204</b> - Empty Response
     * <p><b>0</b> - An error generated by the Mailchimp API.
     * @param campaignId The unique id for the campaign. (required)
     * @throws RestClientException if an error occurs while attempting to invoke the API
     */
    public void postCampaignsIdActionsResume(String campaignId) throws RestClientException {
        postCampaignsIdActionsResumeWithHttpInfo(campaignId);
    }

    /**
     * Resume rss campaign
     * Resume an RSS-Driven campaign.
     * <p><b>204</b> - Empty Response
     * <p><b>0</b> - An error generated by the Mailchimp API.
     * @param campaignId The unique id for the campaign. (required)
     * @return ResponseEntity&lt;Void&gt;
     * @throws RestClientException if an error occurs while attempting to invoke the API
     */
    public ResponseEntity<Void> postCampaignsIdActionsResumeWithHttpInfo(String campaignId) throws RestClientException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new HttpClientErrorException(HttpStatus.BAD_REQUEST, "Missing the required parameter 'campaignId' when calling postCampaignsIdActionsResume");
        }
        
        // create path and map variables
        final Map<String, Object> uriVariables = new HashMap<String, Object>();
        uriVariables.put("campaign_id", campaignId);

        final MultiValueMap<String, String> localVarQueryParams = new LinkedMultiValueMap<String, String>();
        final HttpHeaders localVarHeaderParams = new HttpHeaders();
        final MultiValueMap<String, String> localVarCookieParams = new LinkedMultiValueMap<String, String>();
        final MultiValueMap<String, Object> localVarFormParams = new LinkedMultiValueMap<String, Object>();

        final String[] localVarAccepts = { 
            "application/json", "application/problem+json"
         };
        final List<MediaType> localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        final String[] localVarContentTypes = {  };
        final MediaType localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

        String[] localVarAuthNames = new String[] { "basicAuth" };

        ParameterizedTypeReference<Void> localReturnType = new ParameterizedTypeReference<Void>() {};
        return apiClient.invokeAPI("/campaigns/{campaign_id}/actions/resume", HttpMethod.POST, uriVariables, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localReturnType);
    }
    /**
     * Schedule campaign
     * Schedule a campaign for delivery. If you&#39;re using Multivariate Campaigns to test send times or sending RSS Campaigns, use the send action instead.
     * <p><b>204</b> - Empty Response
     * <p><b>0</b> - An error generated by the Mailchimp API.
     * @param campaignId The unique id for the campaign. (required)
     * @param body  (required)
     * @throws RestClientException if an error occurs while attempting to invoke the API
     */
    public void postCampaignsIdActionsSchedule(String campaignId, PostCampaignsIdActionsScheduleRequest body) throws RestClientException {
        postCampaignsIdActionsScheduleWithHttpInfo(campaignId, body);
    }

    /**
     * Schedule campaign
     * Schedule a campaign for delivery. If you&#39;re using Multivariate Campaigns to test send times or sending RSS Campaigns, use the send action instead.
     * <p><b>204</b> - Empty Response
     * <p><b>0</b> - An error generated by the Mailchimp API.
     * @param campaignId The unique id for the campaign. (required)
     * @param body  (required)
     * @return ResponseEntity&lt;Void&gt;
     * @throws RestClientException if an error occurs while attempting to invoke the API
     */
    public ResponseEntity<Void> postCampaignsIdActionsScheduleWithHttpInfo(String campaignId, PostCampaignsIdActionsScheduleRequest body) throws RestClientException {
        Object localVarPostBody = body;
        
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new HttpClientErrorException(HttpStatus.BAD_REQUEST, "Missing the required parameter 'campaignId' when calling postCampaignsIdActionsSchedule");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new HttpClientErrorException(HttpStatus.BAD_REQUEST, "Missing the required parameter 'body' when calling postCampaignsIdActionsSchedule");
        }
        
        // create path and map variables
        final Map<String, Object> uriVariables = new HashMap<String, Object>();
        uriVariables.put("campaign_id", campaignId);

        final MultiValueMap<String, String> localVarQueryParams = new LinkedMultiValueMap<String, String>();
        final HttpHeaders localVarHeaderParams = new HttpHeaders();
        final MultiValueMap<String, String> localVarCookieParams = new LinkedMultiValueMap<String, String>();
        final MultiValueMap<String, Object> localVarFormParams = new LinkedMultiValueMap<String, Object>();

        final String[] localVarAccepts = { 
            "application/json", "application/problem+json"
         };
        final List<MediaType> localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        final String[] localVarContentTypes = { 
            "application/json"
         };
        final MediaType localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

        String[] localVarAuthNames = new String[] { "basicAuth" };

        ParameterizedTypeReference<Void> localReturnType = new ParameterizedTypeReference<Void>() {};
        return apiClient.invokeAPI("/campaigns/{campaign_id}/actions/schedule", HttpMethod.POST, uriVariables, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localReturnType);
    }
    /**
     * Send campaign
     * Send a Mailchimp campaign. For RSS Campaigns, the campaign will send according to its schedule. All other campaigns will send immediately.
     * <p><b>204</b> - Empty Response
     * <p><b>0</b> - An error generated by the Mailchimp API.
     * @param campaignId The unique id for the campaign. (required)
     * @throws RestClientException if an error occurs while attempting to invoke the API
     */
    public void postCampaignsIdActionsSend(String campaignId) throws RestClientException {
        postCampaignsIdActionsSendWithHttpInfo(campaignId);
    }

    /**
     * Send campaign
     * Send a Mailchimp campaign. For RSS Campaigns, the campaign will send according to its schedule. All other campaigns will send immediately.
     * <p><b>204</b> - Empty Response
     * <p><b>0</b> - An error generated by the Mailchimp API.
     * @param campaignId The unique id for the campaign. (required)
     * @return ResponseEntity&lt;Void&gt;
     * @throws RestClientException if an error occurs while attempting to invoke the API
     */
    public ResponseEntity<Void> postCampaignsIdActionsSendWithHttpInfo(String campaignId) throws RestClientException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new HttpClientErrorException(HttpStatus.BAD_REQUEST, "Missing the required parameter 'campaignId' when calling postCampaignsIdActionsSend");
        }
        
        // create path and map variables
        final Map<String, Object> uriVariables = new HashMap<String, Object>();
        uriVariables.put("campaign_id", campaignId);

        final MultiValueMap<String, String> localVarQueryParams = new LinkedMultiValueMap<String, String>();
        final HttpHeaders localVarHeaderParams = new HttpHeaders();
        final MultiValueMap<String, String> localVarCookieParams = new LinkedMultiValueMap<String, String>();
        final MultiValueMap<String, Object> localVarFormParams = new LinkedMultiValueMap<String, Object>();

        final String[] localVarAccepts = { 
            "application/json", "application/problem+json"
         };
        final List<MediaType> localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        final String[] localVarContentTypes = {  };
        final MediaType localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

        String[] localVarAuthNames = new String[] { "basicAuth" };

        ParameterizedTypeReference<Void> localReturnType = new ParameterizedTypeReference<Void>() {};
        return apiClient.invokeAPI("/campaigns/{campaign_id}/actions/send", HttpMethod.POST, uriVariables, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localReturnType);
    }
    /**
     * Send test email
     * Send a test email.
     * <p><b>204</b> - Empty Response
     * <p><b>0</b> - An error generated by the Mailchimp API.
     * @param campaignId The unique id for the campaign. (required)
     * @param body  (required)
     * @throws RestClientException if an error occurs while attempting to invoke the API
     */
    public void postCampaignsIdActionsTest(String campaignId, PostCampaignsIdActionsTestRequest body) throws RestClientException {
        postCampaignsIdActionsTestWithHttpInfo(campaignId, body);
    }

    /**
     * Send test email
     * Send a test email.
     * <p><b>204</b> - Empty Response
     * <p><b>0</b> - An error generated by the Mailchimp API.
     * @param campaignId The unique id for the campaign. (required)
     * @param body  (required)
     * @return ResponseEntity&lt;Void&gt;
     * @throws RestClientException if an error occurs while attempting to invoke the API
     */
    public ResponseEntity<Void> postCampaignsIdActionsTestWithHttpInfo(String campaignId, PostCampaignsIdActionsTestRequest body) throws RestClientException {
        Object localVarPostBody = body;
        
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new HttpClientErrorException(HttpStatus.BAD_REQUEST, "Missing the required parameter 'campaignId' when calling postCampaignsIdActionsTest");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new HttpClientErrorException(HttpStatus.BAD_REQUEST, "Missing the required parameter 'body' when calling postCampaignsIdActionsTest");
        }
        
        // create path and map variables
        final Map<String, Object> uriVariables = new HashMap<String, Object>();
        uriVariables.put("campaign_id", campaignId);

        final MultiValueMap<String, String> localVarQueryParams = new LinkedMultiValueMap<String, String>();
        final HttpHeaders localVarHeaderParams = new HttpHeaders();
        final MultiValueMap<String, String> localVarCookieParams = new LinkedMultiValueMap<String, String>();
        final MultiValueMap<String, Object> localVarFormParams = new LinkedMultiValueMap<String, Object>();

        final String[] localVarAccepts = { 
            "application/json", "application/problem+json"
         };
        final List<MediaType> localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        final String[] localVarContentTypes = { 
            "application/json"
         };
        final MediaType localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

        String[] localVarAuthNames = new String[] { "basicAuth" };

        ParameterizedTypeReference<Void> localReturnType = new ParameterizedTypeReference<Void>() {};
        return apiClient.invokeAPI("/campaigns/{campaign_id}/actions/test", HttpMethod.POST, uriVariables, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localReturnType);
    }
    /**
     * Unschedule campaign
     * Unschedule a scheduled campaign that hasn&#39;t started sending.
     * <p><b>204</b> - Empty Response
     * <p><b>0</b> - An error generated by the Mailchimp API.
     * @param campaignId The unique id for the campaign. (required)
     * @throws RestClientException if an error occurs while attempting to invoke the API
     */
    public void postCampaignsIdActionsUnschedule(String campaignId) throws RestClientException {
        postCampaignsIdActionsUnscheduleWithHttpInfo(campaignId);
    }

    /**
     * Unschedule campaign
     * Unschedule a scheduled campaign that hasn&#39;t started sending.
     * <p><b>204</b> - Empty Response
     * <p><b>0</b> - An error generated by the Mailchimp API.
     * @param campaignId The unique id for the campaign. (required)
     * @return ResponseEntity&lt;Void&gt;
     * @throws RestClientException if an error occurs while attempting to invoke the API
     */
    public ResponseEntity<Void> postCampaignsIdActionsUnscheduleWithHttpInfo(String campaignId) throws RestClientException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new HttpClientErrorException(HttpStatus.BAD_REQUEST, "Missing the required parameter 'campaignId' when calling postCampaignsIdActionsUnschedule");
        }
        
        // create path and map variables
        final Map<String, Object> uriVariables = new HashMap<String, Object>();
        uriVariables.put("campaign_id", campaignId);

        final MultiValueMap<String, String> localVarQueryParams = new LinkedMultiValueMap<String, String>();
        final HttpHeaders localVarHeaderParams = new HttpHeaders();
        final MultiValueMap<String, String> localVarCookieParams = new LinkedMultiValueMap<String, String>();
        final MultiValueMap<String, Object> localVarFormParams = new LinkedMultiValueMap<String, Object>();

        final String[] localVarAccepts = { 
            "application/json", "application/problem+json"
         };
        final List<MediaType> localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        final String[] localVarContentTypes = {  };
        final MediaType localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

        String[] localVarAuthNames = new String[] { "basicAuth" };

        ParameterizedTypeReference<Void> localReturnType = new ParameterizedTypeReference<Void>() {};
        return apiClient.invokeAPI("/campaigns/{campaign_id}/actions/unschedule", HttpMethod.POST, uriVariables, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localReturnType);
    }
    /**
     * Add campaign feedback
     * Add feedback on a specific campaign.
     * <p><b>200</b> - 
     * <p><b>0</b> - An error generated by the Mailchimp API.
     * @param campaignId The unique id for the campaign. (required)
     * @param body  (required)
     * @return CampaignFeedback2
     * @throws RestClientException if an error occurs while attempting to invoke the API
     */
    public CampaignFeedback2 postCampaignsIdFeedback(String campaignId, CampaignFeedback1 body) throws RestClientException {
        return postCampaignsIdFeedbackWithHttpInfo(campaignId, body).getBody();
    }

    /**
     * Add campaign feedback
     * Add feedback on a specific campaign.
     * <p><b>200</b> - 
     * <p><b>0</b> - An error generated by the Mailchimp API.
     * @param campaignId The unique id for the campaign. (required)
     * @param body  (required)
     * @return ResponseEntity&lt;CampaignFeedback2&gt;
     * @throws RestClientException if an error occurs while attempting to invoke the API
     */
    public ResponseEntity<CampaignFeedback2> postCampaignsIdFeedbackWithHttpInfo(String campaignId, CampaignFeedback1 body) throws RestClientException {
        Object localVarPostBody = body;
        
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new HttpClientErrorException(HttpStatus.BAD_REQUEST, "Missing the required parameter 'campaignId' when calling postCampaignsIdFeedback");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new HttpClientErrorException(HttpStatus.BAD_REQUEST, "Missing the required parameter 'body' when calling postCampaignsIdFeedback");
        }
        
        // create path and map variables
        final Map<String, Object> uriVariables = new HashMap<String, Object>();
        uriVariables.put("campaign_id", campaignId);

        final MultiValueMap<String, String> localVarQueryParams = new LinkedMultiValueMap<String, String>();
        final HttpHeaders localVarHeaderParams = new HttpHeaders();
        final MultiValueMap<String, String> localVarCookieParams = new LinkedMultiValueMap<String, String>();
        final MultiValueMap<String, Object> localVarFormParams = new LinkedMultiValueMap<String, Object>();

        final String[] localVarAccepts = { 
            "application/json", "application/problem+json"
         };
        final List<MediaType> localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        final String[] localVarContentTypes = { 
            "application/json"
         };
        final MediaType localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

        String[] localVarAuthNames = new String[] { "basicAuth" };

        ParameterizedTypeReference<CampaignFeedback2> localReturnType = new ParameterizedTypeReference<CampaignFeedback2>() {};
        return apiClient.invokeAPI("/campaigns/{campaign_id}/feedback", HttpMethod.POST, uriVariables, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localReturnType);
    }
    /**
     * Set campaign content
     * Set the content for a campaign.
     * <p><b>200</b> - 
     * <p><b>0</b> - An error generated by the Mailchimp API.
     * @param campaignId The unique id for the campaign. (required)
     * @param body  (required)
     * @return CampaignContent
     * @throws RestClientException if an error occurs while attempting to invoke the API
     */
    public CampaignContent putCampaignsIdContent(String campaignId, CampaignContent1 body) throws RestClientException {
        return putCampaignsIdContentWithHttpInfo(campaignId, body).getBody();
    }

    /**
     * Set campaign content
     * Set the content for a campaign.
     * <p><b>200</b> - 
     * <p><b>0</b> - An error generated by the Mailchimp API.
     * @param campaignId The unique id for the campaign. (required)
     * @param body  (required)
     * @return ResponseEntity&lt;CampaignContent&gt;
     * @throws RestClientException if an error occurs while attempting to invoke the API
     */
    public ResponseEntity<CampaignContent> putCampaignsIdContentWithHttpInfo(String campaignId, CampaignContent1 body) throws RestClientException {
        Object localVarPostBody = body;
        
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new HttpClientErrorException(HttpStatus.BAD_REQUEST, "Missing the required parameter 'campaignId' when calling putCampaignsIdContent");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new HttpClientErrorException(HttpStatus.BAD_REQUEST, "Missing the required parameter 'body' when calling putCampaignsIdContent");
        }
        
        // create path and map variables
        final Map<String, Object> uriVariables = new HashMap<String, Object>();
        uriVariables.put("campaign_id", campaignId);

        final MultiValueMap<String, String> localVarQueryParams = new LinkedMultiValueMap<String, String>();
        final HttpHeaders localVarHeaderParams = new HttpHeaders();
        final MultiValueMap<String, String> localVarCookieParams = new LinkedMultiValueMap<String, String>();
        final MultiValueMap<String, Object> localVarFormParams = new LinkedMultiValueMap<String, Object>();

        final String[] localVarAccepts = { 
            "application/json", "application/problem+json"
         };
        final List<MediaType> localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        final String[] localVarContentTypes = { 
            "application/json"
         };
        final MediaType localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

        String[] localVarAuthNames = new String[] { "basicAuth" };

        ParameterizedTypeReference<CampaignContent> localReturnType = new ParameterizedTypeReference<CampaignContent>() {};
        return apiClient.invokeAPI("/campaigns/{campaign_id}/content", HttpMethod.PUT, uriVariables, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localReturnType);
    }
}
