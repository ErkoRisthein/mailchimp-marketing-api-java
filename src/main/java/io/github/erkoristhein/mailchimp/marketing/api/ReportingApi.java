package io.github.erkoristhein.mailchimp.marketing.api;

import io.github.erkoristhein.mailchimp.marketing.ApiClient;

import io.github.erkoristhein.mailchimp.marketing.model.GetReportingFacebookAds200Response;
import io.github.erkoristhein.mailchimp.marketing.model.GetReportingFacebookAdsId200Response;
import io.github.erkoristhein.mailchimp.marketing.model.GetReportingLandingPages200Response;
import io.github.erkoristhein.mailchimp.marketing.model.GetReportingSurveys200Response;
import io.github.erkoristhein.mailchimp.marketing.model.GetReportingSurveysIdQuestions200Response;
import io.github.erkoristhein.mailchimp.marketing.model.GetReportingSurveysIdQuestionsIdAnswers200Response;
import io.github.erkoristhein.mailchimp.marketing.model.GetReportingSurveysIdResponses200Response;
import io.github.erkoristhein.mailchimp.marketing.model.GetReportsIdEcommerceProductActivity200Response;
import io.github.erkoristhein.mailchimp.marketing.model.LandingPageReport;
import io.github.erkoristhein.mailchimp.marketing.model.ProblemDetailDocument;
import io.github.erkoristhein.mailchimp.marketing.model.SurveyQuestionReport;
import io.github.erkoristhein.mailchimp.marketing.model.SurveyReport;
import io.github.erkoristhein.mailchimp.marketing.model.SurveyResponse;

import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.util.LinkedMultiValueMap;
import org.springframework.util.MultiValueMap;
import org.springframework.web.client.RestClientException;
import org.springframework.web.client.HttpClientErrorException;
import org.springframework.core.ParameterizedTypeReference;
import org.springframework.core.io.FileSystemResource;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-02-03T13:08:30.305646+02:00[Europe/Tallinn]")
public class ReportingApi {
    private ApiClient apiClient;

    public ReportingApi() {
        this(new ApiClient());
    }

    public ReportingApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * List facebook ads reports
     * Get reports of Facebook ads.
     * <p><b>200</b> - List of Facebook Ad Report Instances
     * <p><b>0</b> - An error generated by the Mailchimp API.
     * @param fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation. (optional)
     * @param excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation. (optional)
     * @param count The number of records to return. Default value is 10. Maximum value is 1000 (optional, default to 10)
     * @param offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (optional, default to 0)
     * @param sortField Returns files sorted by the specified field. (optional)
     * @param sortDir Determines the order direction for sorted results. (optional)
     * @return GetReportingFacebookAds200Response
     * @throws RestClientException if an error occurs while attempting to invoke the API
     */
    public GetReportingFacebookAds200Response getReportingFacebookAds(List<String> fields, List<String> excludeFields, Integer count, Integer offset, String sortField, String sortDir) throws RestClientException {
        return getReportingFacebookAdsWithHttpInfo(fields, excludeFields, count, offset, sortField, sortDir).getBody();
    }

    /**
     * List facebook ads reports
     * Get reports of Facebook ads.
     * <p><b>200</b> - List of Facebook Ad Report Instances
     * <p><b>0</b> - An error generated by the Mailchimp API.
     * @param fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation. (optional)
     * @param excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation. (optional)
     * @param count The number of records to return. Default value is 10. Maximum value is 1000 (optional, default to 10)
     * @param offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (optional, default to 0)
     * @param sortField Returns files sorted by the specified field. (optional)
     * @param sortDir Determines the order direction for sorted results. (optional)
     * @return ResponseEntity&lt;GetReportingFacebookAds200Response&gt;
     * @throws RestClientException if an error occurs while attempting to invoke the API
     */
    public ResponseEntity<GetReportingFacebookAds200Response> getReportingFacebookAdsWithHttpInfo(List<String> fields, List<String> excludeFields, Integer count, Integer offset, String sortField, String sortDir) throws RestClientException {
        Object localVarPostBody = null;
        

        final MultiValueMap<String, String> localVarQueryParams = new LinkedMultiValueMap<String, String>();
        final HttpHeaders localVarHeaderParams = new HttpHeaders();
        final MultiValueMap<String, String> localVarCookieParams = new LinkedMultiValueMap<String, String>();
        final MultiValueMap<String, Object> localVarFormParams = new LinkedMultiValueMap<String, Object>();

        localVarQueryParams.putAll(apiClient.parameterToMultiValueMap(ApiClient.CollectionFormat.valueOf("csv".toUpperCase(Locale.ROOT)), "fields", fields));
        localVarQueryParams.putAll(apiClient.parameterToMultiValueMap(ApiClient.CollectionFormat.valueOf("csv".toUpperCase(Locale.ROOT)), "exclude_fields", excludeFields));
        localVarQueryParams.putAll(apiClient.parameterToMultiValueMap(null, "count", count));
        localVarQueryParams.putAll(apiClient.parameterToMultiValueMap(null, "offset", offset));
        localVarQueryParams.putAll(apiClient.parameterToMultiValueMap(null, "sort_field", sortField));
        localVarQueryParams.putAll(apiClient.parameterToMultiValueMap(null, "sort_dir", sortDir));


        final String[] localVarAccepts = { 
            "application/json", "application/problem+json"
         };
        final List<MediaType> localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        final String[] localVarContentTypes = {  };
        final MediaType localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

        String[] localVarAuthNames = new String[] { "basicAuth" };

        ParameterizedTypeReference<GetReportingFacebookAds200Response> localReturnType = new ParameterizedTypeReference<GetReportingFacebookAds200Response>() {};
        return apiClient.invokeAPI("/reporting/facebook-ads", HttpMethod.GET, Collections.<String, Object>emptyMap(), localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localReturnType);
    }
    /**
     * Get facebook ad report
     * Get report of a Facebook ad.
     * <p><b>200</b> - Facebook Ad report Instance
     * <p><b>0</b> - An error generated by the Mailchimp API.
     * @param outreachId The outreach id. (required)
     * @param fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation. (optional)
     * @param excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation. (optional)
     * @return GetReportingFacebookAdsId200Response
     * @throws RestClientException if an error occurs while attempting to invoke the API
     */
    public GetReportingFacebookAdsId200Response getReportingFacebookAdsId(String outreachId, List<String> fields, List<String> excludeFields) throws RestClientException {
        return getReportingFacebookAdsIdWithHttpInfo(outreachId, fields, excludeFields).getBody();
    }

    /**
     * Get facebook ad report
     * Get report of a Facebook ad.
     * <p><b>200</b> - Facebook Ad report Instance
     * <p><b>0</b> - An error generated by the Mailchimp API.
     * @param outreachId The outreach id. (required)
     * @param fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation. (optional)
     * @param excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation. (optional)
     * @return ResponseEntity&lt;GetReportingFacebookAdsId200Response&gt;
     * @throws RestClientException if an error occurs while attempting to invoke the API
     */
    public ResponseEntity<GetReportingFacebookAdsId200Response> getReportingFacebookAdsIdWithHttpInfo(String outreachId, List<String> fields, List<String> excludeFields) throws RestClientException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'outreachId' is set
        if (outreachId == null) {
            throw new HttpClientErrorException(HttpStatus.BAD_REQUEST, "Missing the required parameter 'outreachId' when calling getReportingFacebookAdsId");
        }
        
        // create path and map variables
        final Map<String, Object> uriVariables = new HashMap<String, Object>();
        uriVariables.put("outreach_id", outreachId);

        final MultiValueMap<String, String> localVarQueryParams = new LinkedMultiValueMap<String, String>();
        final HttpHeaders localVarHeaderParams = new HttpHeaders();
        final MultiValueMap<String, String> localVarCookieParams = new LinkedMultiValueMap<String, String>();
        final MultiValueMap<String, Object> localVarFormParams = new LinkedMultiValueMap<String, Object>();

        localVarQueryParams.putAll(apiClient.parameterToMultiValueMap(ApiClient.CollectionFormat.valueOf("csv".toUpperCase(Locale.ROOT)), "fields", fields));
        localVarQueryParams.putAll(apiClient.parameterToMultiValueMap(ApiClient.CollectionFormat.valueOf("csv".toUpperCase(Locale.ROOT)), "exclude_fields", excludeFields));


        final String[] localVarAccepts = { 
            "application/json", "application/problem+json"
         };
        final List<MediaType> localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        final String[] localVarContentTypes = {  };
        final MediaType localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

        String[] localVarAuthNames = new String[] { "basicAuth" };

        ParameterizedTypeReference<GetReportingFacebookAdsId200Response> localReturnType = new ParameterizedTypeReference<GetReportingFacebookAdsId200Response>() {};
        return apiClient.invokeAPI("/reporting/facebook-ads/{outreach_id}", HttpMethod.GET, uriVariables, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localReturnType);
    }
    /**
     * List facebook ecommerce report
     * Get breakdown of product activity for an outreach.
     * <p><b>200</b> - Ecommerce Product Activity Instance
     * <p><b>0</b> - An error generated by the Mailchimp API.
     * @param outreachId The outreach id. (required)
     * @param fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation. (optional)
     * @param excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation. (optional)
     * @param count The number of records to return. Default value is 10. Maximum value is 1000 (optional, default to 10)
     * @param offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (optional, default to 0)
     * @param sortField Returns files sorted by the specified field. (optional)
     * @return GetReportsIdEcommerceProductActivity200Response
     * @throws RestClientException if an error occurs while attempting to invoke the API
     */
    public GetReportsIdEcommerceProductActivity200Response getReportingFacebookAdsIdEcommerceProductActivity(String outreachId, List<String> fields, List<String> excludeFields, Integer count, Integer offset, String sortField) throws RestClientException {
        return getReportingFacebookAdsIdEcommerceProductActivityWithHttpInfo(outreachId, fields, excludeFields, count, offset, sortField).getBody();
    }

    /**
     * List facebook ecommerce report
     * Get breakdown of product activity for an outreach.
     * <p><b>200</b> - Ecommerce Product Activity Instance
     * <p><b>0</b> - An error generated by the Mailchimp API.
     * @param outreachId The outreach id. (required)
     * @param fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation. (optional)
     * @param excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation. (optional)
     * @param count The number of records to return. Default value is 10. Maximum value is 1000 (optional, default to 10)
     * @param offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (optional, default to 0)
     * @param sortField Returns files sorted by the specified field. (optional)
     * @return ResponseEntity&lt;GetReportsIdEcommerceProductActivity200Response&gt;
     * @throws RestClientException if an error occurs while attempting to invoke the API
     */
    public ResponseEntity<GetReportsIdEcommerceProductActivity200Response> getReportingFacebookAdsIdEcommerceProductActivityWithHttpInfo(String outreachId, List<String> fields, List<String> excludeFields, Integer count, Integer offset, String sortField) throws RestClientException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'outreachId' is set
        if (outreachId == null) {
            throw new HttpClientErrorException(HttpStatus.BAD_REQUEST, "Missing the required parameter 'outreachId' when calling getReportingFacebookAdsIdEcommerceProductActivity");
        }
        
        // create path and map variables
        final Map<String, Object> uriVariables = new HashMap<String, Object>();
        uriVariables.put("outreach_id", outreachId);

        final MultiValueMap<String, String> localVarQueryParams = new LinkedMultiValueMap<String, String>();
        final HttpHeaders localVarHeaderParams = new HttpHeaders();
        final MultiValueMap<String, String> localVarCookieParams = new LinkedMultiValueMap<String, String>();
        final MultiValueMap<String, Object> localVarFormParams = new LinkedMultiValueMap<String, Object>();

        localVarQueryParams.putAll(apiClient.parameterToMultiValueMap(ApiClient.CollectionFormat.valueOf("csv".toUpperCase(Locale.ROOT)), "fields", fields));
        localVarQueryParams.putAll(apiClient.parameterToMultiValueMap(ApiClient.CollectionFormat.valueOf("csv".toUpperCase(Locale.ROOT)), "exclude_fields", excludeFields));
        localVarQueryParams.putAll(apiClient.parameterToMultiValueMap(null, "count", count));
        localVarQueryParams.putAll(apiClient.parameterToMultiValueMap(null, "offset", offset));
        localVarQueryParams.putAll(apiClient.parameterToMultiValueMap(null, "sort_field", sortField));


        final String[] localVarAccepts = { 
            "application/json", "application/problem+json"
         };
        final List<MediaType> localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        final String[] localVarContentTypes = {  };
        final MediaType localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

        String[] localVarAuthNames = new String[] { "basicAuth" };

        ParameterizedTypeReference<GetReportsIdEcommerceProductActivity200Response> localReturnType = new ParameterizedTypeReference<GetReportsIdEcommerceProductActivity200Response>() {};
        return apiClient.invokeAPI("/reporting/facebook-ads/{outreach_id}/ecommerce-product-activity", HttpMethod.GET, uriVariables, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localReturnType);
    }
    /**
     * List landing pages reports
     * Get reports of landing pages.
     * <p><b>200</b> - List of Landing Page Report Instances
     * <p><b>0</b> - An error generated by the Mailchimp API.
     * @param fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation. (optional)
     * @param excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation. (optional)
     * @param count The number of records to return. Default value is 10. Maximum value is 1000 (optional, default to 10)
     * @param offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (optional, default to 0)
     * @return GetReportingLandingPages200Response
     * @throws RestClientException if an error occurs while attempting to invoke the API
     */
    public GetReportingLandingPages200Response getReportingLandingPages(List<String> fields, List<String> excludeFields, Integer count, Integer offset) throws RestClientException {
        return getReportingLandingPagesWithHttpInfo(fields, excludeFields, count, offset).getBody();
    }

    /**
     * List landing pages reports
     * Get reports of landing pages.
     * <p><b>200</b> - List of Landing Page Report Instances
     * <p><b>0</b> - An error generated by the Mailchimp API.
     * @param fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation. (optional)
     * @param excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation. (optional)
     * @param count The number of records to return. Default value is 10. Maximum value is 1000 (optional, default to 10)
     * @param offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (optional, default to 0)
     * @return ResponseEntity&lt;GetReportingLandingPages200Response&gt;
     * @throws RestClientException if an error occurs while attempting to invoke the API
     */
    public ResponseEntity<GetReportingLandingPages200Response> getReportingLandingPagesWithHttpInfo(List<String> fields, List<String> excludeFields, Integer count, Integer offset) throws RestClientException {
        Object localVarPostBody = null;
        

        final MultiValueMap<String, String> localVarQueryParams = new LinkedMultiValueMap<String, String>();
        final HttpHeaders localVarHeaderParams = new HttpHeaders();
        final MultiValueMap<String, String> localVarCookieParams = new LinkedMultiValueMap<String, String>();
        final MultiValueMap<String, Object> localVarFormParams = new LinkedMultiValueMap<String, Object>();

        localVarQueryParams.putAll(apiClient.parameterToMultiValueMap(ApiClient.CollectionFormat.valueOf("csv".toUpperCase(Locale.ROOT)), "fields", fields));
        localVarQueryParams.putAll(apiClient.parameterToMultiValueMap(ApiClient.CollectionFormat.valueOf("csv".toUpperCase(Locale.ROOT)), "exclude_fields", excludeFields));
        localVarQueryParams.putAll(apiClient.parameterToMultiValueMap(null, "count", count));
        localVarQueryParams.putAll(apiClient.parameterToMultiValueMap(null, "offset", offset));


        final String[] localVarAccepts = { 
            "application/json", "application/problem+json"
         };
        final List<MediaType> localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        final String[] localVarContentTypes = {  };
        final MediaType localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

        String[] localVarAuthNames = new String[] { "basicAuth" };

        ParameterizedTypeReference<GetReportingLandingPages200Response> localReturnType = new ParameterizedTypeReference<GetReportingLandingPages200Response>() {};
        return apiClient.invokeAPI("/reporting/landing-pages", HttpMethod.GET, Collections.<String, Object>emptyMap(), localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localReturnType);
    }
    /**
     * Get landing page report
     * Get report of a landing page.
     * <p><b>200</b> - Landing Page Report Instance
     * <p><b>0</b> - An error generated by the Mailchimp API.
     * @param outreachId The outreach id. (required)
     * @param fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation. (optional)
     * @param excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation. (optional)
     * @return LandingPageReport
     * @throws RestClientException if an error occurs while attempting to invoke the API
     */
    public LandingPageReport getReportingLandingPagesId(String outreachId, List<String> fields, List<String> excludeFields) throws RestClientException {
        return getReportingLandingPagesIdWithHttpInfo(outreachId, fields, excludeFields).getBody();
    }

    /**
     * Get landing page report
     * Get report of a landing page.
     * <p><b>200</b> - Landing Page Report Instance
     * <p><b>0</b> - An error generated by the Mailchimp API.
     * @param outreachId The outreach id. (required)
     * @param fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation. (optional)
     * @param excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation. (optional)
     * @return ResponseEntity&lt;LandingPageReport&gt;
     * @throws RestClientException if an error occurs while attempting to invoke the API
     */
    public ResponseEntity<LandingPageReport> getReportingLandingPagesIdWithHttpInfo(String outreachId, List<String> fields, List<String> excludeFields) throws RestClientException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'outreachId' is set
        if (outreachId == null) {
            throw new HttpClientErrorException(HttpStatus.BAD_REQUEST, "Missing the required parameter 'outreachId' when calling getReportingLandingPagesId");
        }
        
        // create path and map variables
        final Map<String, Object> uriVariables = new HashMap<String, Object>();
        uriVariables.put("outreach_id", outreachId);

        final MultiValueMap<String, String> localVarQueryParams = new LinkedMultiValueMap<String, String>();
        final HttpHeaders localVarHeaderParams = new HttpHeaders();
        final MultiValueMap<String, String> localVarCookieParams = new LinkedMultiValueMap<String, String>();
        final MultiValueMap<String, Object> localVarFormParams = new LinkedMultiValueMap<String, Object>();

        localVarQueryParams.putAll(apiClient.parameterToMultiValueMap(ApiClient.CollectionFormat.valueOf("csv".toUpperCase(Locale.ROOT)), "fields", fields));
        localVarQueryParams.putAll(apiClient.parameterToMultiValueMap(ApiClient.CollectionFormat.valueOf("csv".toUpperCase(Locale.ROOT)), "exclude_fields", excludeFields));


        final String[] localVarAccepts = { 
            "application/json", "application/problem+json"
         };
        final List<MediaType> localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        final String[] localVarContentTypes = {  };
        final MediaType localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

        String[] localVarAuthNames = new String[] { "basicAuth" };

        ParameterizedTypeReference<LandingPageReport> localReturnType = new ParameterizedTypeReference<LandingPageReport>() {};
        return apiClient.invokeAPI("/reporting/landing-pages/{outreach_id}", HttpMethod.GET, uriVariables, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localReturnType);
    }
    /**
     * List survey reports
     * Get reports for surveys.
     * <p><b>200</b> - List of Survey Report Instances
     * <p><b>0</b> - An error generated by the Mailchimp API.
     * @param fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation. (optional)
     * @param excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation. (optional)
     * @param count The number of records to return. Default value is 10. Maximum value is 1000 (optional, default to 10)
     * @param offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (optional, default to 0)
     * @return GetReportingSurveys200Response
     * @throws RestClientException if an error occurs while attempting to invoke the API
     */
    public GetReportingSurveys200Response getReportingSurveys(List<String> fields, List<String> excludeFields, Integer count, Integer offset) throws RestClientException {
        return getReportingSurveysWithHttpInfo(fields, excludeFields, count, offset).getBody();
    }

    /**
     * List survey reports
     * Get reports for surveys.
     * <p><b>200</b> - List of Survey Report Instances
     * <p><b>0</b> - An error generated by the Mailchimp API.
     * @param fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation. (optional)
     * @param excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation. (optional)
     * @param count The number of records to return. Default value is 10. Maximum value is 1000 (optional, default to 10)
     * @param offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (optional, default to 0)
     * @return ResponseEntity&lt;GetReportingSurveys200Response&gt;
     * @throws RestClientException if an error occurs while attempting to invoke the API
     */
    public ResponseEntity<GetReportingSurveys200Response> getReportingSurveysWithHttpInfo(List<String> fields, List<String> excludeFields, Integer count, Integer offset) throws RestClientException {
        Object localVarPostBody = null;
        

        final MultiValueMap<String, String> localVarQueryParams = new LinkedMultiValueMap<String, String>();
        final HttpHeaders localVarHeaderParams = new HttpHeaders();
        final MultiValueMap<String, String> localVarCookieParams = new LinkedMultiValueMap<String, String>();
        final MultiValueMap<String, Object> localVarFormParams = new LinkedMultiValueMap<String, Object>();

        localVarQueryParams.putAll(apiClient.parameterToMultiValueMap(ApiClient.CollectionFormat.valueOf("csv".toUpperCase(Locale.ROOT)), "fields", fields));
        localVarQueryParams.putAll(apiClient.parameterToMultiValueMap(ApiClient.CollectionFormat.valueOf("csv".toUpperCase(Locale.ROOT)), "exclude_fields", excludeFields));
        localVarQueryParams.putAll(apiClient.parameterToMultiValueMap(null, "count", count));
        localVarQueryParams.putAll(apiClient.parameterToMultiValueMap(null, "offset", offset));


        final String[] localVarAccepts = { 
            "application/json", "application/problem+json"
         };
        final List<MediaType> localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        final String[] localVarContentTypes = {  };
        final MediaType localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

        String[] localVarAuthNames = new String[] { "basicAuth" };

        ParameterizedTypeReference<GetReportingSurveys200Response> localReturnType = new ParameterizedTypeReference<GetReportingSurveys200Response>() {};
        return apiClient.invokeAPI("/reporting/surveys", HttpMethod.GET, Collections.<String, Object>emptyMap(), localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localReturnType);
    }
    /**
     * Get survey report
     * Get report for a survey.
     * <p><b>200</b> - Survey Report Instance
     * <p><b>0</b> - An error generated by the Mailchimp API.
     * @param outreachId The outreach id. (required)
     * @param fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation. (optional)
     * @param excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation. (optional)
     * @return SurveyReport
     * @throws RestClientException if an error occurs while attempting to invoke the API
     */
    public SurveyReport getReportingSurveysId(String outreachId, List<String> fields, List<String> excludeFields) throws RestClientException {
        return getReportingSurveysIdWithHttpInfo(outreachId, fields, excludeFields).getBody();
    }

    /**
     * Get survey report
     * Get report for a survey.
     * <p><b>200</b> - Survey Report Instance
     * <p><b>0</b> - An error generated by the Mailchimp API.
     * @param outreachId The outreach id. (required)
     * @param fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation. (optional)
     * @param excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation. (optional)
     * @return ResponseEntity&lt;SurveyReport&gt;
     * @throws RestClientException if an error occurs while attempting to invoke the API
     */
    public ResponseEntity<SurveyReport> getReportingSurveysIdWithHttpInfo(String outreachId, List<String> fields, List<String> excludeFields) throws RestClientException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'outreachId' is set
        if (outreachId == null) {
            throw new HttpClientErrorException(HttpStatus.BAD_REQUEST, "Missing the required parameter 'outreachId' when calling getReportingSurveysId");
        }
        
        // create path and map variables
        final Map<String, Object> uriVariables = new HashMap<String, Object>();
        uriVariables.put("outreach_id", outreachId);

        final MultiValueMap<String, String> localVarQueryParams = new LinkedMultiValueMap<String, String>();
        final HttpHeaders localVarHeaderParams = new HttpHeaders();
        final MultiValueMap<String, String> localVarCookieParams = new LinkedMultiValueMap<String, String>();
        final MultiValueMap<String, Object> localVarFormParams = new LinkedMultiValueMap<String, Object>();

        localVarQueryParams.putAll(apiClient.parameterToMultiValueMap(ApiClient.CollectionFormat.valueOf("csv".toUpperCase(Locale.ROOT)), "fields", fields));
        localVarQueryParams.putAll(apiClient.parameterToMultiValueMap(ApiClient.CollectionFormat.valueOf("csv".toUpperCase(Locale.ROOT)), "exclude_fields", excludeFields));


        final String[] localVarAccepts = { 
            "application/json", "application/problem+json"
         };
        final List<MediaType> localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        final String[] localVarContentTypes = {  };
        final MediaType localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

        String[] localVarAuthNames = new String[] { "basicAuth" };

        ParameterizedTypeReference<SurveyReport> localReturnType = new ParameterizedTypeReference<SurveyReport>() {};
        return apiClient.invokeAPI("/reporting/surveys/{outreach_id}", HttpMethod.GET, uriVariables, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localReturnType);
    }
    /**
     * List survey question reports
     * Get reports for survey questions.
     * <p><b>200</b> - List of Survey Question Report Instances
     * <p><b>0</b> - An error generated by the Mailchimp API.
     * @param outreachId The outreach id. (required)
     * @param fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation. (optional)
     * @param excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation. (optional)
     * @return GetReportingSurveysIdQuestions200Response
     * @throws RestClientException if an error occurs while attempting to invoke the API
     */
    public GetReportingSurveysIdQuestions200Response getReportingSurveysIdQuestions(String outreachId, List<String> fields, List<String> excludeFields) throws RestClientException {
        return getReportingSurveysIdQuestionsWithHttpInfo(outreachId, fields, excludeFields).getBody();
    }

    /**
     * List survey question reports
     * Get reports for survey questions.
     * <p><b>200</b> - List of Survey Question Report Instances
     * <p><b>0</b> - An error generated by the Mailchimp API.
     * @param outreachId The outreach id. (required)
     * @param fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation. (optional)
     * @param excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation. (optional)
     * @return ResponseEntity&lt;GetReportingSurveysIdQuestions200Response&gt;
     * @throws RestClientException if an error occurs while attempting to invoke the API
     */
    public ResponseEntity<GetReportingSurveysIdQuestions200Response> getReportingSurveysIdQuestionsWithHttpInfo(String outreachId, List<String> fields, List<String> excludeFields) throws RestClientException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'outreachId' is set
        if (outreachId == null) {
            throw new HttpClientErrorException(HttpStatus.BAD_REQUEST, "Missing the required parameter 'outreachId' when calling getReportingSurveysIdQuestions");
        }
        
        // create path and map variables
        final Map<String, Object> uriVariables = new HashMap<String, Object>();
        uriVariables.put("outreach_id", outreachId);

        final MultiValueMap<String, String> localVarQueryParams = new LinkedMultiValueMap<String, String>();
        final HttpHeaders localVarHeaderParams = new HttpHeaders();
        final MultiValueMap<String, String> localVarCookieParams = new LinkedMultiValueMap<String, String>();
        final MultiValueMap<String, Object> localVarFormParams = new LinkedMultiValueMap<String, Object>();

        localVarQueryParams.putAll(apiClient.parameterToMultiValueMap(ApiClient.CollectionFormat.valueOf("csv".toUpperCase(Locale.ROOT)), "fields", fields));
        localVarQueryParams.putAll(apiClient.parameterToMultiValueMap(ApiClient.CollectionFormat.valueOf("csv".toUpperCase(Locale.ROOT)), "exclude_fields", excludeFields));


        final String[] localVarAccepts = { 
            "application/json", "application/problem+json"
         };
        final List<MediaType> localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        final String[] localVarContentTypes = {  };
        final MediaType localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

        String[] localVarAuthNames = new String[] { "basicAuth" };

        ParameterizedTypeReference<GetReportingSurveysIdQuestions200Response> localReturnType = new ParameterizedTypeReference<GetReportingSurveysIdQuestions200Response>() {};
        return apiClient.invokeAPI("/reporting/surveys/{outreach_id}/questions", HttpMethod.GET, uriVariables, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localReturnType);
    }
    /**
     * Get survey question report
     * Get report for a survey question.
     * <p><b>200</b> - Survey Question Report Instance
     * <p><b>0</b> - An error generated by the Mailchimp API.
     * @param outreachId The outreach id. (required)
     * @param questionId The ID of the survey question. (required)
     * @param fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation. (optional)
     * @param excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation. (optional)
     * @return SurveyQuestionReport
     * @throws RestClientException if an error occurs while attempting to invoke the API
     */
    public SurveyQuestionReport getReportingSurveysIdQuestionsId(String outreachId, String questionId, List<String> fields, List<String> excludeFields) throws RestClientException {
        return getReportingSurveysIdQuestionsIdWithHttpInfo(outreachId, questionId, fields, excludeFields).getBody();
    }

    /**
     * Get survey question report
     * Get report for a survey question.
     * <p><b>200</b> - Survey Question Report Instance
     * <p><b>0</b> - An error generated by the Mailchimp API.
     * @param outreachId The outreach id. (required)
     * @param questionId The ID of the survey question. (required)
     * @param fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation. (optional)
     * @param excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation. (optional)
     * @return ResponseEntity&lt;SurveyQuestionReport&gt;
     * @throws RestClientException if an error occurs while attempting to invoke the API
     */
    public ResponseEntity<SurveyQuestionReport> getReportingSurveysIdQuestionsIdWithHttpInfo(String outreachId, String questionId, List<String> fields, List<String> excludeFields) throws RestClientException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'outreachId' is set
        if (outreachId == null) {
            throw new HttpClientErrorException(HttpStatus.BAD_REQUEST, "Missing the required parameter 'outreachId' when calling getReportingSurveysIdQuestionsId");
        }
        
        // verify the required parameter 'questionId' is set
        if (questionId == null) {
            throw new HttpClientErrorException(HttpStatus.BAD_REQUEST, "Missing the required parameter 'questionId' when calling getReportingSurveysIdQuestionsId");
        }
        
        // create path and map variables
        final Map<String, Object> uriVariables = new HashMap<String, Object>();
        uriVariables.put("outreach_id", outreachId);
        uriVariables.put("question_id", questionId);

        final MultiValueMap<String, String> localVarQueryParams = new LinkedMultiValueMap<String, String>();
        final HttpHeaders localVarHeaderParams = new HttpHeaders();
        final MultiValueMap<String, String> localVarCookieParams = new LinkedMultiValueMap<String, String>();
        final MultiValueMap<String, Object> localVarFormParams = new LinkedMultiValueMap<String, Object>();

        localVarQueryParams.putAll(apiClient.parameterToMultiValueMap(ApiClient.CollectionFormat.valueOf("csv".toUpperCase(Locale.ROOT)), "fields", fields));
        localVarQueryParams.putAll(apiClient.parameterToMultiValueMap(ApiClient.CollectionFormat.valueOf("csv".toUpperCase(Locale.ROOT)), "exclude_fields", excludeFields));


        final String[] localVarAccepts = { 
            "application/json", "application/problem+json"
         };
        final List<MediaType> localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        final String[] localVarContentTypes = {  };
        final MediaType localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

        String[] localVarAuthNames = new String[] { "basicAuth" };

        ParameterizedTypeReference<SurveyQuestionReport> localReturnType = new ParameterizedTypeReference<SurveyQuestionReport>() {};
        return apiClient.invokeAPI("/reporting/surveys/{outreach_id}/questions/{question_id}", HttpMethod.GET, uriVariables, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localReturnType);
    }
    /**
     * List answers for question
     * Get answers for a survey question.
     * <p><b>200</b> - List of Survey Question Answers
     * <p><b>0</b> - An error generated by the Mailchimp API.
     * @param outreachId The outreach id. (required)
     * @param questionId The ID of the survey question. (required)
     * @param fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation. (optional)
     * @param excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation. (optional)
     * @param respondentFamiliarityIs Filter survey responses by familiarity of the respondents. (optional)
     * @return GetReportingSurveysIdQuestionsIdAnswers200Response
     * @throws RestClientException if an error occurs while attempting to invoke the API
     */
    public GetReportingSurveysIdQuestionsIdAnswers200Response getReportingSurveysIdQuestionsIdAnswers(String outreachId, String questionId, List<String> fields, List<String> excludeFields, String respondentFamiliarityIs) throws RestClientException {
        return getReportingSurveysIdQuestionsIdAnswersWithHttpInfo(outreachId, questionId, fields, excludeFields, respondentFamiliarityIs).getBody();
    }

    /**
     * List answers for question
     * Get answers for a survey question.
     * <p><b>200</b> - List of Survey Question Answers
     * <p><b>0</b> - An error generated by the Mailchimp API.
     * @param outreachId The outreach id. (required)
     * @param questionId The ID of the survey question. (required)
     * @param fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation. (optional)
     * @param excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation. (optional)
     * @param respondentFamiliarityIs Filter survey responses by familiarity of the respondents. (optional)
     * @return ResponseEntity&lt;GetReportingSurveysIdQuestionsIdAnswers200Response&gt;
     * @throws RestClientException if an error occurs while attempting to invoke the API
     */
    public ResponseEntity<GetReportingSurveysIdQuestionsIdAnswers200Response> getReportingSurveysIdQuestionsIdAnswersWithHttpInfo(String outreachId, String questionId, List<String> fields, List<String> excludeFields, String respondentFamiliarityIs) throws RestClientException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'outreachId' is set
        if (outreachId == null) {
            throw new HttpClientErrorException(HttpStatus.BAD_REQUEST, "Missing the required parameter 'outreachId' when calling getReportingSurveysIdQuestionsIdAnswers");
        }
        
        // verify the required parameter 'questionId' is set
        if (questionId == null) {
            throw new HttpClientErrorException(HttpStatus.BAD_REQUEST, "Missing the required parameter 'questionId' when calling getReportingSurveysIdQuestionsIdAnswers");
        }
        
        // create path and map variables
        final Map<String, Object> uriVariables = new HashMap<String, Object>();
        uriVariables.put("outreach_id", outreachId);
        uriVariables.put("question_id", questionId);

        final MultiValueMap<String, String> localVarQueryParams = new LinkedMultiValueMap<String, String>();
        final HttpHeaders localVarHeaderParams = new HttpHeaders();
        final MultiValueMap<String, String> localVarCookieParams = new LinkedMultiValueMap<String, String>();
        final MultiValueMap<String, Object> localVarFormParams = new LinkedMultiValueMap<String, Object>();

        localVarQueryParams.putAll(apiClient.parameterToMultiValueMap(ApiClient.CollectionFormat.valueOf("csv".toUpperCase(Locale.ROOT)), "fields", fields));
        localVarQueryParams.putAll(apiClient.parameterToMultiValueMap(ApiClient.CollectionFormat.valueOf("csv".toUpperCase(Locale.ROOT)), "exclude_fields", excludeFields));
        localVarQueryParams.putAll(apiClient.parameterToMultiValueMap(null, "respondent_familiarity_is", respondentFamiliarityIs));


        final String[] localVarAccepts = { 
            "application/json", "application/problem+json"
         };
        final List<MediaType> localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        final String[] localVarContentTypes = {  };
        final MediaType localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

        String[] localVarAuthNames = new String[] { "basicAuth" };

        ParameterizedTypeReference<GetReportingSurveysIdQuestionsIdAnswers200Response> localReturnType = new ParameterizedTypeReference<GetReportingSurveysIdQuestionsIdAnswers200Response>() {};
        return apiClient.invokeAPI("/reporting/surveys/{outreach_id}/questions/{question_id}/answers", HttpMethod.GET, uriVariables, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localReturnType);
    }
    /**
     * List survey responses
     * Get responses to a survey.
     * <p><b>200</b> - List of survey responses
     * <p><b>0</b> - An error generated by the Mailchimp API.
     * @param outreachId The outreach id. (required)
     * @param fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation. (optional)
     * @param excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation. (optional)
     * @param answeredQuestion The ID of the question that was answered. (optional)
     * @param choseAnswer The ID of the option chosen to filter responses on. (optional)
     * @param respondentFamiliarityIs Filter survey responses by familiarity of the respondents. (optional)
     * @return GetReportingSurveysIdResponses200Response
     * @throws RestClientException if an error occurs while attempting to invoke the API
     */
    public GetReportingSurveysIdResponses200Response getReportingSurveysIdResponses(String outreachId, List<String> fields, List<String> excludeFields, Integer answeredQuestion, String choseAnswer, String respondentFamiliarityIs) throws RestClientException {
        return getReportingSurveysIdResponsesWithHttpInfo(outreachId, fields, excludeFields, answeredQuestion, choseAnswer, respondentFamiliarityIs).getBody();
    }

    /**
     * List survey responses
     * Get responses to a survey.
     * <p><b>200</b> - List of survey responses
     * <p><b>0</b> - An error generated by the Mailchimp API.
     * @param outreachId The outreach id. (required)
     * @param fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation. (optional)
     * @param excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation. (optional)
     * @param answeredQuestion The ID of the question that was answered. (optional)
     * @param choseAnswer The ID of the option chosen to filter responses on. (optional)
     * @param respondentFamiliarityIs Filter survey responses by familiarity of the respondents. (optional)
     * @return ResponseEntity&lt;GetReportingSurveysIdResponses200Response&gt;
     * @throws RestClientException if an error occurs while attempting to invoke the API
     */
    public ResponseEntity<GetReportingSurveysIdResponses200Response> getReportingSurveysIdResponsesWithHttpInfo(String outreachId, List<String> fields, List<String> excludeFields, Integer answeredQuestion, String choseAnswer, String respondentFamiliarityIs) throws RestClientException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'outreachId' is set
        if (outreachId == null) {
            throw new HttpClientErrorException(HttpStatus.BAD_REQUEST, "Missing the required parameter 'outreachId' when calling getReportingSurveysIdResponses");
        }
        
        // create path and map variables
        final Map<String, Object> uriVariables = new HashMap<String, Object>();
        uriVariables.put("outreach_id", outreachId);

        final MultiValueMap<String, String> localVarQueryParams = new LinkedMultiValueMap<String, String>();
        final HttpHeaders localVarHeaderParams = new HttpHeaders();
        final MultiValueMap<String, String> localVarCookieParams = new LinkedMultiValueMap<String, String>();
        final MultiValueMap<String, Object> localVarFormParams = new LinkedMultiValueMap<String, Object>();

        localVarQueryParams.putAll(apiClient.parameterToMultiValueMap(ApiClient.CollectionFormat.valueOf("csv".toUpperCase(Locale.ROOT)), "fields", fields));
        localVarQueryParams.putAll(apiClient.parameterToMultiValueMap(ApiClient.CollectionFormat.valueOf("csv".toUpperCase(Locale.ROOT)), "exclude_fields", excludeFields));
        localVarQueryParams.putAll(apiClient.parameterToMultiValueMap(null, "answered_question", answeredQuestion));
        localVarQueryParams.putAll(apiClient.parameterToMultiValueMap(null, "chose_answer", choseAnswer));
        localVarQueryParams.putAll(apiClient.parameterToMultiValueMap(null, "respondent_familiarity_is", respondentFamiliarityIs));


        final String[] localVarAccepts = { 
            "application/json", "application/problem+json"
         };
        final List<MediaType> localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        final String[] localVarContentTypes = {  };
        final MediaType localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

        String[] localVarAuthNames = new String[] { "basicAuth" };

        ParameterizedTypeReference<GetReportingSurveysIdResponses200Response> localReturnType = new ParameterizedTypeReference<GetReportingSurveysIdResponses200Response>() {};
        return apiClient.invokeAPI("/reporting/surveys/{outreach_id}/responses", HttpMethod.GET, uriVariables, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localReturnType);
    }
    /**
     * Get survey response
     * Get a single survey response.
     * <p><b>200</b> - Get a single survey response.
     * <p><b>0</b> - An error generated by the Mailchimp API.
     * @param outreachId The outreach id. (required)
     * @param responseId The ID of the survey response. (required)
     * @return SurveyResponse
     * @throws RestClientException if an error occurs while attempting to invoke the API
     */
    public SurveyResponse getReportingSurveysIdResponsesId(String outreachId, String responseId) throws RestClientException {
        return getReportingSurveysIdResponsesIdWithHttpInfo(outreachId, responseId).getBody();
    }

    /**
     * Get survey response
     * Get a single survey response.
     * <p><b>200</b> - Get a single survey response.
     * <p><b>0</b> - An error generated by the Mailchimp API.
     * @param outreachId The outreach id. (required)
     * @param responseId The ID of the survey response. (required)
     * @return ResponseEntity&lt;SurveyResponse&gt;
     * @throws RestClientException if an error occurs while attempting to invoke the API
     */
    public ResponseEntity<SurveyResponse> getReportingSurveysIdResponsesIdWithHttpInfo(String outreachId, String responseId) throws RestClientException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'outreachId' is set
        if (outreachId == null) {
            throw new HttpClientErrorException(HttpStatus.BAD_REQUEST, "Missing the required parameter 'outreachId' when calling getReportingSurveysIdResponsesId");
        }
        
        // verify the required parameter 'responseId' is set
        if (responseId == null) {
            throw new HttpClientErrorException(HttpStatus.BAD_REQUEST, "Missing the required parameter 'responseId' when calling getReportingSurveysIdResponsesId");
        }
        
        // create path and map variables
        final Map<String, Object> uriVariables = new HashMap<String, Object>();
        uriVariables.put("outreach_id", outreachId);
        uriVariables.put("response_id", responseId);

        final MultiValueMap<String, String> localVarQueryParams = new LinkedMultiValueMap<String, String>();
        final HttpHeaders localVarHeaderParams = new HttpHeaders();
        final MultiValueMap<String, String> localVarCookieParams = new LinkedMultiValueMap<String, String>();
        final MultiValueMap<String, Object> localVarFormParams = new LinkedMultiValueMap<String, Object>();

        final String[] localVarAccepts = { 
            "application/json", "application/problem+json"
         };
        final List<MediaType> localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        final String[] localVarContentTypes = {  };
        final MediaType localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

        String[] localVarAuthNames = new String[] { "basicAuth" };

        ParameterizedTypeReference<SurveyResponse> localReturnType = new ParameterizedTypeReference<SurveyResponse>() {};
        return apiClient.invokeAPI("/reporting/surveys/{outreach_id}/responses/{response_id}", HttpMethod.GET, uriVariables, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localReturnType);
    }
}
