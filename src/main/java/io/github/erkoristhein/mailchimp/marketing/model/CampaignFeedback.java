/*
 * Mailchimp Marketing API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0.55
 * Contact: apihelp@mailchimp.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.erkoristhein.mailchimp.marketing.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.github.erkoristhein.mailchimp.marketing.model.ResourceLink;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * A specific feedback message from a specific campaign.
 */
@JsonPropertyOrder({
  CampaignFeedback.JSON_PROPERTY_FEEDBACK_ID,
  CampaignFeedback.JSON_PROPERTY_PARENT_ID,
  CampaignFeedback.JSON_PROPERTY_BLOCK_ID,
  CampaignFeedback.JSON_PROPERTY_MESSAGE,
  CampaignFeedback.JSON_PROPERTY_IS_COMPLETE,
  CampaignFeedback.JSON_PROPERTY_CREATED_BY,
  CampaignFeedback.JSON_PROPERTY_CREATED_AT,
  CampaignFeedback.JSON_PROPERTY_UPDATED_AT,
  CampaignFeedback.JSON_PROPERTY_SOURCE,
  CampaignFeedback.JSON_PROPERTY_CAMPAIGN_ID,
  CampaignFeedback.JSON_PROPERTY_LINKS
})
@JsonTypeName("Campaign_Feedback")
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-26T16:39:59.516441+03:00[Europe/Helsinki]", comments = "Generator version: 7.5.0")
public class CampaignFeedback {
  public static final String JSON_PROPERTY_FEEDBACK_ID = "feedback_id";
  private Integer feedbackId;

  public static final String JSON_PROPERTY_PARENT_ID = "parent_id";
  private Integer parentId;

  public static final String JSON_PROPERTY_BLOCK_ID = "block_id";
  private Integer blockId;

  public static final String JSON_PROPERTY_MESSAGE = "message";
  private String message;

  public static final String JSON_PROPERTY_IS_COMPLETE = "is_complete";
  private Boolean isComplete;

  public static final String JSON_PROPERTY_CREATED_BY = "created_by";
  private String createdBy;

  public static final String JSON_PROPERTY_CREATED_AT = "created_at";
  private OffsetDateTime createdAt;

  public static final String JSON_PROPERTY_UPDATED_AT = "updated_at";
  private OffsetDateTime updatedAt;

  /**
   * The source of the feedback.
   */
  public enum SourceEnum {
    API("api"),
    
    EMAIL("email"),
    
    SMS("sms"),
    
    WEB("web"),
    
    IOS("ios"),
    
    ANDROID("android");

    private String value;

    SourceEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static SourceEnum fromValue(String value) {
      for (SourceEnum b : SourceEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_SOURCE = "source";
  private SourceEnum source;

  public static final String JSON_PROPERTY_CAMPAIGN_ID = "campaign_id";
  private String campaignId;

  public static final String JSON_PROPERTY_LINKS = "_links";
  private List<ResourceLink> links = new ArrayList<>();

  public CampaignFeedback() {
  }

  @JsonCreator
  public CampaignFeedback(
    @JsonProperty(JSON_PROPERTY_FEEDBACK_ID) Integer feedbackId, 
    @JsonProperty(JSON_PROPERTY_PARENT_ID) Integer parentId, 
    @JsonProperty(JSON_PROPERTY_CREATED_BY) String createdBy, 
    @JsonProperty(JSON_PROPERTY_CREATED_AT) OffsetDateTime createdAt, 
    @JsonProperty(JSON_PROPERTY_UPDATED_AT) OffsetDateTime updatedAt, 
    @JsonProperty(JSON_PROPERTY_SOURCE) SourceEnum source, 
    @JsonProperty(JSON_PROPERTY_CAMPAIGN_ID) String campaignId, 
    @JsonProperty(JSON_PROPERTY_LINKS) List<ResourceLink> links
  ) {
    this();
    this.feedbackId = feedbackId;
    this.parentId = parentId;
    this.createdBy = createdBy;
    this.createdAt = createdAt;
    this.updatedAt = updatedAt;
    this.source = source;
    this.campaignId = campaignId;
    this.links = links;
  }

   /**
   * The individual id for the feedback item.
   * @return feedbackId
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FEEDBACK_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getFeedbackId() {
    return feedbackId;
  }




   /**
   * If a reply, the id of the parent feedback item.
   * @return parentId
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PARENT_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getParentId() {
    return parentId;
  }




  public CampaignFeedback blockId(Integer blockId) {
    
    this.blockId = blockId;
    return this;
  }

   /**
   * The block id for the editable block that the feedback addresses.
   * @return blockId
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_BLOCK_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getBlockId() {
    return blockId;
  }


  @JsonProperty(JSON_PROPERTY_BLOCK_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBlockId(Integer blockId) {
    this.blockId = blockId;
  }


  public CampaignFeedback message(String message) {
    
    this.message = message;
    return this;
  }

   /**
   * The content of the feedback.
   * @return message
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_MESSAGE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getMessage() {
    return message;
  }


  @JsonProperty(JSON_PROPERTY_MESSAGE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setMessage(String message) {
    this.message = message;
  }


  public CampaignFeedback isComplete(Boolean isComplete) {
    
    this.isComplete = isComplete;
    return this;
  }

   /**
   * The status of feedback.
   * @return isComplete
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_IS_COMPLETE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getIsComplete() {
    return isComplete;
  }


  @JsonProperty(JSON_PROPERTY_IS_COMPLETE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIsComplete(Boolean isComplete) {
    this.isComplete = isComplete;
  }


   /**
   * The login name of the user who created the feedback.
   * @return createdBy
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CREATED_BY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getCreatedBy() {
    return createdBy;
  }




   /**
   * The date and time the feedback item was created in ISO 8601 format.
   * @return createdAt
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CREATED_AT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }




   /**
   * The date and time the feedback was last updated in ISO 8601 format.
   * @return updatedAt
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_UPDATED_AT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }




   /**
   * The source of the feedback.
   * @return source
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SOURCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public SourceEnum getSource() {
    return source;
  }




   /**
   * The unique id for the campaign.
   * @return campaignId
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CAMPAIGN_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getCampaignId() {
    return campaignId;
  }




   /**
   * A list of link types and descriptions for the API schema documents.
   * @return links
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LINKS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<ResourceLink> getLinks() {
    return links;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CampaignFeedback campaignFeedback = (CampaignFeedback) o;
    return Objects.equals(this.feedbackId, campaignFeedback.feedbackId) &&
        Objects.equals(this.parentId, campaignFeedback.parentId) &&
        Objects.equals(this.blockId, campaignFeedback.blockId) &&
        Objects.equals(this.message, campaignFeedback.message) &&
        Objects.equals(this.isComplete, campaignFeedback.isComplete) &&
        Objects.equals(this.createdBy, campaignFeedback.createdBy) &&
        Objects.equals(this.createdAt, campaignFeedback.createdAt) &&
        Objects.equals(this.updatedAt, campaignFeedback.updatedAt) &&
        Objects.equals(this.source, campaignFeedback.source) &&
        Objects.equals(this.campaignId, campaignFeedback.campaignId) &&
        Objects.equals(this.links, campaignFeedback.links);
  }

  @Override
  public int hashCode() {
    return Objects.hash(feedbackId, parentId, blockId, message, isComplete, createdBy, createdAt, updatedAt, source, campaignId, links);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CampaignFeedback {\n");
    sb.append("    feedbackId: ").append(toIndentedString(feedbackId)).append("\n");
    sb.append("    parentId: ").append(toIndentedString(parentId)).append("\n");
    sb.append("    blockId: ").append(toIndentedString(blockId)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    isComplete: ").append(toIndentedString(isComplete)).append("\n");
    sb.append("    createdBy: ").append(toIndentedString(createdBy)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    campaignId: ").append(toIndentedString(campaignId)).append("\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

