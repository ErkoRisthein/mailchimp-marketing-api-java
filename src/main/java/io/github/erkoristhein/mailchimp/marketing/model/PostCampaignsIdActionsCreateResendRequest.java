/*
 * Mailchimp Marketing API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0.55
 * Contact: apihelp@mailchimp.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.erkoristhein.mailchimp.marketing.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * PostCampaignsIdActionsCreateResendRequest
 */
@JsonPropertyOrder({
  PostCampaignsIdActionsCreateResendRequest.JSON_PROPERTY_SHORTCUT_TYPE
})
@JsonTypeName("postCampaignsIdActionsCreateResend_request")
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-26T16:39:59.516441+03:00[Europe/Helsinki]", comments = "Generator version: 7.5.0")
public class PostCampaignsIdActionsCreateResendRequest {
  /**
   * Which campaign resend shortcut to use. Default is &#x60;to_non_openers&#x60;.
   */
  public enum ShortcutTypeEnum {
    NON_OPENERS("to_non_openers"),
    
    NEW_SUBSCRIBERS("to_new_subscribers"),
    
    NON_CLICKERS("to_non_clickers");

    private String value;

    ShortcutTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static ShortcutTypeEnum fromValue(String value) {
      for (ShortcutTypeEnum b : ShortcutTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_SHORTCUT_TYPE = "shortcut_type";
  private ShortcutTypeEnum shortcutType;

  public PostCampaignsIdActionsCreateResendRequest() {
  }

  public PostCampaignsIdActionsCreateResendRequest shortcutType(ShortcutTypeEnum shortcutType) {
    
    this.shortcutType = shortcutType;
    return this;
  }

   /**
   * Which campaign resend shortcut to use. Default is &#x60;to_non_openers&#x60;.
   * @return shortcutType
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SHORTCUT_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ShortcutTypeEnum getShortcutType() {
    return shortcutType;
  }


  @JsonProperty(JSON_PROPERTY_SHORTCUT_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setShortcutType(ShortcutTypeEnum shortcutType) {
    this.shortcutType = shortcutType;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PostCampaignsIdActionsCreateResendRequest postCampaignsIdActionsCreateResendRequest = (PostCampaignsIdActionsCreateResendRequest) o;
    return Objects.equals(this.shortcutType, postCampaignsIdActionsCreateResendRequest.shortcutType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(shortcutType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PostCampaignsIdActionsCreateResendRequest {\n");
    sb.append("    shortcutType: ").append(toIndentedString(shortcutType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

