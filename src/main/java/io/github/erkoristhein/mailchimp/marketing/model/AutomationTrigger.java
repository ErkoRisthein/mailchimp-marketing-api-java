/*
 * Mailchimp Marketing API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0.55
 * Contact: apihelp@mailchimp.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.erkoristhein.mailchimp.marketing.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.github.erkoristhein.mailchimp.marketing.model.AutomationWorkflowRuntimeSettings;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Available triggers for Automation workflows.
 */
@JsonPropertyOrder({
  AutomationTrigger.JSON_PROPERTY_WORKFLOW_TYPE,
  AutomationTrigger.JSON_PROPERTY_WORKFLOW_TITLE,
  AutomationTrigger.JSON_PROPERTY_RUNTIME,
  AutomationTrigger.JSON_PROPERTY_WORKFLOW_EMAILS_COUNT
})
@JsonTypeName("Automation_Trigger")
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-26T16:39:59.516441+03:00[Europe/Helsinki]", comments = "Generator version: 7.5.0")
public class AutomationTrigger {
  /**
   * The type of Automation workflow.
   */
  public enum WorkflowTypeEnum {
    ABANDONEDBROWSE("abandonedBrowse"),
    
    ABANDONEDCART("abandonedCart"),
    
    API("api"),
    
    BESTCUSTOMERS("bestCustomers"),
    
    CATEGORYFOLLOWUP("categoryFollowup"),
    
    DATEADDED("dateAdded"),
    
    EMAILFOLLOWUP("emailFollowup"),
    
    EMAILSERIES("emailSeries"),
    
    GROUPADD("groupAdd"),
    
    GROUPREMOVE("groupRemove"),
    
    MANDRILL("mandrill"),
    
    PRODUCTFOLLOWUP("productFollowup"),
    
    PURCHASEFOLLOWUP("purchaseFollowup"),
    
    RECURRINGEVENT("recurringEvent"),
    
    SPECIALEVENT("specialEvent"),
    
    VISITURL("visitUrl"),
    
    WELCOMESERIES("welcomeSeries");

    private String value;

    WorkflowTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static WorkflowTypeEnum fromValue(String value) {
      for (WorkflowTypeEnum b : WorkflowTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_WORKFLOW_TYPE = "workflow_type";
  private WorkflowTypeEnum workflowType;

  public static final String JSON_PROPERTY_WORKFLOW_TITLE = "workflow_title";
  private String workflowTitle;

  public static final String JSON_PROPERTY_RUNTIME = "runtime";
  private AutomationWorkflowRuntimeSettings runtime;

  public static final String JSON_PROPERTY_WORKFLOW_EMAILS_COUNT = "workflow_emails_count";
  private Integer workflowEmailsCount;

  public AutomationTrigger() {
  }

  @JsonCreator
  public AutomationTrigger(
    @JsonProperty(JSON_PROPERTY_WORKFLOW_TITLE) String workflowTitle, 
    @JsonProperty(JSON_PROPERTY_WORKFLOW_EMAILS_COUNT) Integer workflowEmailsCount
  ) {
    this();
    this.workflowTitle = workflowTitle;
    this.workflowEmailsCount = workflowEmailsCount;
  }

  public AutomationTrigger workflowType(WorkflowTypeEnum workflowType) {
    
    this.workflowType = workflowType;
    return this;
  }

   /**
   * The type of Automation workflow.
   * @return workflowType
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_WORKFLOW_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public WorkflowTypeEnum getWorkflowType() {
    return workflowType;
  }


  @JsonProperty(JSON_PROPERTY_WORKFLOW_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setWorkflowType(WorkflowTypeEnum workflowType) {
    this.workflowType = workflowType;
  }


   /**
   * The title of the workflow type.
   * @return workflowTitle
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_WORKFLOW_TITLE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getWorkflowTitle() {
    return workflowTitle;
  }




  public AutomationTrigger runtime(AutomationWorkflowRuntimeSettings runtime) {
    
    this.runtime = runtime;
    return this;
  }

   /**
   * Get runtime
   * @return runtime
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_RUNTIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public AutomationWorkflowRuntimeSettings getRuntime() {
    return runtime;
  }


  @JsonProperty(JSON_PROPERTY_RUNTIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRuntime(AutomationWorkflowRuntimeSettings runtime) {
    this.runtime = runtime;
  }


   /**
   * The number of emails in the Automation workflow.
   * @return workflowEmailsCount
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_WORKFLOW_EMAILS_COUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getWorkflowEmailsCount() {
    return workflowEmailsCount;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AutomationTrigger automationTrigger = (AutomationTrigger) o;
    return Objects.equals(this.workflowType, automationTrigger.workflowType) &&
        Objects.equals(this.workflowTitle, automationTrigger.workflowTitle) &&
        Objects.equals(this.runtime, automationTrigger.runtime) &&
        Objects.equals(this.workflowEmailsCount, automationTrigger.workflowEmailsCount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(workflowType, workflowTitle, runtime, workflowEmailsCount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AutomationTrigger {\n");
    sb.append("    workflowType: ").append(toIndentedString(workflowType)).append("\n");
    sb.append("    workflowTitle: ").append(toIndentedString(workflowTitle)).append("\n");
    sb.append("    runtime: ").append(toIndentedString(runtime)).append("\n");
    sb.append("    workflowEmailsCount: ").append(toIndentedString(workflowEmailsCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

