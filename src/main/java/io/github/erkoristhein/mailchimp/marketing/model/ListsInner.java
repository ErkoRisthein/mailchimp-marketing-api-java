/*
 * Mailchimp Marketing API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0.81
 * Contact: apihelp@mailchimp.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.erkoristhein.mailchimp.marketing.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * ListsInner
 */
@JsonPropertyOrder({
  ListsInner.JSON_PROPERTY_COUNTRY_CODE,
  ListsInner.JSON_PROPERTY_REGION,
  ListsInner.JSON_PROPERTY_REGION_NAME,
  ListsInner.JSON_PROPERTY_OPENS
})
@JsonTypeName("Lists_inner")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-02-03T13:08:30.305646+02:00[Europe/Tallinn]")
public class ListsInner {
  public static final String JSON_PROPERTY_COUNTRY_CODE = "country_code";
  private String countryCode;

  public static final String JSON_PROPERTY_REGION = "region";
  private String region;

  public static final String JSON_PROPERTY_REGION_NAME = "region_name";
  private String regionName;

  public static final String JSON_PROPERTY_OPENS = "opens";
  private Integer opens;

  public ListsInner() {
  }

  @JsonCreator
  public ListsInner(
    @JsonProperty(JSON_PROPERTY_COUNTRY_CODE) String countryCode, 
    @JsonProperty(JSON_PROPERTY_REGION) String region, 
    @JsonProperty(JSON_PROPERTY_REGION_NAME) String regionName, 
    @JsonProperty(JSON_PROPERTY_OPENS) Integer opens
  ) {
    this();
    this.countryCode = countryCode;
    this.region = region;
    this.regionName = regionName;
    this.opens = opens;
  }

   /**
   * The ISO 3166 2 digit country code.
   * @return countryCode
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_COUNTRY_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getCountryCode() {
    return countryCode;
  }




   /**
   * An internal code for the region representing the more specific location area such as city or state. When this is blank, it indicates we know the country, but not the region.
   * @return region
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_REGION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getRegion() {
    return region;
  }




   /**
   * The name of the region, if we have one. For blank \&quot;region\&quot; values, this will be \&quot;Rest of Country\&quot;.
   * @return regionName
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_REGION_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getRegionName() {
    return regionName;
  }




   /**
   * The number of unique campaign opens for a region.
   * @return opens
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_OPENS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getOpens() {
    return opens;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ListsInner listsInner = (ListsInner) o;
    return Objects.equals(this.countryCode, listsInner.countryCode) &&
        Objects.equals(this.region, listsInner.region) &&
        Objects.equals(this.regionName, listsInner.regionName) &&
        Objects.equals(this.opens, listsInner.opens);
  }

  @Override
  public int hashCode() {
    return Objects.hash(countryCode, region, regionName, opens);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ListsInner {\n");
    sb.append("    countryCode: ").append(toIndentedString(countryCode)).append("\n");
    sb.append("    region: ").append(toIndentedString(region)).append("\n");
    sb.append("    regionName: ").append(toIndentedString(regionName)).append("\n");
    sb.append("    opens: ").append(toIndentedString(opens)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

