/*
 * Mailchimp Marketing API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0.81
 * Contact: apihelp@mailchimp.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.erkoristhein.mailchimp.marketing.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.github.erkoristhein.mailchimp.marketing.model.ResourceLink;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Information about a specific template.
 */
@JsonPropertyOrder({
  TemplateInstance.JSON_PROPERTY_ID,
  TemplateInstance.JSON_PROPERTY_TYPE,
  TemplateInstance.JSON_PROPERTY_NAME,
  TemplateInstance.JSON_PROPERTY_DRAG_AND_DROP,
  TemplateInstance.JSON_PROPERTY_RESPONSIVE,
  TemplateInstance.JSON_PROPERTY_CATEGORY,
  TemplateInstance.JSON_PROPERTY_DATE_CREATED,
  TemplateInstance.JSON_PROPERTY_DATE_EDITED,
  TemplateInstance.JSON_PROPERTY_CREATED_BY,
  TemplateInstance.JSON_PROPERTY_EDITED_BY,
  TemplateInstance.JSON_PROPERTY_ACTIVE,
  TemplateInstance.JSON_PROPERTY_FOLDER_ID,
  TemplateInstance.JSON_PROPERTY_THUMBNAIL,
  TemplateInstance.JSON_PROPERTY_SHARE_URL,
  TemplateInstance.JSON_PROPERTY_CONTENT_TYPE,
  TemplateInstance.JSON_PROPERTY_LINKS
})
@JsonTypeName("Template_Instance")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-02-03T13:08:30.305646+02:00[Europe/Tallinn]")
public class TemplateInstance {
  public static final String JSON_PROPERTY_ID = "id";
  private Integer id;

  public static final String JSON_PROPERTY_TYPE = "type";
  private String type;

  public static final String JSON_PROPERTY_NAME = "name";
  private String name;

  public static final String JSON_PROPERTY_DRAG_AND_DROP = "drag_and_drop";
  private Boolean dragAndDrop;

  public static final String JSON_PROPERTY_RESPONSIVE = "responsive";
  private Boolean responsive;

  public static final String JSON_PROPERTY_CATEGORY = "category";
  private String category;

  public static final String JSON_PROPERTY_DATE_CREATED = "date_created";
  private OffsetDateTime dateCreated;

  public static final String JSON_PROPERTY_DATE_EDITED = "date_edited";
  private OffsetDateTime dateEdited;

  public static final String JSON_PROPERTY_CREATED_BY = "created_by";
  private String createdBy;

  public static final String JSON_PROPERTY_EDITED_BY = "edited_by";
  private String editedBy;

  public static final String JSON_PROPERTY_ACTIVE = "active";
  private Boolean active;

  public static final String JSON_PROPERTY_FOLDER_ID = "folder_id";
  private String folderId;

  public static final String JSON_PROPERTY_THUMBNAIL = "thumbnail";
  private String thumbnail;

  public static final String JSON_PROPERTY_SHARE_URL = "share_url";
  private String shareUrl;

  /**
   * How the template&#39;s content is put together.
   */
  public enum ContentTypeEnum {
    TEMPLATE("template"),
    
    MULTICHANNEL("multichannel"),
    
    HTML("html");

    private String value;

    ContentTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static ContentTypeEnum fromValue(String value) {
      for (ContentTypeEnum b : ContentTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_CONTENT_TYPE = "content_type";
  private ContentTypeEnum contentType;

  public static final String JSON_PROPERTY_LINKS = "_links";
  private List<ResourceLink> links;

  public TemplateInstance() {
  }

  @JsonCreator
  public TemplateInstance(
    @JsonProperty(JSON_PROPERTY_ID) Integer id, 
    @JsonProperty(JSON_PROPERTY_TYPE) String type, 
    @JsonProperty(JSON_PROPERTY_DRAG_AND_DROP) Boolean dragAndDrop, 
    @JsonProperty(JSON_PROPERTY_RESPONSIVE) Boolean responsive, 
    @JsonProperty(JSON_PROPERTY_CATEGORY) String category, 
    @JsonProperty(JSON_PROPERTY_DATE_CREATED) OffsetDateTime dateCreated, 
    @JsonProperty(JSON_PROPERTY_DATE_EDITED) OffsetDateTime dateEdited, 
    @JsonProperty(JSON_PROPERTY_CREATED_BY) String createdBy, 
    @JsonProperty(JSON_PROPERTY_EDITED_BY) String editedBy, 
    @JsonProperty(JSON_PROPERTY_ACTIVE) Boolean active, 
    @JsonProperty(JSON_PROPERTY_THUMBNAIL) String thumbnail, 
    @JsonProperty(JSON_PROPERTY_SHARE_URL) String shareUrl, 
    @JsonProperty(JSON_PROPERTY_CONTENT_TYPE) ContentTypeEnum contentType, 
    @JsonProperty(JSON_PROPERTY_LINKS) List<ResourceLink> links
  ) {
    this();
    this.id = id;
    this.type = type;
    this.dragAndDrop = dragAndDrop;
    this.responsive = responsive;
    this.category = category;
    this.dateCreated = dateCreated;
    this.dateEdited = dateEdited;
    this.createdBy = createdBy;
    this.editedBy = editedBy;
    this.active = active;
    this.thumbnail = thumbnail;
    this.shareUrl = shareUrl;
    this.contentType = contentType;
    this.links = links;
  }

   /**
   * The individual id for the template.
   * @return id
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getId() {
    return id;
  }




   /**
   * The type of template (user, base, or gallery).
   * @return type
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getType() {
    return type;
  }




  public TemplateInstance name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * The name of the template.
   * @return name
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setName(String name) {
    this.name = name;
  }


   /**
   * Whether the template uses the drag and drop editor.
   * @return dragAndDrop
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DRAG_AND_DROP)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getDragAndDrop() {
    return dragAndDrop;
  }




   /**
   * Whether the template contains media queries to make it responsive.
   * @return responsive
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_RESPONSIVE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getResponsive() {
    return responsive;
  }




   /**
   * If available, the category the template is listed in.
   * @return category
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CATEGORY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getCategory() {
    return category;
  }




   /**
   * The date and time the template was created in ISO 8601 format.
   * @return dateCreated
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DATE_CREATED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OffsetDateTime getDateCreated() {
    return dateCreated;
  }




   /**
   * The date and time the template was edited in ISO 8601 format.
   * @return dateEdited
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DATE_EDITED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OffsetDateTime getDateEdited() {
    return dateEdited;
  }




   /**
   * The login name for template&#39;s creator.
   * @return createdBy
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CREATED_BY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getCreatedBy() {
    return createdBy;
  }




   /**
   * The login name who last edited the template.
   * @return editedBy
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_EDITED_BY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getEditedBy() {
    return editedBy;
  }




   /**
   * User templates are not &#39;deleted,&#39; but rather marked as &#39;inactive.&#39; Returns whether the template is still active.
   * @return active
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ACTIVE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getActive() {
    return active;
  }




  public TemplateInstance folderId(String folderId) {
    
    this.folderId = folderId;
    return this;
  }

   /**
   * The id of the folder the template is currently in.
   * @return folderId
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FOLDER_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getFolderId() {
    return folderId;
  }


  @JsonProperty(JSON_PROPERTY_FOLDER_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFolderId(String folderId) {
    this.folderId = folderId;
  }


   /**
   * If available, the URL for a thumbnail of the template.
   * @return thumbnail
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_THUMBNAIL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getThumbnail() {
    return thumbnail;
  }




   /**
   * The URL used for [template sharing](https://mailchimp.com/help/share-a-template/).
   * @return shareUrl
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SHARE_URL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getShareUrl() {
    return shareUrl;
  }




   /**
   * How the template&#39;s content is put together.
   * @return contentType
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CONTENT_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ContentTypeEnum getContentType() {
    return contentType;
  }




   /**
   * A list of link types and descriptions for the API schema documents.
   * @return links
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LINKS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<ResourceLink> getLinks() {
    return links;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TemplateInstance templateInstance = (TemplateInstance) o;
    return Objects.equals(this.id, templateInstance.id) &&
        Objects.equals(this.type, templateInstance.type) &&
        Objects.equals(this.name, templateInstance.name) &&
        Objects.equals(this.dragAndDrop, templateInstance.dragAndDrop) &&
        Objects.equals(this.responsive, templateInstance.responsive) &&
        Objects.equals(this.category, templateInstance.category) &&
        Objects.equals(this.dateCreated, templateInstance.dateCreated) &&
        Objects.equals(this.dateEdited, templateInstance.dateEdited) &&
        Objects.equals(this.createdBy, templateInstance.createdBy) &&
        Objects.equals(this.editedBy, templateInstance.editedBy) &&
        Objects.equals(this.active, templateInstance.active) &&
        Objects.equals(this.folderId, templateInstance.folderId) &&
        Objects.equals(this.thumbnail, templateInstance.thumbnail) &&
        Objects.equals(this.shareUrl, templateInstance.shareUrl) &&
        Objects.equals(this.contentType, templateInstance.contentType) &&
        Objects.equals(this.links, templateInstance.links);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, type, name, dragAndDrop, responsive, category, dateCreated, dateEdited, createdBy, editedBy, active, folderId, thumbnail, shareUrl, contentType, links);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TemplateInstance {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    dragAndDrop: ").append(toIndentedString(dragAndDrop)).append("\n");
    sb.append("    responsive: ").append(toIndentedString(responsive)).append("\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    dateCreated: ").append(toIndentedString(dateCreated)).append("\n");
    sb.append("    dateEdited: ").append(toIndentedString(dateEdited)).append("\n");
    sb.append("    createdBy: ").append(toIndentedString(createdBy)).append("\n");
    sb.append("    editedBy: ").append(toIndentedString(editedBy)).append("\n");
    sb.append("    active: ").append(toIndentedString(active)).append("\n");
    sb.append("    folderId: ").append(toIndentedString(folderId)).append("\n");
    sb.append("    thumbnail: ").append(toIndentedString(thumbnail)).append("\n");
    sb.append("    shareUrl: ").append(toIndentedString(shareUrl)).append("\n");
    sb.append("    contentType: ").append(toIndentedString(contentType)).append("\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

