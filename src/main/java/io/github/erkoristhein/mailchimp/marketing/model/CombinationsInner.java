/*
 * Mailchimp Marketing API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0.81
 * Contact: apihelp@mailchimp.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.erkoristhein.mailchimp.marketing.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * CombinationsInner
 */
@JsonPropertyOrder({
  CombinationsInner.JSON_PROPERTY_ID,
  CombinationsInner.JSON_PROPERTY_SUBJECT_LINE,
  CombinationsInner.JSON_PROPERTY_SEND_TIME,
  CombinationsInner.JSON_PROPERTY_FROM_NAME,
  CombinationsInner.JSON_PROPERTY_REPLY_TO,
  CombinationsInner.JSON_PROPERTY_CONTENT_DESCRIPTION,
  CombinationsInner.JSON_PROPERTY_RECIPIENTS
})
@JsonTypeName("Combinations_inner")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-02-03T13:08:30.305646+02:00[Europe/Tallinn]")
public class CombinationsInner {
  public static final String JSON_PROPERTY_ID = "id";
  private String id;

  public static final String JSON_PROPERTY_SUBJECT_LINE = "subject_line";
  private Integer subjectLine;

  public static final String JSON_PROPERTY_SEND_TIME = "send_time";
  private Integer sendTime;

  public static final String JSON_PROPERTY_FROM_NAME = "from_name";
  private Integer fromName;

  public static final String JSON_PROPERTY_REPLY_TO = "reply_to";
  private Integer replyTo;

  public static final String JSON_PROPERTY_CONTENT_DESCRIPTION = "content_description";
  private Integer contentDescription;

  public static final String JSON_PROPERTY_RECIPIENTS = "recipients";
  private Integer recipients;

  public CombinationsInner() {
  }

  public CombinationsInner id(String id) {
    
    this.id = id;
    return this;
  }

   /**
   * Unique ID for the combination.
   * @return id
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setId(String id) {
    this.id = id;
  }


  public CombinationsInner subjectLine(Integer subjectLine) {
    
    this.subjectLine = subjectLine;
    return this;
  }

   /**
   * The index of &#x60;variate_settings.subject_lines&#x60; used.
   * @return subjectLine
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SUBJECT_LINE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getSubjectLine() {
    return subjectLine;
  }


  @JsonProperty(JSON_PROPERTY_SUBJECT_LINE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSubjectLine(Integer subjectLine) {
    this.subjectLine = subjectLine;
  }


  public CombinationsInner sendTime(Integer sendTime) {
    
    this.sendTime = sendTime;
    return this;
  }

   /**
   * The index of &#x60;variate_settings.send_times&#x60; used.
   * @return sendTime
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SEND_TIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getSendTime() {
    return sendTime;
  }


  @JsonProperty(JSON_PROPERTY_SEND_TIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSendTime(Integer sendTime) {
    this.sendTime = sendTime;
  }


  public CombinationsInner fromName(Integer fromName) {
    
    this.fromName = fromName;
    return this;
  }

   /**
   * The index of &#x60;variate_settings.from_names&#x60; used.
   * @return fromName
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FROM_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getFromName() {
    return fromName;
  }


  @JsonProperty(JSON_PROPERTY_FROM_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFromName(Integer fromName) {
    this.fromName = fromName;
  }


  public CombinationsInner replyTo(Integer replyTo) {
    
    this.replyTo = replyTo;
    return this;
  }

   /**
   * The index of &#x60;variate_settings.reply_to_addresses&#x60; used.
   * @return replyTo
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_REPLY_TO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getReplyTo() {
    return replyTo;
  }


  @JsonProperty(JSON_PROPERTY_REPLY_TO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setReplyTo(Integer replyTo) {
    this.replyTo = replyTo;
  }


  public CombinationsInner contentDescription(Integer contentDescription) {
    
    this.contentDescription = contentDescription;
    return this;
  }

   /**
   * The index of &#x60;variate_settings.contents&#x60; used.
   * @return contentDescription
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CONTENT_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getContentDescription() {
    return contentDescription;
  }


  @JsonProperty(JSON_PROPERTY_CONTENT_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setContentDescription(Integer contentDescription) {
    this.contentDescription = contentDescription;
  }


  public CombinationsInner recipients(Integer recipients) {
    
    this.recipients = recipients;
    return this;
  }

   /**
   * The number of recipients for this combination.
   * @return recipients
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_RECIPIENTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getRecipients() {
    return recipients;
  }


  @JsonProperty(JSON_PROPERTY_RECIPIENTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRecipients(Integer recipients) {
    this.recipients = recipients;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CombinationsInner combinationsInner = (CombinationsInner) o;
    return Objects.equals(this.id, combinationsInner.id) &&
        Objects.equals(this.subjectLine, combinationsInner.subjectLine) &&
        Objects.equals(this.sendTime, combinationsInner.sendTime) &&
        Objects.equals(this.fromName, combinationsInner.fromName) &&
        Objects.equals(this.replyTo, combinationsInner.replyTo) &&
        Objects.equals(this.contentDescription, combinationsInner.contentDescription) &&
        Objects.equals(this.recipients, combinationsInner.recipients);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, subjectLine, sendTime, fromName, replyTo, contentDescription, recipients);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CombinationsInner {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    subjectLine: ").append(toIndentedString(subjectLine)).append("\n");
    sb.append("    sendTime: ").append(toIndentedString(sendTime)).append("\n");
    sb.append("    fromName: ").append(toIndentedString(fromName)).append("\n");
    sb.append("    replyTo: ").append(toIndentedString(replyTo)).append("\n");
    sb.append("    contentDescription: ").append(toIndentedString(contentDescription)).append("\n");
    sb.append("    recipients: ").append(toIndentedString(recipients)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

