/*
 * Mailchimp Marketing API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0.55
 * Contact: apihelp@mailchimp.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.erkoristhein.mailchimp.marketing.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.github.erkoristhein.mailchimp.marketing.model.ResourceLink;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * One day&#39;s worth of list activity. Doesn&#39;t include Automation activity.
 */
@JsonPropertyOrder({
  DailyListActivity.JSON_PROPERTY_DAY,
  DailyListActivity.JSON_PROPERTY_EMAILS_SENT,
  DailyListActivity.JSON_PROPERTY_UNIQUE_OPENS,
  DailyListActivity.JSON_PROPERTY_RECIPIENT_CLICKS,
  DailyListActivity.JSON_PROPERTY_HARD_BOUNCE,
  DailyListActivity.JSON_PROPERTY_SOFT_BOUNCE,
  DailyListActivity.JSON_PROPERTY_SUBS,
  DailyListActivity.JSON_PROPERTY_UNSUBS,
  DailyListActivity.JSON_PROPERTY_OTHER_ADDS,
  DailyListActivity.JSON_PROPERTY_OTHER_REMOVES,
  DailyListActivity.JSON_PROPERTY_LINKS
})
@JsonTypeName("Daily_List_Activity")
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-26T16:39:59.516441+03:00[Europe/Helsinki]", comments = "Generator version: 7.5.0")
public class DailyListActivity {
  public static final String JSON_PROPERTY_DAY = "day";
  private String day;

  public static final String JSON_PROPERTY_EMAILS_SENT = "emails_sent";
  private Integer emailsSent;

  public static final String JSON_PROPERTY_UNIQUE_OPENS = "unique_opens";
  private Integer uniqueOpens;

  public static final String JSON_PROPERTY_RECIPIENT_CLICKS = "recipient_clicks";
  private Integer recipientClicks;

  public static final String JSON_PROPERTY_HARD_BOUNCE = "hard_bounce";
  private Integer hardBounce;

  public static final String JSON_PROPERTY_SOFT_BOUNCE = "soft_bounce";
  private Integer softBounce;

  public static final String JSON_PROPERTY_SUBS = "subs";
  private Integer subs;

  public static final String JSON_PROPERTY_UNSUBS = "unsubs";
  private Integer unsubs;

  public static final String JSON_PROPERTY_OTHER_ADDS = "other_adds";
  private Integer otherAdds;

  public static final String JSON_PROPERTY_OTHER_REMOVES = "other_removes";
  private Integer otherRemoves;

  public static final String JSON_PROPERTY_LINKS = "_links";
  private List<ResourceLink> links = new ArrayList<>();

  public DailyListActivity() {
  }

  @JsonCreator
  public DailyListActivity(
    @JsonProperty(JSON_PROPERTY_DAY) String day, 
    @JsonProperty(JSON_PROPERTY_EMAILS_SENT) Integer emailsSent, 
    @JsonProperty(JSON_PROPERTY_UNIQUE_OPENS) Integer uniqueOpens, 
    @JsonProperty(JSON_PROPERTY_RECIPIENT_CLICKS) Integer recipientClicks, 
    @JsonProperty(JSON_PROPERTY_HARD_BOUNCE) Integer hardBounce, 
    @JsonProperty(JSON_PROPERTY_SOFT_BOUNCE) Integer softBounce, 
    @JsonProperty(JSON_PROPERTY_SUBS) Integer subs, 
    @JsonProperty(JSON_PROPERTY_UNSUBS) Integer unsubs, 
    @JsonProperty(JSON_PROPERTY_OTHER_ADDS) Integer otherAdds, 
    @JsonProperty(JSON_PROPERTY_OTHER_REMOVES) Integer otherRemoves, 
    @JsonProperty(JSON_PROPERTY_LINKS) List<ResourceLink> links
  ) {
    this();
    this.day = day;
    this.emailsSent = emailsSent;
    this.uniqueOpens = uniqueOpens;
    this.recipientClicks = recipientClicks;
    this.hardBounce = hardBounce;
    this.softBounce = softBounce;
    this.subs = subs;
    this.unsubs = unsubs;
    this.otherAdds = otherAdds;
    this.otherRemoves = otherRemoves;
    this.links = links;
  }

   /**
   * The date for the activity summary.
   * @return day
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DAY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDay() {
    return day;
  }




   /**
   * The total number of emails sent on the date for the activity summary.
   * @return emailsSent
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_EMAILS_SENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getEmailsSent() {
    return emailsSent;
  }




   /**
   * The number of unique opens.
   * @return uniqueOpens
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_UNIQUE_OPENS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getUniqueOpens() {
    return uniqueOpens;
  }




   /**
   * The number of clicks.
   * @return recipientClicks
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_RECIPIENT_CLICKS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getRecipientClicks() {
    return recipientClicks;
  }




   /**
   * The number of hard bounces.
   * @return hardBounce
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_HARD_BOUNCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getHardBounce() {
    return hardBounce;
  }




   /**
   * The number of soft bounces
   * @return softBounce
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SOFT_BOUNCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getSoftBounce() {
    return softBounce;
  }




   /**
   * The number of subscribes.
   * @return subs
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SUBS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getSubs() {
    return subs;
  }




   /**
   * The number of unsubscribes.
   * @return unsubs
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_UNSUBS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getUnsubs() {
    return unsubs;
  }




   /**
   * The number of subscribers who may have been added outside of the [double opt-in process](https://mailchimp.com/help/about-double-opt-in/), such as imports or API activity.
   * @return otherAdds
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_OTHER_ADDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getOtherAdds() {
    return otherAdds;
  }




   /**
   * The number of subscribers who may have been removed outside of unsubscribing or reporting an email as spam (for example, deleted subscribers).
   * @return otherRemoves
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_OTHER_REMOVES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getOtherRemoves() {
    return otherRemoves;
  }




   /**
   * A list of link types and descriptions for the API schema documents.
   * @return links
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LINKS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<ResourceLink> getLinks() {
    return links;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DailyListActivity dailyListActivity = (DailyListActivity) o;
    return Objects.equals(this.day, dailyListActivity.day) &&
        Objects.equals(this.emailsSent, dailyListActivity.emailsSent) &&
        Objects.equals(this.uniqueOpens, dailyListActivity.uniqueOpens) &&
        Objects.equals(this.recipientClicks, dailyListActivity.recipientClicks) &&
        Objects.equals(this.hardBounce, dailyListActivity.hardBounce) &&
        Objects.equals(this.softBounce, dailyListActivity.softBounce) &&
        Objects.equals(this.subs, dailyListActivity.subs) &&
        Objects.equals(this.unsubs, dailyListActivity.unsubs) &&
        Objects.equals(this.otherAdds, dailyListActivity.otherAdds) &&
        Objects.equals(this.otherRemoves, dailyListActivity.otherRemoves) &&
        Objects.equals(this.links, dailyListActivity.links);
  }

  @Override
  public int hashCode() {
    return Objects.hash(day, emailsSent, uniqueOpens, recipientClicks, hardBounce, softBounce, subs, unsubs, otherAdds, otherRemoves, links);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DailyListActivity {\n");
    sb.append("    day: ").append(toIndentedString(day)).append("\n");
    sb.append("    emailsSent: ").append(toIndentedString(emailsSent)).append("\n");
    sb.append("    uniqueOpens: ").append(toIndentedString(uniqueOpens)).append("\n");
    sb.append("    recipientClicks: ").append(toIndentedString(recipientClicks)).append("\n");
    sb.append("    hardBounce: ").append(toIndentedString(hardBounce)).append("\n");
    sb.append("    softBounce: ").append(toIndentedString(softBounce)).append("\n");
    sb.append("    subs: ").append(toIndentedString(subs)).append("\n");
    sb.append("    unsubs: ").append(toIndentedString(unsubs)).append("\n");
    sb.append("    otherAdds: ").append(toIndentedString(otherAdds)).append("\n");
    sb.append("    otherRemoves: ").append(toIndentedString(otherRemoves)).append("\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

