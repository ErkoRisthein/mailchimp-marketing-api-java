/*
 * Mailchimp Marketing API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0.55
 * Contact: apihelp@mailchimp.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.erkoristhein.mailchimp.marketing.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.github.erkoristhein.mailchimp.marketing.model.ResourceLink;
import io.github.erkoristhein.mailchimp.marketing.model.VariateContentsInner;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * The HTML and plain-text content for a campaign.
 */
@JsonPropertyOrder({
  CampaignContent.JSON_PROPERTY_VARIATE_CONTENTS,
  CampaignContent.JSON_PROPERTY_PLAIN_TEXT,
  CampaignContent.JSON_PROPERTY_HTML,
  CampaignContent.JSON_PROPERTY_ARCHIVE_HTML,
  CampaignContent.JSON_PROPERTY_LINKS
})
@JsonTypeName("Campaign_Content")
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-26T16:39:59.516441+03:00[Europe/Helsinki]", comments = "Generator version: 7.5.0")
public class CampaignContent {
  public static final String JSON_PROPERTY_VARIATE_CONTENTS = "variate_contents";
  private List<VariateContentsInner> variateContents = new ArrayList<>();

  public static final String JSON_PROPERTY_PLAIN_TEXT = "plain_text";
  private String plainText;

  public static final String JSON_PROPERTY_HTML = "html";
  private String html;

  public static final String JSON_PROPERTY_ARCHIVE_HTML = "archive_html";
  private String archiveHtml;

  public static final String JSON_PROPERTY_LINKS = "_links";
  private List<ResourceLink> links = new ArrayList<>();

  public CampaignContent() {
  }

  @JsonCreator
  public CampaignContent(
    @JsonProperty(JSON_PROPERTY_LINKS) List<ResourceLink> links
  ) {
    this();
    this.links = links;
  }

  public CampaignContent variateContents(List<VariateContentsInner> variateContents) {
    
    this.variateContents = variateContents;
    return this;
  }

  public CampaignContent addVariateContentsItem(VariateContentsInner variateContentsItem) {
    if (this.variateContents == null) {
      this.variateContents = new ArrayList<>();
    }
    this.variateContents.add(variateContentsItem);
    return this;
  }

   /**
   * Content options for multivariate campaigns.
   * @return variateContents
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_VARIATE_CONTENTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<VariateContentsInner> getVariateContents() {
    return variateContents;
  }


  @JsonProperty(JSON_PROPERTY_VARIATE_CONTENTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setVariateContents(List<VariateContentsInner> variateContents) {
    this.variateContents = variateContents;
  }


  public CampaignContent plainText(String plainText) {
    
    this.plainText = plainText;
    return this;
  }

   /**
   * The plain-text portion of the campaign. If left unspecified, we&#39;ll generate this automatically.
   * @return plainText
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PLAIN_TEXT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getPlainText() {
    return plainText;
  }


  @JsonProperty(JSON_PROPERTY_PLAIN_TEXT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPlainText(String plainText) {
    this.plainText = plainText;
  }


  public CampaignContent html(String html) {
    
    this.html = html;
    return this;
  }

   /**
   * The raw HTML for the campaign.
   * @return html
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_HTML)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getHtml() {
    return html;
  }


  @JsonProperty(JSON_PROPERTY_HTML)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setHtml(String html) {
    this.html = html;
  }


  public CampaignContent archiveHtml(String archiveHtml) {
    
    this.archiveHtml = archiveHtml;
    return this;
  }

   /**
   * The Archive HTML for the campaign.
   * @return archiveHtml
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ARCHIVE_HTML)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getArchiveHtml() {
    return archiveHtml;
  }


  @JsonProperty(JSON_PROPERTY_ARCHIVE_HTML)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setArchiveHtml(String archiveHtml) {
    this.archiveHtml = archiveHtml;
  }


   /**
   * A list of link types and descriptions for the API schema documents.
   * @return links
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LINKS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<ResourceLink> getLinks() {
    return links;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CampaignContent campaignContent = (CampaignContent) o;
    return Objects.equals(this.variateContents, campaignContent.variateContents) &&
        Objects.equals(this.plainText, campaignContent.plainText) &&
        Objects.equals(this.html, campaignContent.html) &&
        Objects.equals(this.archiveHtml, campaignContent.archiveHtml) &&
        Objects.equals(this.links, campaignContent.links);
  }

  @Override
  public int hashCode() {
    return Objects.hash(variateContents, plainText, html, archiveHtml, links);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CampaignContent {\n");
    sb.append("    variateContents: ").append(toIndentedString(variateContents)).append("\n");
    sb.append("    plainText: ").append(toIndentedString(plainText)).append("\n");
    sb.append("    html: ").append(toIndentedString(html)).append("\n");
    sb.append("    archiveHtml: ").append(toIndentedString(archiveHtml)).append("\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

