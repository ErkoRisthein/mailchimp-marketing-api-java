/*
 * Mailchimp Marketing API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0.55
 * Contact: apihelp@mailchimp.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.erkoristhein.mailchimp.marketing.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.github.erkoristhein.mailchimp.marketing.model.GetAllFacebookAds200ResponseFacebookAdsInnerAllOfAudienceEmailSource;
import io.github.erkoristhein.mailchimp.marketing.model.GetAllFacebookAds200ResponseFacebookAdsInnerAllOfAudienceTargetingSpecs;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Audience settings
 */
@JsonPropertyOrder({
  GetAllFacebookAds200ResponseFacebookAdsInnerAllOfAudience.JSON_PROPERTY_TYPE,
  GetAllFacebookAds200ResponseFacebookAdsInnerAllOfAudience.JSON_PROPERTY_SOURCE_TYPE,
  GetAllFacebookAds200ResponseFacebookAdsInnerAllOfAudience.JSON_PROPERTY_EMAIL_SOURCE,
  GetAllFacebookAds200ResponseFacebookAdsInnerAllOfAudience.JSON_PROPERTY_INCLUDE_SOURCE_IN_TARGET,
  GetAllFacebookAds200ResponseFacebookAdsInnerAllOfAudience.JSON_PROPERTY_LOOKALIKE_COUNTRY_CODE,
  GetAllFacebookAds200ResponseFacebookAdsInnerAllOfAudience.JSON_PROPERTY_TARGETING_SPECS
})
@JsonTypeName("getAllFacebookAds_200_response_facebook_ads_inner_allOf_audience")
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-26T16:39:59.516441+03:00[Europe/Helsinki]", comments = "Generator version: 7.5.0")
public class GetAllFacebookAds200ResponseFacebookAdsInnerAllOfAudience {
  /**
   * Type of the audience
   */
  public enum TypeEnum {
    CUSTOM_AUDIENCE("Custom Audience"),
    
    LOOKALIKE_AUDIENCE("Lookalike Audience"),
    
    INTEREST_BASED_AUDIENCE("Interest-based Audience");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_TYPE = "type";
  private TypeEnum type;

  /**
   * List or Facebook based audience
   */
  public enum SourceTypeEnum {
    FACEBOOK("facebook"),
    
    LIST("list");

    private String value;

    SourceTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static SourceTypeEnum fromValue(String value) {
      for (SourceTypeEnum b : SourceTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_SOURCE_TYPE = "source_type";
  private SourceTypeEnum sourceType;

  public static final String JSON_PROPERTY_EMAIL_SOURCE = "email_source";
  private GetAllFacebookAds200ResponseFacebookAdsInnerAllOfAudienceEmailSource emailSource;

  public static final String JSON_PROPERTY_INCLUDE_SOURCE_IN_TARGET = "include_source_in_target";
  private Boolean includeSourceInTarget;

  public static final String JSON_PROPERTY_LOOKALIKE_COUNTRY_CODE = "lookalike_country_code";
  private String lookalikeCountryCode;

  public static final String JSON_PROPERTY_TARGETING_SPECS = "targeting_specs";
  private GetAllFacebookAds200ResponseFacebookAdsInnerAllOfAudienceTargetingSpecs targetingSpecs;

  public GetAllFacebookAds200ResponseFacebookAdsInnerAllOfAudience() {
  }

  public GetAllFacebookAds200ResponseFacebookAdsInnerAllOfAudience type(TypeEnum type) {
    
    this.type = type;
    return this;
  }

   /**
   * Type of the audience
   * @return type
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public TypeEnum getType() {
    return type;
  }


  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setType(TypeEnum type) {
    this.type = type;
  }


  public GetAllFacebookAds200ResponseFacebookAdsInnerAllOfAudience sourceType(SourceTypeEnum sourceType) {
    
    this.sourceType = sourceType;
    return this;
  }

   /**
   * List or Facebook based audience
   * @return sourceType
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SOURCE_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public SourceTypeEnum getSourceType() {
    return sourceType;
  }


  @JsonProperty(JSON_PROPERTY_SOURCE_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSourceType(SourceTypeEnum sourceType) {
    this.sourceType = sourceType;
  }


  public GetAllFacebookAds200ResponseFacebookAdsInnerAllOfAudience emailSource(GetAllFacebookAds200ResponseFacebookAdsInnerAllOfAudienceEmailSource emailSource) {
    
    this.emailSource = emailSource;
    return this;
  }

   /**
   * Get emailSource
   * @return emailSource
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_EMAIL_SOURCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public GetAllFacebookAds200ResponseFacebookAdsInnerAllOfAudienceEmailSource getEmailSource() {
    return emailSource;
  }


  @JsonProperty(JSON_PROPERTY_EMAIL_SOURCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEmailSource(GetAllFacebookAds200ResponseFacebookAdsInnerAllOfAudienceEmailSource emailSource) {
    this.emailSource = emailSource;
  }


  public GetAllFacebookAds200ResponseFacebookAdsInnerAllOfAudience includeSourceInTarget(Boolean includeSourceInTarget) {
    
    this.includeSourceInTarget = includeSourceInTarget;
    return this;
  }

   /**
   * To include list contacts as part of audience
   * @return includeSourceInTarget
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_INCLUDE_SOURCE_IN_TARGET)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getIncludeSourceInTarget() {
    return includeSourceInTarget;
  }


  @JsonProperty(JSON_PROPERTY_INCLUDE_SOURCE_IN_TARGET)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIncludeSourceInTarget(Boolean includeSourceInTarget) {
    this.includeSourceInTarget = includeSourceInTarget;
  }


  public GetAllFacebookAds200ResponseFacebookAdsInnerAllOfAudience lookalikeCountryCode(String lookalikeCountryCode) {
    
    this.lookalikeCountryCode = lookalikeCountryCode;
    return this;
  }

   /**
   * To find similar audience in given country
   * @return lookalikeCountryCode
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LOOKALIKE_COUNTRY_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getLookalikeCountryCode() {
    return lookalikeCountryCode;
  }


  @JsonProperty(JSON_PROPERTY_LOOKALIKE_COUNTRY_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLookalikeCountryCode(String lookalikeCountryCode) {
    this.lookalikeCountryCode = lookalikeCountryCode;
  }


  public GetAllFacebookAds200ResponseFacebookAdsInnerAllOfAudience targetingSpecs(GetAllFacebookAds200ResponseFacebookAdsInnerAllOfAudienceTargetingSpecs targetingSpecs) {
    
    this.targetingSpecs = targetingSpecs;
    return this;
  }

   /**
   * Get targetingSpecs
   * @return targetingSpecs
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TARGETING_SPECS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public GetAllFacebookAds200ResponseFacebookAdsInnerAllOfAudienceTargetingSpecs getTargetingSpecs() {
    return targetingSpecs;
  }


  @JsonProperty(JSON_PROPERTY_TARGETING_SPECS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTargetingSpecs(GetAllFacebookAds200ResponseFacebookAdsInnerAllOfAudienceTargetingSpecs targetingSpecs) {
    this.targetingSpecs = targetingSpecs;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetAllFacebookAds200ResponseFacebookAdsInnerAllOfAudience getAllFacebookAds200ResponseFacebookAdsInnerAllOfAudience = (GetAllFacebookAds200ResponseFacebookAdsInnerAllOfAudience) o;
    return Objects.equals(this.type, getAllFacebookAds200ResponseFacebookAdsInnerAllOfAudience.type) &&
        Objects.equals(this.sourceType, getAllFacebookAds200ResponseFacebookAdsInnerAllOfAudience.sourceType) &&
        Objects.equals(this.emailSource, getAllFacebookAds200ResponseFacebookAdsInnerAllOfAudience.emailSource) &&
        Objects.equals(this.includeSourceInTarget, getAllFacebookAds200ResponseFacebookAdsInnerAllOfAudience.includeSourceInTarget) &&
        Objects.equals(this.lookalikeCountryCode, getAllFacebookAds200ResponseFacebookAdsInnerAllOfAudience.lookalikeCountryCode) &&
        Objects.equals(this.targetingSpecs, getAllFacebookAds200ResponseFacebookAdsInnerAllOfAudience.targetingSpecs);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, sourceType, emailSource, includeSourceInTarget, lookalikeCountryCode, targetingSpecs);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetAllFacebookAds200ResponseFacebookAdsInnerAllOfAudience {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    sourceType: ").append(toIndentedString(sourceType)).append("\n");
    sb.append("    emailSource: ").append(toIndentedString(emailSource)).append("\n");
    sb.append("    includeSourceInTarget: ").append(toIndentedString(includeSourceInTarget)).append("\n");
    sb.append("    lookalikeCountryCode: ").append(toIndentedString(lookalikeCountryCode)).append("\n");
    sb.append("    targetingSpecs: ").append(toIndentedString(targetingSpecs)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

