/*
 * Mailchimp Marketing API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0.55
 * Contact: apihelp@mailchimp.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.erkoristhein.mailchimp.marketing.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.github.erkoristhein.mailchimp.marketing.model.TemplateContent1;
import io.github.erkoristhein.mailchimp.marketing.model.UploadArchive;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * VariateContentsInner1
 */
@JsonPropertyOrder({
  VariateContentsInner1.JSON_PROPERTY_CONTENT_LABEL,
  VariateContentsInner1.JSON_PROPERTY_PLAIN_TEXT,
  VariateContentsInner1.JSON_PROPERTY_HTML,
  VariateContentsInner1.JSON_PROPERTY_URL,
  VariateContentsInner1.JSON_PROPERTY_TEMPLATE,
  VariateContentsInner1.JSON_PROPERTY_ARCHIVE
})
@JsonTypeName("Variate_Contents_inner_1")
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-26T16:39:59.516441+03:00[Europe/Helsinki]", comments = "Generator version: 7.5.0")
public class VariateContentsInner1 {
  public static final String JSON_PROPERTY_CONTENT_LABEL = "content_label";
  private String contentLabel;

  public static final String JSON_PROPERTY_PLAIN_TEXT = "plain_text";
  private String plainText;

  public static final String JSON_PROPERTY_HTML = "html";
  private String html;

  public static final String JSON_PROPERTY_URL = "url";
  private String url;

  public static final String JSON_PROPERTY_TEMPLATE = "template";
  private TemplateContent1 template;

  public static final String JSON_PROPERTY_ARCHIVE = "archive";
  private UploadArchive archive;

  public VariateContentsInner1() {
  }

  public VariateContentsInner1 contentLabel(String contentLabel) {
    
    this.contentLabel = contentLabel;
    return this;
  }

   /**
   * The label used to identify the content option.
   * @return contentLabel
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_CONTENT_LABEL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getContentLabel() {
    return contentLabel;
  }


  @JsonProperty(JSON_PROPERTY_CONTENT_LABEL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setContentLabel(String contentLabel) {
    this.contentLabel = contentLabel;
  }


  public VariateContentsInner1 plainText(String plainText) {
    
    this.plainText = plainText;
    return this;
  }

   /**
   * The plain-text portion of the campaign. If left unspecified, we&#39;ll generate this automatically.
   * @return plainText
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PLAIN_TEXT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getPlainText() {
    return plainText;
  }


  @JsonProperty(JSON_PROPERTY_PLAIN_TEXT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPlainText(String plainText) {
    this.plainText = plainText;
  }


  public VariateContentsInner1 html(String html) {
    
    this.html = html;
    return this;
  }

   /**
   * The raw HTML for the campaign.
   * @return html
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_HTML)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getHtml() {
    return html;
  }


  @JsonProperty(JSON_PROPERTY_HTML)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setHtml(String html) {
    this.html = html;
  }


  public VariateContentsInner1 url(String url) {
    
    this.url = url;
    return this;
  }

   /**
   * When importing a campaign, the URL for the HTML.
   * @return url
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_URL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getUrl() {
    return url;
  }


  @JsonProperty(JSON_PROPERTY_URL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUrl(String url) {
    this.url = url;
  }


  public VariateContentsInner1 template(TemplateContent1 template) {
    
    this.template = template;
    return this;
  }

   /**
   * Get template
   * @return template
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TEMPLATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public TemplateContent1 getTemplate() {
    return template;
  }


  @JsonProperty(JSON_PROPERTY_TEMPLATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTemplate(TemplateContent1 template) {
    this.template = template;
  }


  public VariateContentsInner1 archive(UploadArchive archive) {
    
    this.archive = archive;
    return this;
  }

   /**
   * Get archive
   * @return archive
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ARCHIVE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public UploadArchive getArchive() {
    return archive;
  }


  @JsonProperty(JSON_PROPERTY_ARCHIVE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setArchive(UploadArchive archive) {
    this.archive = archive;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VariateContentsInner1 variateContentsInner1 = (VariateContentsInner1) o;
    return Objects.equals(this.contentLabel, variateContentsInner1.contentLabel) &&
        Objects.equals(this.plainText, variateContentsInner1.plainText) &&
        Objects.equals(this.html, variateContentsInner1.html) &&
        Objects.equals(this.url, variateContentsInner1.url) &&
        Objects.equals(this.template, variateContentsInner1.template) &&
        Objects.equals(this.archive, variateContentsInner1.archive);
  }

  @Override
  public int hashCode() {
    return Objects.hash(contentLabel, plainText, html, url, template, archive);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VariateContentsInner1 {\n");
    sb.append("    contentLabel: ").append(toIndentedString(contentLabel)).append("\n");
    sb.append("    plainText: ").append(toIndentedString(plainText)).append("\n");
    sb.append("    html: ").append(toIndentedString(html)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    template: ").append(toIndentedString(template)).append("\n");
    sb.append("    archive: ").append(toIndentedString(archive)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

