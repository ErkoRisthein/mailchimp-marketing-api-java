/*
 * Mailchimp Marketing API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0.55
 * Contact: apihelp@mailchimp.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.erkoristhein.mailchimp.marketing.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.github.erkoristhein.mailchimp.marketing.model.AbandonedBrowseAutomation;
import io.github.erkoristhein.mailchimp.marketing.model.AbandonedCartAutomation;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Details for the automations attached to this store.
 */
@JsonPropertyOrder({
  Automations.JSON_PROPERTY_ABANDONED_CART,
  Automations.JSON_PROPERTY_ABANDONED_BROWSE
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-26T16:39:59.516441+03:00[Europe/Helsinki]", comments = "Generator version: 7.5.0")
public class Automations {
  public static final String JSON_PROPERTY_ABANDONED_CART = "abandoned_cart";
  private AbandonedCartAutomation abandonedCart;

  public static final String JSON_PROPERTY_ABANDONED_BROWSE = "abandoned_browse";
  private AbandonedBrowseAutomation abandonedBrowse;

  public Automations() {
  }

  public Automations abandonedCart(AbandonedCartAutomation abandonedCart) {
    
    this.abandonedCart = abandonedCart;
    return this;
  }

   /**
   * Get abandonedCart
   * @return abandonedCart
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ABANDONED_CART)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public AbandonedCartAutomation getAbandonedCart() {
    return abandonedCart;
  }


  @JsonProperty(JSON_PROPERTY_ABANDONED_CART)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAbandonedCart(AbandonedCartAutomation abandonedCart) {
    this.abandonedCart = abandonedCart;
  }


  public Automations abandonedBrowse(AbandonedBrowseAutomation abandonedBrowse) {
    
    this.abandonedBrowse = abandonedBrowse;
    return this;
  }

   /**
   * Get abandonedBrowse
   * @return abandonedBrowse
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ABANDONED_BROWSE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public AbandonedBrowseAutomation getAbandonedBrowse() {
    return abandonedBrowse;
  }


  @JsonProperty(JSON_PROPERTY_ABANDONED_BROWSE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAbandonedBrowse(AbandonedBrowseAutomation abandonedBrowse) {
    this.abandonedBrowse = abandonedBrowse;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Automations automations = (Automations) o;
    return Objects.equals(this.abandonedCart, automations.abandonedCart) &&
        Objects.equals(this.abandonedBrowse, automations.abandonedBrowse);
  }

  @Override
  public int hashCode() {
    return Objects.hash(abandonedCart, abandonedBrowse);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Automations {\n");
    sb.append("    abandonedCart: ").append(toIndentedString(abandonedCart)).append("\n");
    sb.append("    abandonedBrowse: ").append(toIndentedString(abandonedBrowse)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

