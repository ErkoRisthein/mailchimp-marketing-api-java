/*
 * Mailchimp Marketing API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0.81
 * Contact: apihelp@mailchimp.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.erkoristhein.mailchimp.marketing.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.math.BigDecimal;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * E-Commerce stats for a campaign.
 */
@JsonPropertyOrder({
  ECommerceReport.JSON_PROPERTY_TOTAL_ORDERS,
  ECommerceReport.JSON_PROPERTY_TOTAL_SPENT,
  ECommerceReport.JSON_PROPERTY_TOTAL_REVENUE
})
@JsonTypeName("E_Commerce_Report")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-02-03T13:08:30.305646+02:00[Europe/Tallinn]")
public class ECommerceReport {
  public static final String JSON_PROPERTY_TOTAL_ORDERS = "total_orders";
  private Integer totalOrders;

  public static final String JSON_PROPERTY_TOTAL_SPENT = "total_spent";
  private BigDecimal totalSpent;

  public static final String JSON_PROPERTY_TOTAL_REVENUE = "total_revenue";
  private BigDecimal totalRevenue;

  public ECommerceReport() {
  }

  @JsonCreator
  public ECommerceReport(
    @JsonProperty(JSON_PROPERTY_TOTAL_ORDERS) Integer totalOrders, 
    @JsonProperty(JSON_PROPERTY_TOTAL_SPENT) BigDecimal totalSpent, 
    @JsonProperty(JSON_PROPERTY_TOTAL_REVENUE) BigDecimal totalRevenue
  ) {
    this();
    this.totalOrders = totalOrders;
    this.totalSpent = totalSpent;
    this.totalRevenue = totalRevenue;
  }

   /**
   * The total orders for a campaign.
   * @return totalOrders
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TOTAL_ORDERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getTotalOrders() {
    return totalOrders;
  }




   /**
   * The total spent for a campaign. Calculated as the sum of all order totals with no deductions.
   * @return totalSpent
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TOTAL_SPENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getTotalSpent() {
    return totalSpent;
  }




   /**
   * The total revenue for a campaign. Calculated as the sum of all order totals minus shipping and tax totals.
   * @return totalRevenue
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TOTAL_REVENUE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getTotalRevenue() {
    return totalRevenue;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ECommerceReport eCommerceReport = (ECommerceReport) o;
    return Objects.equals(this.totalOrders, eCommerceReport.totalOrders) &&
        Objects.equals(this.totalSpent, eCommerceReport.totalSpent) &&
        Objects.equals(this.totalRevenue, eCommerceReport.totalRevenue);
  }

  @Override
  public int hashCode() {
    return Objects.hash(totalOrders, totalSpent, totalRevenue);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ECommerceReport {\n");
    sb.append("    totalOrders: ").append(toIndentedString(totalOrders)).append("\n");
    sb.append("    totalSpent: ").append(toIndentedString(totalSpent)).append("\n");
    sb.append("    totalRevenue: ").append(toIndentedString(totalRevenue)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

