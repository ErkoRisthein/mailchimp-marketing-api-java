/*
 * Mailchimp Marketing API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0.55
 * Contact: apihelp@mailchimp.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.erkoristhein.mailchimp.marketing.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.github.erkoristhein.mailchimp.marketing.model.ToNewSubscribers;
import io.github.erkoristhein.mailchimp.marketing.model.ToNonClickers;
import io.github.erkoristhein.mailchimp.marketing.model.ToNonOpeners;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Determines if the campaign qualifies for the Campaign Resend Shortcuts. Only included when query parameter &#x60;include_resend_shortcuts&#x60; is &#x60;true&#x60;.
 */
@JsonPropertyOrder({
  ResendShortcutEligibility.JSON_PROPERTY_TO_NON_OPENERS,
  ResendShortcutEligibility.JSON_PROPERTY_TO_NEW_SUBSCRIBERS,
  ResendShortcutEligibility.JSON_PROPERTY_TO_NON_CLICKERS
})
@JsonTypeName("Resend_Shortcut_Eligibility")
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-26T16:39:59.516441+03:00[Europe/Helsinki]", comments = "Generator version: 7.5.0")
public class ResendShortcutEligibility {
  public static final String JSON_PROPERTY_TO_NON_OPENERS = "to_non_openers";
  private ToNonOpeners toNonOpeners;

  public static final String JSON_PROPERTY_TO_NEW_SUBSCRIBERS = "to_new_subscribers";
  private ToNewSubscribers toNewSubscribers;

  public static final String JSON_PROPERTY_TO_NON_CLICKERS = "to_non_clickers";
  private ToNonClickers toNonClickers;

  public ResendShortcutEligibility() {
  }

  public ResendShortcutEligibility toNonOpeners(ToNonOpeners toNonOpeners) {
    
    this.toNonOpeners = toNonOpeners;
    return this;
  }

   /**
   * Get toNonOpeners
   * @return toNonOpeners
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TO_NON_OPENERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ToNonOpeners getToNonOpeners() {
    return toNonOpeners;
  }


  @JsonProperty(JSON_PROPERTY_TO_NON_OPENERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setToNonOpeners(ToNonOpeners toNonOpeners) {
    this.toNonOpeners = toNonOpeners;
  }


  public ResendShortcutEligibility toNewSubscribers(ToNewSubscribers toNewSubscribers) {
    
    this.toNewSubscribers = toNewSubscribers;
    return this;
  }

   /**
   * Get toNewSubscribers
   * @return toNewSubscribers
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TO_NEW_SUBSCRIBERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ToNewSubscribers getToNewSubscribers() {
    return toNewSubscribers;
  }


  @JsonProperty(JSON_PROPERTY_TO_NEW_SUBSCRIBERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setToNewSubscribers(ToNewSubscribers toNewSubscribers) {
    this.toNewSubscribers = toNewSubscribers;
  }


  public ResendShortcutEligibility toNonClickers(ToNonClickers toNonClickers) {
    
    this.toNonClickers = toNonClickers;
    return this;
  }

   /**
   * Get toNonClickers
   * @return toNonClickers
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TO_NON_CLICKERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ToNonClickers getToNonClickers() {
    return toNonClickers;
  }


  @JsonProperty(JSON_PROPERTY_TO_NON_CLICKERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setToNonClickers(ToNonClickers toNonClickers) {
    this.toNonClickers = toNonClickers;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ResendShortcutEligibility resendShortcutEligibility = (ResendShortcutEligibility) o;
    return Objects.equals(this.toNonOpeners, resendShortcutEligibility.toNonOpeners) &&
        Objects.equals(this.toNewSubscribers, resendShortcutEligibility.toNewSubscribers) &&
        Objects.equals(this.toNonClickers, resendShortcutEligibility.toNonClickers);
  }

  @Override
  public int hashCode() {
    return Objects.hash(toNonOpeners, toNewSubscribers, toNonClickers);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ResendShortcutEligibility {\n");
    sb.append("    toNonOpeners: ").append(toIndentedString(toNonOpeners)).append("\n");
    sb.append("    toNewSubscribers: ").append(toIndentedString(toNewSubscribers)).append("\n");
    sb.append("    toNonClickers: ").append(toIndentedString(toNonClickers)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

