/*
 * Mailchimp Marketing API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0.55
 * Contact: apihelp@mailchimp.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.erkoristhein.mailchimp.marketing.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.math.BigDecimal;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Subscriber location information.
 */
@JsonPropertyOrder({
  Location2.JSON_PROPERTY_LATITUDE,
  Location2.JSON_PROPERTY_LONGITUDE,
  Location2.JSON_PROPERTY_GMTOFF,
  Location2.JSON_PROPERTY_DSTOFF,
  Location2.JSON_PROPERTY_COUNTRY_CODE,
  Location2.JSON_PROPERTY_TIMEZONE,
  Location2.JSON_PROPERTY_REGION
})
@JsonTypeName("Location_2")
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-26T16:39:59.516441+03:00[Europe/Helsinki]", comments = "Generator version: 7.5.0")
public class Location2 {
  public static final String JSON_PROPERTY_LATITUDE = "latitude";
  private BigDecimal latitude;

  public static final String JSON_PROPERTY_LONGITUDE = "longitude";
  private BigDecimal longitude;

  public static final String JSON_PROPERTY_GMTOFF = "gmtoff";
  private Integer gmtoff;

  public static final String JSON_PROPERTY_DSTOFF = "dstoff";
  private Integer dstoff;

  public static final String JSON_PROPERTY_COUNTRY_CODE = "country_code";
  private String countryCode;

  public static final String JSON_PROPERTY_TIMEZONE = "timezone";
  private String timezone;

  public static final String JSON_PROPERTY_REGION = "region";
  private String region;

  public Location2() {
  }

  @JsonCreator
  public Location2(
    @JsonProperty(JSON_PROPERTY_GMTOFF) Integer gmtoff, 
    @JsonProperty(JSON_PROPERTY_DSTOFF) Integer dstoff, 
    @JsonProperty(JSON_PROPERTY_COUNTRY_CODE) String countryCode, 
    @JsonProperty(JSON_PROPERTY_TIMEZONE) String timezone, 
    @JsonProperty(JSON_PROPERTY_REGION) String region
  ) {
    this();
    this.gmtoff = gmtoff;
    this.dstoff = dstoff;
    this.countryCode = countryCode;
    this.timezone = timezone;
    this.region = region;
  }

  public Location2 latitude(BigDecimal latitude) {
    
    this.latitude = latitude;
    return this;
  }

   /**
   * The location latitude.
   * @return latitude
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LATITUDE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getLatitude() {
    return latitude;
  }


  @JsonProperty(JSON_PROPERTY_LATITUDE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLatitude(BigDecimal latitude) {
    this.latitude = latitude;
  }


  public Location2 longitude(BigDecimal longitude) {
    
    this.longitude = longitude;
    return this;
  }

   /**
   * The location longitude.
   * @return longitude
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LONGITUDE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getLongitude() {
    return longitude;
  }


  @JsonProperty(JSON_PROPERTY_LONGITUDE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLongitude(BigDecimal longitude) {
    this.longitude = longitude;
  }


   /**
   * The time difference in hours from GMT.
   * @return gmtoff
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_GMTOFF)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getGmtoff() {
    return gmtoff;
  }




   /**
   * The offset for timezones where daylight saving time is observed.
   * @return dstoff
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DSTOFF)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getDstoff() {
    return dstoff;
  }




   /**
   * The unique code for the location country.
   * @return countryCode
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_COUNTRY_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getCountryCode() {
    return countryCode;
  }




   /**
   * The timezone for the location.
   * @return timezone
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TIMEZONE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getTimezone() {
    return timezone;
  }




   /**
   * The region for the location.
   * @return region
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_REGION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getRegion() {
    return region;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Location2 location2 = (Location2) o;
    return Objects.equals(this.latitude, location2.latitude) &&
        Objects.equals(this.longitude, location2.longitude) &&
        Objects.equals(this.gmtoff, location2.gmtoff) &&
        Objects.equals(this.dstoff, location2.dstoff) &&
        Objects.equals(this.countryCode, location2.countryCode) &&
        Objects.equals(this.timezone, location2.timezone) &&
        Objects.equals(this.region, location2.region);
  }

  @Override
  public int hashCode() {
    return Objects.hash(latitude, longitude, gmtoff, dstoff, countryCode, timezone, region);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Location2 {\n");
    sb.append("    latitude: ").append(toIndentedString(latitude)).append("\n");
    sb.append("    longitude: ").append(toIndentedString(longitude)).append("\n");
    sb.append("    gmtoff: ").append(toIndentedString(gmtoff)).append("\n");
    sb.append("    dstoff: ").append(toIndentedString(dstoff)).append("\n");
    sb.append("    countryCode: ").append(toIndentedString(countryCode)).append("\n");
    sb.append("    timezone: ").append(toIndentedString(timezone)).append("\n");
    sb.append("    region: ").append(toIndentedString(region)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

