/*
 * Mailchimp Marketing API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0.55
 * Contact: apihelp@mailchimp.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.erkoristhein.mailchimp.marketing.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.time.OffsetDateTime;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * TimewarpStatsInner
 */
@JsonPropertyOrder({
  TimewarpStatsInner.JSON_PROPERTY_GMT_OFFSET,
  TimewarpStatsInner.JSON_PROPERTY_OPENS,
  TimewarpStatsInner.JSON_PROPERTY_LAST_OPEN,
  TimewarpStatsInner.JSON_PROPERTY_UNIQUE_OPENS,
  TimewarpStatsInner.JSON_PROPERTY_CLICKS,
  TimewarpStatsInner.JSON_PROPERTY_LAST_CLICK,
  TimewarpStatsInner.JSON_PROPERTY_UNIQUE_CLICKS,
  TimewarpStatsInner.JSON_PROPERTY_BOUNCES
})
@JsonTypeName("Timewarp_Stats_inner")
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-26T16:39:59.516441+03:00[Europe/Helsinki]", comments = "Generator version: 7.5.0")
public class TimewarpStatsInner {
  public static final String JSON_PROPERTY_GMT_OFFSET = "gmt_offset";
  private Integer gmtOffset;

  public static final String JSON_PROPERTY_OPENS = "opens";
  private Integer opens;

  public static final String JSON_PROPERTY_LAST_OPEN = "last_open";
  private OffsetDateTime lastOpen;

  public static final String JSON_PROPERTY_UNIQUE_OPENS = "unique_opens";
  private Integer uniqueOpens;

  public static final String JSON_PROPERTY_CLICKS = "clicks";
  private Integer clicks;

  public static final String JSON_PROPERTY_LAST_CLICK = "last_click";
  private OffsetDateTime lastClick;

  public static final String JSON_PROPERTY_UNIQUE_CLICKS = "unique_clicks";
  private Integer uniqueClicks;

  public static final String JSON_PROPERTY_BOUNCES = "bounces";
  private Integer bounces;

  public TimewarpStatsInner() {
  }

  public TimewarpStatsInner gmtOffset(Integer gmtOffset) {
    
    this.gmtOffset = gmtOffset;
    return this;
  }

   /**
   * For campaigns sent with timewarp, the time zone group the member is apart of.
   * @return gmtOffset
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_GMT_OFFSET)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getGmtOffset() {
    return gmtOffset;
  }


  @JsonProperty(JSON_PROPERTY_GMT_OFFSET)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setGmtOffset(Integer gmtOffset) {
    this.gmtOffset = gmtOffset;
  }


  public TimewarpStatsInner opens(Integer opens) {
    
    this.opens = opens;
    return this;
  }

   /**
   * The number of opens.
   * @return opens
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_OPENS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getOpens() {
    return opens;
  }


  @JsonProperty(JSON_PROPERTY_OPENS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOpens(Integer opens) {
    this.opens = opens;
  }


  public TimewarpStatsInner lastOpen(OffsetDateTime lastOpen) {
    
    this.lastOpen = lastOpen;
    return this;
  }

   /**
   * The date and time of the last open in ISO 8601 format.
   * @return lastOpen
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LAST_OPEN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OffsetDateTime getLastOpen() {
    return lastOpen;
  }


  @JsonProperty(JSON_PROPERTY_LAST_OPEN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLastOpen(OffsetDateTime lastOpen) {
    this.lastOpen = lastOpen;
  }


  public TimewarpStatsInner uniqueOpens(Integer uniqueOpens) {
    
    this.uniqueOpens = uniqueOpens;
    return this;
  }

   /**
   * The number of unique opens.
   * @return uniqueOpens
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_UNIQUE_OPENS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getUniqueOpens() {
    return uniqueOpens;
  }


  @JsonProperty(JSON_PROPERTY_UNIQUE_OPENS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUniqueOpens(Integer uniqueOpens) {
    this.uniqueOpens = uniqueOpens;
  }


  public TimewarpStatsInner clicks(Integer clicks) {
    
    this.clicks = clicks;
    return this;
  }

   /**
   * The number of clicks.
   * @return clicks
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CLICKS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getClicks() {
    return clicks;
  }


  @JsonProperty(JSON_PROPERTY_CLICKS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setClicks(Integer clicks) {
    this.clicks = clicks;
  }


  public TimewarpStatsInner lastClick(OffsetDateTime lastClick) {
    
    this.lastClick = lastClick;
    return this;
  }

   /**
   * The date and time of the last click in ISO 8601 format.
   * @return lastClick
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LAST_CLICK)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OffsetDateTime getLastClick() {
    return lastClick;
  }


  @JsonProperty(JSON_PROPERTY_LAST_CLICK)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLastClick(OffsetDateTime lastClick) {
    this.lastClick = lastClick;
  }


  public TimewarpStatsInner uniqueClicks(Integer uniqueClicks) {
    
    this.uniqueClicks = uniqueClicks;
    return this;
  }

   /**
   * The number of unique clicks.
   * @return uniqueClicks
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_UNIQUE_CLICKS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getUniqueClicks() {
    return uniqueClicks;
  }


  @JsonProperty(JSON_PROPERTY_UNIQUE_CLICKS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUniqueClicks(Integer uniqueClicks) {
    this.uniqueClicks = uniqueClicks;
  }


  public TimewarpStatsInner bounces(Integer bounces) {
    
    this.bounces = bounces;
    return this;
  }

   /**
   * The number of bounces.
   * @return bounces
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_BOUNCES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getBounces() {
    return bounces;
  }


  @JsonProperty(JSON_PROPERTY_BOUNCES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBounces(Integer bounces) {
    this.bounces = bounces;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TimewarpStatsInner timewarpStatsInner = (TimewarpStatsInner) o;
    return Objects.equals(this.gmtOffset, timewarpStatsInner.gmtOffset) &&
        Objects.equals(this.opens, timewarpStatsInner.opens) &&
        Objects.equals(this.lastOpen, timewarpStatsInner.lastOpen) &&
        Objects.equals(this.uniqueOpens, timewarpStatsInner.uniqueOpens) &&
        Objects.equals(this.clicks, timewarpStatsInner.clicks) &&
        Objects.equals(this.lastClick, timewarpStatsInner.lastClick) &&
        Objects.equals(this.uniqueClicks, timewarpStatsInner.uniqueClicks) &&
        Objects.equals(this.bounces, timewarpStatsInner.bounces);
  }

  @Override
  public int hashCode() {
    return Objects.hash(gmtOffset, opens, lastOpen, uniqueOpens, clicks, lastClick, uniqueClicks, bounces);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TimewarpStatsInner {\n");
    sb.append("    gmtOffset: ").append(toIndentedString(gmtOffset)).append("\n");
    sb.append("    opens: ").append(toIndentedString(opens)).append("\n");
    sb.append("    lastOpen: ").append(toIndentedString(lastOpen)).append("\n");
    sb.append("    uniqueOpens: ").append(toIndentedString(uniqueOpens)).append("\n");
    sb.append("    clicks: ").append(toIndentedString(clicks)).append("\n");
    sb.append("    lastClick: ").append(toIndentedString(lastClick)).append("\n");
    sb.append("    uniqueClicks: ").append(toIndentedString(uniqueClicks)).append("\n");
    sb.append("    bounces: ").append(toIndentedString(bounces)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

