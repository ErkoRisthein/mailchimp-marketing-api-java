/*
 * Mailchimp Marketing API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0.81
 * Contact: apihelp@mailchimp.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.erkoristhein.mailchimp.marketing.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.time.OffsetDateTime;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * An individual tweet.
 */
@JsonPropertyOrder({
  TwitterStatus.JSON_PROPERTY_STATUS,
  TwitterStatus.JSON_PROPERTY_SCREEN_NAME,
  TwitterStatus.JSON_PROPERTY_STATUS_ID,
  TwitterStatus.JSON_PROPERTY_DATETIME,
  TwitterStatus.JSON_PROPERTY_IS_RETWEET
})
@JsonTypeName("Twitter_Status")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-02-03T13:08:30.305646+02:00[Europe/Tallinn]")
public class TwitterStatus {
  public static final String JSON_PROPERTY_STATUS = "status";
  private String status;

  public static final String JSON_PROPERTY_SCREEN_NAME = "screen_name";
  private String screenName;

  public static final String JSON_PROPERTY_STATUS_ID = "status_id";
  private String statusId;

  public static final String JSON_PROPERTY_DATETIME = "datetime";
  private OffsetDateTime datetime;

  public static final String JSON_PROPERTY_IS_RETWEET = "is_retweet";
  private Boolean isRetweet;

  public TwitterStatus() {
  }

  @JsonCreator
  public TwitterStatus(
    @JsonProperty(JSON_PROPERTY_STATUS) String status, 
    @JsonProperty(JSON_PROPERTY_SCREEN_NAME) String screenName, 
    @JsonProperty(JSON_PROPERTY_STATUS_ID) String statusId, 
    @JsonProperty(JSON_PROPERTY_DATETIME) OffsetDateTime datetime, 
    @JsonProperty(JSON_PROPERTY_IS_RETWEET) Boolean isRetweet
  ) {
    this();
    this.status = status;
    this.screenName = screenName;
    this.statusId = statusId;
    this.datetime = datetime;
    this.isRetweet = isRetweet;
  }

   /**
   * The body of the tweet.
   * @return status
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_STATUS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getStatus() {
    return status;
  }




   /**
   * The Twitter handle for the author of the tweet.
   * @return screenName
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SCREEN_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getScreenName() {
    return screenName;
  }




   /**
   * The individual id for the tweet.
   * @return statusId
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_STATUS_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getStatusId() {
    return statusId;
  }




   /**
   * A timestamp for the tweet.
   * @return datetime
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DATETIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OffsetDateTime getDatetime() {
    return datetime;
  }




   /**
   * A &#39;true&#39; or &#39;false&#39; status of whether the tweet is a retweet.
   * @return isRetweet
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_IS_RETWEET)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getIsRetweet() {
    return isRetweet;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TwitterStatus twitterStatus = (TwitterStatus) o;
    return Objects.equals(this.status, twitterStatus.status) &&
        Objects.equals(this.screenName, twitterStatus.screenName) &&
        Objects.equals(this.statusId, twitterStatus.statusId) &&
        Objects.equals(this.datetime, twitterStatus.datetime) &&
        Objects.equals(this.isRetweet, twitterStatus.isRetweet);
  }

  @Override
  public int hashCode() {
    return Objects.hash(status, screenName, statusId, datetime, isRetweet);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TwitterStatus {\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    screenName: ").append(toIndentedString(screenName)).append("\n");
    sb.append("    statusId: ").append(toIndentedString(statusId)).append("\n");
    sb.append("    datetime: ").append(toIndentedString(datetime)).append("\n");
    sb.append("    isRetweet: ").append(toIndentedString(isRetweet)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

