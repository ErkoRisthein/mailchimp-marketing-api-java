/*
 * Mailchimp Marketing API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0.81
 * Contact: apihelp@mailchimp.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.erkoristhein.mailchimp.marketing.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.github.erkoristhein.mailchimp.marketing.model.ABTestOptions1;
import io.github.erkoristhein.mailchimp.marketing.model.CampaignSettings3;
import io.github.erkoristhein.mailchimp.marketing.model.CampaignSocialCard;
import io.github.erkoristhein.mailchimp.marketing.model.CampaignTrackingOptions1;
import io.github.erkoristhein.mailchimp.marketing.model.List4;
import io.github.erkoristhein.mailchimp.marketing.model.RSSOptions1;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * A summary of an individual campaign&#39;s settings and content.
 */
@JsonPropertyOrder({
  Campaign1.JSON_PROPERTY_TYPE,
  Campaign1.JSON_PROPERTY_RECIPIENTS,
  Campaign1.JSON_PROPERTY_SETTINGS,
  Campaign1.JSON_PROPERTY_VARIATE_SETTINGS,
  Campaign1.JSON_PROPERTY_TRACKING,
  Campaign1.JSON_PROPERTY_RSS_OPTS,
  Campaign1.JSON_PROPERTY_SOCIAL_CARD,
  Campaign1.JSON_PROPERTY_CONTENT_TYPE
})
@JsonTypeName("Campaign_1")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-02-03T13:08:30.305646+02:00[Europe/Tallinn]")
public class Campaign1 {
  /**
   * There are four types of [campaigns](https://mailchimp.com/help/getting-started-with-campaigns/) you can create in Mailchimp. A/B Split campaigns have been deprecated and variate campaigns should be used instead.
   */
  public enum TypeEnum {
    REGULAR("regular"),
    
    PLAINTEXT("plaintext"),
    
    ABSPLIT("absplit"),
    
    RSS("rss"),
    
    VARIATE("variate");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_TYPE = "type";
  private TypeEnum type;

  public static final String JSON_PROPERTY_RECIPIENTS = "recipients";
  private List4 recipients;

  public static final String JSON_PROPERTY_SETTINGS = "settings";
  private CampaignSettings3 settings;

  public static final String JSON_PROPERTY_VARIATE_SETTINGS = "variate_settings";
  private ABTestOptions1 variateSettings;

  public static final String JSON_PROPERTY_TRACKING = "tracking";
  private CampaignTrackingOptions1 tracking;

  public static final String JSON_PROPERTY_RSS_OPTS = "rss_opts";
  private RSSOptions1 rssOpts;

  public static final String JSON_PROPERTY_SOCIAL_CARD = "social_card";
  private CampaignSocialCard socialCard;

  /**
   * How the campaign&#39;s content is put together. The old drag and drop editor uses &#39;template&#39; while the new editor uses &#39;multichannel&#39;. Defaults to template.
   */
  public enum ContentTypeEnum {
    TEMPLATE("template"),
    
    MULTICHANNEL("multichannel");

    private String value;

    ContentTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static ContentTypeEnum fromValue(String value) {
      for (ContentTypeEnum b : ContentTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_CONTENT_TYPE = "content_type";
  private ContentTypeEnum contentType;

  public Campaign1() {
  }

  public Campaign1 type(TypeEnum type) {
    
    this.type = type;
    return this;
  }

   /**
   * There are four types of [campaigns](https://mailchimp.com/help/getting-started-with-campaigns/) you can create in Mailchimp. A/B Split campaigns have been deprecated and variate campaigns should be used instead.
   * @return type
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public TypeEnum getType() {
    return type;
  }


  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setType(TypeEnum type) {
    this.type = type;
  }


  public Campaign1 recipients(List4 recipients) {
    
    this.recipients = recipients;
    return this;
  }

   /**
   * Get recipients
   * @return recipients
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_RECIPIENTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List4 getRecipients() {
    return recipients;
  }


  @JsonProperty(JSON_PROPERTY_RECIPIENTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRecipients(List4 recipients) {
    this.recipients = recipients;
  }


  public Campaign1 settings(CampaignSettings3 settings) {
    
    this.settings = settings;
    return this;
  }

   /**
   * Get settings
   * @return settings
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SETTINGS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public CampaignSettings3 getSettings() {
    return settings;
  }


  @JsonProperty(JSON_PROPERTY_SETTINGS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSettings(CampaignSettings3 settings) {
    this.settings = settings;
  }


  public Campaign1 variateSettings(ABTestOptions1 variateSettings) {
    
    this.variateSettings = variateSettings;
    return this;
  }

   /**
   * Get variateSettings
   * @return variateSettings
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_VARIATE_SETTINGS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ABTestOptions1 getVariateSettings() {
    return variateSettings;
  }


  @JsonProperty(JSON_PROPERTY_VARIATE_SETTINGS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setVariateSettings(ABTestOptions1 variateSettings) {
    this.variateSettings = variateSettings;
  }


  public Campaign1 tracking(CampaignTrackingOptions1 tracking) {
    
    this.tracking = tracking;
    return this;
  }

   /**
   * Get tracking
   * @return tracking
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TRACKING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public CampaignTrackingOptions1 getTracking() {
    return tracking;
  }


  @JsonProperty(JSON_PROPERTY_TRACKING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTracking(CampaignTrackingOptions1 tracking) {
    this.tracking = tracking;
  }


  public Campaign1 rssOpts(RSSOptions1 rssOpts) {
    
    this.rssOpts = rssOpts;
    return this;
  }

   /**
   * Get rssOpts
   * @return rssOpts
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_RSS_OPTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public RSSOptions1 getRssOpts() {
    return rssOpts;
  }


  @JsonProperty(JSON_PROPERTY_RSS_OPTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRssOpts(RSSOptions1 rssOpts) {
    this.rssOpts = rssOpts;
  }


  public Campaign1 socialCard(CampaignSocialCard socialCard) {
    
    this.socialCard = socialCard;
    return this;
  }

   /**
   * Get socialCard
   * @return socialCard
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SOCIAL_CARD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public CampaignSocialCard getSocialCard() {
    return socialCard;
  }


  @JsonProperty(JSON_PROPERTY_SOCIAL_CARD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSocialCard(CampaignSocialCard socialCard) {
    this.socialCard = socialCard;
  }


  public Campaign1 contentType(ContentTypeEnum contentType) {
    
    this.contentType = contentType;
    return this;
  }

   /**
   * How the campaign&#39;s content is put together. The old drag and drop editor uses &#39;template&#39; while the new editor uses &#39;multichannel&#39;. Defaults to template.
   * @return contentType
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CONTENT_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ContentTypeEnum getContentType() {
    return contentType;
  }


  @JsonProperty(JSON_PROPERTY_CONTENT_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setContentType(ContentTypeEnum contentType) {
    this.contentType = contentType;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Campaign1 campaign1 = (Campaign1) o;
    return Objects.equals(this.type, campaign1.type) &&
        Objects.equals(this.recipients, campaign1.recipients) &&
        Objects.equals(this.settings, campaign1.settings) &&
        Objects.equals(this.variateSettings, campaign1.variateSettings) &&
        Objects.equals(this.tracking, campaign1.tracking) &&
        Objects.equals(this.rssOpts, campaign1.rssOpts) &&
        Objects.equals(this.socialCard, campaign1.socialCard) &&
        Objects.equals(this.contentType, campaign1.contentType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, recipients, settings, variateSettings, tracking, rssOpts, socialCard, contentType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Campaign1 {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    recipients: ").append(toIndentedString(recipients)).append("\n");
    sb.append("    settings: ").append(toIndentedString(settings)).append("\n");
    sb.append("    variateSettings: ").append(toIndentedString(variateSettings)).append("\n");
    sb.append("    tracking: ").append(toIndentedString(tracking)).append("\n");
    sb.append("    rssOpts: ").append(toIndentedString(rssOpts)).append("\n");
    sb.append("    socialCard: ").append(toIndentedString(socialCard)).append("\n");
    sb.append("    contentType: ").append(toIndentedString(contentType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

