package io.github.erkoristhein.mailchimp.marketing.api;

import io.github.erkoristhein.mailchimp.marketing.ApiClient;
import io.github.erkoristhein.mailchimp.marketing.BaseApi;

import io.github.erkoristhein.mailchimp.marketing.model.AutomationEmails;
import io.github.erkoristhein.mailchimp.marketing.model.AutomationWorkflow;
import io.github.erkoristhein.mailchimp.marketing.model.AutomationWorkflow1;
import io.github.erkoristhein.mailchimp.marketing.model.AutomationWorkflowEmail;
import io.github.erkoristhein.mailchimp.marketing.model.GetAutomations200Response;
import io.github.erkoristhein.mailchimp.marketing.model.GetAutomationsIdEmailsIdQueue200Response;
import java.time.OffsetDateTime;
import io.github.erkoristhein.mailchimp.marketing.model.ProblemDetailDocument;
import io.github.erkoristhein.mailchimp.marketing.model.RemovedSubscribers;
import io.github.erkoristhein.mailchimp.marketing.model.SubscriberInAutomationQueue1;
import io.github.erkoristhein.mailchimp.marketing.model.SubscriberInAutomationQueue2;
import io.github.erkoristhein.mailchimp.marketing.model.SubscriberRemovedFromAutomationWorkflow;
import io.github.erkoristhein.mailchimp.marketing.model.UpdateInformationAboutASpecificWorkflowEmail;

import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.util.LinkedMultiValueMap;
import org.springframework.util.MultiValueMap;
import org.springframework.web.client.RestClientException;
import org.springframework.web.client.HttpClientErrorException;
import org.springframework.core.ParameterizedTypeReference;
import org.springframework.core.io.FileSystemResource;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;

@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-26T16:39:59.516441+03:00[Europe/Helsinki]", comments = "Generator version: 7.5.0")
public class AutomationsApi extends BaseApi {

    public AutomationsApi() {
        super(new ApiClient());
    }

    public AutomationsApi(ApiClient apiClient) {
        super(apiClient);
    }

    /**
     * Archive automation
     * Archiving will permanently end your automation and keep the report data. You’ll be able to replicate your archived automation, but you can’t restart it.
     * <p><b>204</b> - Empty Response
     * <p><b>0</b> - An error generated by the Mailchimp API.
     * @param workflowId The unique id for the Automation workflow. (required)
     * @throws RestClientException if an error occurs while attempting to invoke the API
     */
    public void archiveAutomations(String workflowId) throws RestClientException {
        archiveAutomationsWithHttpInfo(workflowId);
    }

    /**
     * Archive automation
     * Archiving will permanently end your automation and keep the report data. You’ll be able to replicate your archived automation, but you can’t restart it.
     * <p><b>204</b> - Empty Response
     * <p><b>0</b> - An error generated by the Mailchimp API.
     * @param workflowId The unique id for the Automation workflow. (required)
     * @return ResponseEntity&lt;Void&gt;
     * @throws RestClientException if an error occurs while attempting to invoke the API
     */
    public ResponseEntity<Void> archiveAutomationsWithHttpInfo(String workflowId) throws RestClientException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'workflowId' is set
        if (workflowId == null) {
            throw new HttpClientErrorException(HttpStatus.BAD_REQUEST, "Missing the required parameter 'workflowId' when calling archiveAutomations");
        }
        
        // create path and map variables
        final Map<String, Object> uriVariables = new HashMap<String, Object>();
        uriVariables.put("workflow_id", workflowId);

        final MultiValueMap<String, String> localVarQueryParams = new LinkedMultiValueMap<String, String>();
        final HttpHeaders localVarHeaderParams = new HttpHeaders();
        final MultiValueMap<String, String> localVarCookieParams = new LinkedMultiValueMap<String, String>();
        final MultiValueMap<String, Object> localVarFormParams = new LinkedMultiValueMap<String, Object>();

        final String[] localVarAccepts = { 
            "application/json", "application/problem+json"
         };
        final List<MediaType> localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        final String[] localVarContentTypes = {  };
        final MediaType localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

        String[] localVarAuthNames = new String[] { "basicAuth" };

        ParameterizedTypeReference<Void> localReturnType = new ParameterizedTypeReference<Void>() {};
        return apiClient.invokeAPI("/automations/{workflow_id}/actions/archive", HttpMethod.POST, uriVariables, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localReturnType);
    }
    /**
     * Delete workflow email
     * Removes an individual classic automation workflow email. Emails from certain workflow types, including the Abandoned Cart Email (abandonedCart) and Product Retargeting Email (abandonedBrowse) Workflows, cannot be deleted.
     * <p><b>204</b> - Empty Response
     * <p><b>0</b> - An error generated by the Mailchimp API.
     * @param workflowId The unique id for the Automation workflow. (required)
     * @param workflowEmailId The unique id for the Automation workflow email. (required)
     * @throws RestClientException if an error occurs while attempting to invoke the API
     */
    public void deleteAutomationsIdEmailsId(String workflowId, String workflowEmailId) throws RestClientException {
        deleteAutomationsIdEmailsIdWithHttpInfo(workflowId, workflowEmailId);
    }

    /**
     * Delete workflow email
     * Removes an individual classic automation workflow email. Emails from certain workflow types, including the Abandoned Cart Email (abandonedCart) and Product Retargeting Email (abandonedBrowse) Workflows, cannot be deleted.
     * <p><b>204</b> - Empty Response
     * <p><b>0</b> - An error generated by the Mailchimp API.
     * @param workflowId The unique id for the Automation workflow. (required)
     * @param workflowEmailId The unique id for the Automation workflow email. (required)
     * @return ResponseEntity&lt;Void&gt;
     * @throws RestClientException if an error occurs while attempting to invoke the API
     */
    public ResponseEntity<Void> deleteAutomationsIdEmailsIdWithHttpInfo(String workflowId, String workflowEmailId) throws RestClientException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'workflowId' is set
        if (workflowId == null) {
            throw new HttpClientErrorException(HttpStatus.BAD_REQUEST, "Missing the required parameter 'workflowId' when calling deleteAutomationsIdEmailsId");
        }
        
        // verify the required parameter 'workflowEmailId' is set
        if (workflowEmailId == null) {
            throw new HttpClientErrorException(HttpStatus.BAD_REQUEST, "Missing the required parameter 'workflowEmailId' when calling deleteAutomationsIdEmailsId");
        }
        
        // create path and map variables
        final Map<String, Object> uriVariables = new HashMap<String, Object>();
        uriVariables.put("workflow_id", workflowId);
        uriVariables.put("workflow_email_id", workflowEmailId);

        final MultiValueMap<String, String> localVarQueryParams = new LinkedMultiValueMap<String, String>();
        final HttpHeaders localVarHeaderParams = new HttpHeaders();
        final MultiValueMap<String, String> localVarCookieParams = new LinkedMultiValueMap<String, String>();
        final MultiValueMap<String, Object> localVarFormParams = new LinkedMultiValueMap<String, Object>();

        final String[] localVarAccepts = { 
            "application/json", "application/problem+json"
         };
        final List<MediaType> localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        final String[] localVarContentTypes = {  };
        final MediaType localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

        String[] localVarAuthNames = new String[] { "basicAuth" };

        ParameterizedTypeReference<Void> localReturnType = new ParameterizedTypeReference<Void>() {};
        return apiClient.invokeAPI("/automations/{workflow_id}/emails/{workflow_email_id}", HttpMethod.DELETE, uriVariables, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localReturnType);
    }
    /**
     * List automations
     * Get a summary of an account&#39;s classic automations.
     * <p><b>200</b> - 
     * <p><b>0</b> - An error generated by the Mailchimp API.
     * @param count The number of records to return. Default value is 10. Maximum value is 1000 (optional, default to 10)
     * @param offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (optional, default to 0)
     * @param fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation. (optional)
     * @param excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation. (optional)
     * @param beforeCreateTime Restrict the response to automations created before this time. Uses the ISO 8601 time format: 2015-10-21T15:41:36+00:00. (optional)
     * @param sinceCreateTime Restrict the response to automations created after this time. Uses the ISO 8601 time format: 2015-10-21T15:41:36+00:00. (optional)
     * @param beforeStartTime Restrict the response to automations started before this time. Uses the ISO 8601 time format: 2015-10-21T15:41:36+00:00. (optional)
     * @param sinceStartTime Restrict the response to automations started after this time. Uses the ISO 8601 time format: 2015-10-21T15:41:36+00:00. (optional)
     * @param status Restrict the results to automations with the specified status. (optional)
     * @return GetAutomations200Response
     * @throws RestClientException if an error occurs while attempting to invoke the API
     */
    public GetAutomations200Response getAutomations(Integer count, Integer offset, List<String> fields, List<String> excludeFields, OffsetDateTime beforeCreateTime, OffsetDateTime sinceCreateTime, OffsetDateTime beforeStartTime, OffsetDateTime sinceStartTime, String status) throws RestClientException {
        return getAutomationsWithHttpInfo(count, offset, fields, excludeFields, beforeCreateTime, sinceCreateTime, beforeStartTime, sinceStartTime, status).getBody();
    }

    /**
     * List automations
     * Get a summary of an account&#39;s classic automations.
     * <p><b>200</b> - 
     * <p><b>0</b> - An error generated by the Mailchimp API.
     * @param count The number of records to return. Default value is 10. Maximum value is 1000 (optional, default to 10)
     * @param offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (optional, default to 0)
     * @param fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation. (optional)
     * @param excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation. (optional)
     * @param beforeCreateTime Restrict the response to automations created before this time. Uses the ISO 8601 time format: 2015-10-21T15:41:36+00:00. (optional)
     * @param sinceCreateTime Restrict the response to automations created after this time. Uses the ISO 8601 time format: 2015-10-21T15:41:36+00:00. (optional)
     * @param beforeStartTime Restrict the response to automations started before this time. Uses the ISO 8601 time format: 2015-10-21T15:41:36+00:00. (optional)
     * @param sinceStartTime Restrict the response to automations started after this time. Uses the ISO 8601 time format: 2015-10-21T15:41:36+00:00. (optional)
     * @param status Restrict the results to automations with the specified status. (optional)
     * @return ResponseEntity&lt;GetAutomations200Response&gt;
     * @throws RestClientException if an error occurs while attempting to invoke the API
     */
    public ResponseEntity<GetAutomations200Response> getAutomationsWithHttpInfo(Integer count, Integer offset, List<String> fields, List<String> excludeFields, OffsetDateTime beforeCreateTime, OffsetDateTime sinceCreateTime, OffsetDateTime beforeStartTime, OffsetDateTime sinceStartTime, String status) throws RestClientException {
        Object localVarPostBody = null;
        

        final MultiValueMap<String, String> localVarQueryParams = new LinkedMultiValueMap<String, String>();
        final HttpHeaders localVarHeaderParams = new HttpHeaders();
        final MultiValueMap<String, String> localVarCookieParams = new LinkedMultiValueMap<String, String>();
        final MultiValueMap<String, Object> localVarFormParams = new LinkedMultiValueMap<String, Object>();

        localVarQueryParams.putAll(apiClient.parameterToMultiValueMap(null, "count", count));
        localVarQueryParams.putAll(apiClient.parameterToMultiValueMap(null, "offset", offset));
        localVarQueryParams.putAll(apiClient.parameterToMultiValueMap(ApiClient.CollectionFormat.valueOf("csv".toUpperCase(Locale.ROOT)), "fields", fields));
        localVarQueryParams.putAll(apiClient.parameterToMultiValueMap(ApiClient.CollectionFormat.valueOf("csv".toUpperCase(Locale.ROOT)), "exclude_fields", excludeFields));
        localVarQueryParams.putAll(apiClient.parameterToMultiValueMap(null, "before_create_time", beforeCreateTime));
        localVarQueryParams.putAll(apiClient.parameterToMultiValueMap(null, "since_create_time", sinceCreateTime));
        localVarQueryParams.putAll(apiClient.parameterToMultiValueMap(null, "before_start_time", beforeStartTime));
        localVarQueryParams.putAll(apiClient.parameterToMultiValueMap(null, "since_start_time", sinceStartTime));
        localVarQueryParams.putAll(apiClient.parameterToMultiValueMap(null, "status", status));
        

        final String[] localVarAccepts = { 
            "application/json", "application/problem+json"
         };
        final List<MediaType> localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        final String[] localVarContentTypes = {  };
        final MediaType localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

        String[] localVarAuthNames = new String[] { "basicAuth" };

        ParameterizedTypeReference<GetAutomations200Response> localReturnType = new ParameterizedTypeReference<GetAutomations200Response>() {};
        return apiClient.invokeAPI("/automations", HttpMethod.GET, Collections.<String, Object>emptyMap(), localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localReturnType);
    }
    /**
     * Get automation info
     * Get a summary of an individual classic automation workflow&#39;s settings and content. The &#x60;trigger_settings&#x60; object returns information for the first email in the workflow.
     * <p><b>200</b> - 
     * <p><b>0</b> - An error generated by the Mailchimp API.
     * @param workflowId The unique id for the Automation workflow. (required)
     * @param fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation. (optional)
     * @param excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation. (optional)
     * @return AutomationWorkflow
     * @throws RestClientException if an error occurs while attempting to invoke the API
     */
    public AutomationWorkflow getAutomationsId(String workflowId, List<String> fields, List<String> excludeFields) throws RestClientException {
        return getAutomationsIdWithHttpInfo(workflowId, fields, excludeFields).getBody();
    }

    /**
     * Get automation info
     * Get a summary of an individual classic automation workflow&#39;s settings and content. The &#x60;trigger_settings&#x60; object returns information for the first email in the workflow.
     * <p><b>200</b> - 
     * <p><b>0</b> - An error generated by the Mailchimp API.
     * @param workflowId The unique id for the Automation workflow. (required)
     * @param fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation. (optional)
     * @param excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation. (optional)
     * @return ResponseEntity&lt;AutomationWorkflow&gt;
     * @throws RestClientException if an error occurs while attempting to invoke the API
     */
    public ResponseEntity<AutomationWorkflow> getAutomationsIdWithHttpInfo(String workflowId, List<String> fields, List<String> excludeFields) throws RestClientException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'workflowId' is set
        if (workflowId == null) {
            throw new HttpClientErrorException(HttpStatus.BAD_REQUEST, "Missing the required parameter 'workflowId' when calling getAutomationsId");
        }
        
        // create path and map variables
        final Map<String, Object> uriVariables = new HashMap<String, Object>();
        uriVariables.put("workflow_id", workflowId);

        final MultiValueMap<String, String> localVarQueryParams = new LinkedMultiValueMap<String, String>();
        final HttpHeaders localVarHeaderParams = new HttpHeaders();
        final MultiValueMap<String, String> localVarCookieParams = new LinkedMultiValueMap<String, String>();
        final MultiValueMap<String, Object> localVarFormParams = new LinkedMultiValueMap<String, Object>();

        localVarQueryParams.putAll(apiClient.parameterToMultiValueMap(ApiClient.CollectionFormat.valueOf("csv".toUpperCase(Locale.ROOT)), "fields", fields));
        localVarQueryParams.putAll(apiClient.parameterToMultiValueMap(ApiClient.CollectionFormat.valueOf("csv".toUpperCase(Locale.ROOT)), "exclude_fields", excludeFields));
        

        final String[] localVarAccepts = { 
            "application/json", "application/problem+json"
         };
        final List<MediaType> localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        final String[] localVarContentTypes = {  };
        final MediaType localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

        String[] localVarAuthNames = new String[] { "basicAuth" };

        ParameterizedTypeReference<AutomationWorkflow> localReturnType = new ParameterizedTypeReference<AutomationWorkflow>() {};
        return apiClient.invokeAPI("/automations/{workflow_id}", HttpMethod.GET, uriVariables, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localReturnType);
    }
    /**
     * List automated emails
     * Get a summary of the emails in a classic automation workflow.
     * <p><b>200</b> - 
     * <p><b>0</b> - An error generated by the Mailchimp API.
     * @param workflowId The unique id for the Automation workflow. (required)
     * @return AutomationEmails
     * @throws RestClientException if an error occurs while attempting to invoke the API
     */
    public AutomationEmails getAutomationsIdEmails(String workflowId) throws RestClientException {
        return getAutomationsIdEmailsWithHttpInfo(workflowId).getBody();
    }

    /**
     * List automated emails
     * Get a summary of the emails in a classic automation workflow.
     * <p><b>200</b> - 
     * <p><b>0</b> - An error generated by the Mailchimp API.
     * @param workflowId The unique id for the Automation workflow. (required)
     * @return ResponseEntity&lt;AutomationEmails&gt;
     * @throws RestClientException if an error occurs while attempting to invoke the API
     */
    public ResponseEntity<AutomationEmails> getAutomationsIdEmailsWithHttpInfo(String workflowId) throws RestClientException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'workflowId' is set
        if (workflowId == null) {
            throw new HttpClientErrorException(HttpStatus.BAD_REQUEST, "Missing the required parameter 'workflowId' when calling getAutomationsIdEmails");
        }
        
        // create path and map variables
        final Map<String, Object> uriVariables = new HashMap<String, Object>();
        uriVariables.put("workflow_id", workflowId);

        final MultiValueMap<String, String> localVarQueryParams = new LinkedMultiValueMap<String, String>();
        final HttpHeaders localVarHeaderParams = new HttpHeaders();
        final MultiValueMap<String, String> localVarCookieParams = new LinkedMultiValueMap<String, String>();
        final MultiValueMap<String, Object> localVarFormParams = new LinkedMultiValueMap<String, Object>();

        final String[] localVarAccepts = { 
            "application/json", "application/problem+json"
         };
        final List<MediaType> localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        final String[] localVarContentTypes = {  };
        final MediaType localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

        String[] localVarAuthNames = new String[] { "basicAuth" };

        ParameterizedTypeReference<AutomationEmails> localReturnType = new ParameterizedTypeReference<AutomationEmails>() {};
        return apiClient.invokeAPI("/automations/{workflow_id}/emails", HttpMethod.GET, uriVariables, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localReturnType);
    }
    /**
     * Get workflow email info
     * Get information about an individual classic automation workflow email.
     * <p><b>200</b> - 
     * <p><b>0</b> - An error generated by the Mailchimp API.
     * @param workflowId The unique id for the Automation workflow. (required)
     * @param workflowEmailId The unique id for the Automation workflow email. (required)
     * @return AutomationWorkflowEmail
     * @throws RestClientException if an error occurs while attempting to invoke the API
     */
    public AutomationWorkflowEmail getAutomationsIdEmailsId(String workflowId, String workflowEmailId) throws RestClientException {
        return getAutomationsIdEmailsIdWithHttpInfo(workflowId, workflowEmailId).getBody();
    }

    /**
     * Get workflow email info
     * Get information about an individual classic automation workflow email.
     * <p><b>200</b> - 
     * <p><b>0</b> - An error generated by the Mailchimp API.
     * @param workflowId The unique id for the Automation workflow. (required)
     * @param workflowEmailId The unique id for the Automation workflow email. (required)
     * @return ResponseEntity&lt;AutomationWorkflowEmail&gt;
     * @throws RestClientException if an error occurs while attempting to invoke the API
     */
    public ResponseEntity<AutomationWorkflowEmail> getAutomationsIdEmailsIdWithHttpInfo(String workflowId, String workflowEmailId) throws RestClientException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'workflowId' is set
        if (workflowId == null) {
            throw new HttpClientErrorException(HttpStatus.BAD_REQUEST, "Missing the required parameter 'workflowId' when calling getAutomationsIdEmailsId");
        }
        
        // verify the required parameter 'workflowEmailId' is set
        if (workflowEmailId == null) {
            throw new HttpClientErrorException(HttpStatus.BAD_REQUEST, "Missing the required parameter 'workflowEmailId' when calling getAutomationsIdEmailsId");
        }
        
        // create path and map variables
        final Map<String, Object> uriVariables = new HashMap<String, Object>();
        uriVariables.put("workflow_id", workflowId);
        uriVariables.put("workflow_email_id", workflowEmailId);

        final MultiValueMap<String, String> localVarQueryParams = new LinkedMultiValueMap<String, String>();
        final HttpHeaders localVarHeaderParams = new HttpHeaders();
        final MultiValueMap<String, String> localVarCookieParams = new LinkedMultiValueMap<String, String>();
        final MultiValueMap<String, Object> localVarFormParams = new LinkedMultiValueMap<String, Object>();

        final String[] localVarAccepts = { 
            "application/json", "application/problem+json"
         };
        final List<MediaType> localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        final String[] localVarContentTypes = {  };
        final MediaType localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

        String[] localVarAuthNames = new String[] { "basicAuth" };

        ParameterizedTypeReference<AutomationWorkflowEmail> localReturnType = new ParameterizedTypeReference<AutomationWorkflowEmail>() {};
        return apiClient.invokeAPI("/automations/{workflow_id}/emails/{workflow_email_id}", HttpMethod.GET, uriVariables, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localReturnType);
    }
    /**
     * List automated email subscribers
     * Get information about a classic automation email queue.
     * <p><b>200</b> - 
     * <p><b>0</b> - An error generated by the Mailchimp API.
     * @param workflowId The unique id for the Automation workflow. (required)
     * @param workflowEmailId The unique id for the Automation workflow email. (required)
     * @return GetAutomationsIdEmailsIdQueue200Response
     * @throws RestClientException if an error occurs while attempting to invoke the API
     */
    public GetAutomationsIdEmailsIdQueue200Response getAutomationsIdEmailsIdQueue(String workflowId, String workflowEmailId) throws RestClientException {
        return getAutomationsIdEmailsIdQueueWithHttpInfo(workflowId, workflowEmailId).getBody();
    }

    /**
     * List automated email subscribers
     * Get information about a classic automation email queue.
     * <p><b>200</b> - 
     * <p><b>0</b> - An error generated by the Mailchimp API.
     * @param workflowId The unique id for the Automation workflow. (required)
     * @param workflowEmailId The unique id for the Automation workflow email. (required)
     * @return ResponseEntity&lt;GetAutomationsIdEmailsIdQueue200Response&gt;
     * @throws RestClientException if an error occurs while attempting to invoke the API
     */
    public ResponseEntity<GetAutomationsIdEmailsIdQueue200Response> getAutomationsIdEmailsIdQueueWithHttpInfo(String workflowId, String workflowEmailId) throws RestClientException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'workflowId' is set
        if (workflowId == null) {
            throw new HttpClientErrorException(HttpStatus.BAD_REQUEST, "Missing the required parameter 'workflowId' when calling getAutomationsIdEmailsIdQueue");
        }
        
        // verify the required parameter 'workflowEmailId' is set
        if (workflowEmailId == null) {
            throw new HttpClientErrorException(HttpStatus.BAD_REQUEST, "Missing the required parameter 'workflowEmailId' when calling getAutomationsIdEmailsIdQueue");
        }
        
        // create path and map variables
        final Map<String, Object> uriVariables = new HashMap<String, Object>();
        uriVariables.put("workflow_id", workflowId);
        uriVariables.put("workflow_email_id", workflowEmailId);

        final MultiValueMap<String, String> localVarQueryParams = new LinkedMultiValueMap<String, String>();
        final HttpHeaders localVarHeaderParams = new HttpHeaders();
        final MultiValueMap<String, String> localVarCookieParams = new LinkedMultiValueMap<String, String>();
        final MultiValueMap<String, Object> localVarFormParams = new LinkedMultiValueMap<String, Object>();

        final String[] localVarAccepts = { 
            "application/json", "application/problem+json"
         };
        final List<MediaType> localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        final String[] localVarContentTypes = {  };
        final MediaType localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

        String[] localVarAuthNames = new String[] { "basicAuth" };

        ParameterizedTypeReference<GetAutomationsIdEmailsIdQueue200Response> localReturnType = new ParameterizedTypeReference<GetAutomationsIdEmailsIdQueue200Response>() {};
        return apiClient.invokeAPI("/automations/{workflow_id}/emails/{workflow_email_id}/queue", HttpMethod.GET, uriVariables, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localReturnType);
    }
    /**
     * Get automated email subscriber
     * Get information about a specific subscriber in a classic automation email queue.
     * <p><b>200</b> - 
     * <p><b>0</b> - An error generated by the Mailchimp API.
     * @param workflowId The unique id for the Automation workflow. (required)
     * @param workflowEmailId The unique id for the Automation workflow email. (required)
     * @param subscriberHash The MD5 hash of the lowercase version of the list member&#39;s email address. (required)
     * @return SubscriberInAutomationQueue2
     * @throws RestClientException if an error occurs while attempting to invoke the API
     */
    public SubscriberInAutomationQueue2 getAutomationsIdEmailsIdQueueId(String workflowId, String workflowEmailId, String subscriberHash) throws RestClientException {
        return getAutomationsIdEmailsIdQueueIdWithHttpInfo(workflowId, workflowEmailId, subscriberHash).getBody();
    }

    /**
     * Get automated email subscriber
     * Get information about a specific subscriber in a classic automation email queue.
     * <p><b>200</b> - 
     * <p><b>0</b> - An error generated by the Mailchimp API.
     * @param workflowId The unique id for the Automation workflow. (required)
     * @param workflowEmailId The unique id for the Automation workflow email. (required)
     * @param subscriberHash The MD5 hash of the lowercase version of the list member&#39;s email address. (required)
     * @return ResponseEntity&lt;SubscriberInAutomationQueue2&gt;
     * @throws RestClientException if an error occurs while attempting to invoke the API
     */
    public ResponseEntity<SubscriberInAutomationQueue2> getAutomationsIdEmailsIdQueueIdWithHttpInfo(String workflowId, String workflowEmailId, String subscriberHash) throws RestClientException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'workflowId' is set
        if (workflowId == null) {
            throw new HttpClientErrorException(HttpStatus.BAD_REQUEST, "Missing the required parameter 'workflowId' when calling getAutomationsIdEmailsIdQueueId");
        }
        
        // verify the required parameter 'workflowEmailId' is set
        if (workflowEmailId == null) {
            throw new HttpClientErrorException(HttpStatus.BAD_REQUEST, "Missing the required parameter 'workflowEmailId' when calling getAutomationsIdEmailsIdQueueId");
        }
        
        // verify the required parameter 'subscriberHash' is set
        if (subscriberHash == null) {
            throw new HttpClientErrorException(HttpStatus.BAD_REQUEST, "Missing the required parameter 'subscriberHash' when calling getAutomationsIdEmailsIdQueueId");
        }
        
        // create path and map variables
        final Map<String, Object> uriVariables = new HashMap<String, Object>();
        uriVariables.put("workflow_id", workflowId);
        uriVariables.put("workflow_email_id", workflowEmailId);
        uriVariables.put("subscriber_hash", subscriberHash);

        final MultiValueMap<String, String> localVarQueryParams = new LinkedMultiValueMap<String, String>();
        final HttpHeaders localVarHeaderParams = new HttpHeaders();
        final MultiValueMap<String, String> localVarCookieParams = new LinkedMultiValueMap<String, String>();
        final MultiValueMap<String, Object> localVarFormParams = new LinkedMultiValueMap<String, Object>();

        final String[] localVarAccepts = { 
            "application/json", "application/problem+json"
         };
        final List<MediaType> localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        final String[] localVarContentTypes = {  };
        final MediaType localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

        String[] localVarAuthNames = new String[] { "basicAuth" };

        ParameterizedTypeReference<SubscriberInAutomationQueue2> localReturnType = new ParameterizedTypeReference<SubscriberInAutomationQueue2>() {};
        return apiClient.invokeAPI("/automations/{workflow_id}/emails/{workflow_email_id}/queue/{subscriber_hash}", HttpMethod.GET, uriVariables, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localReturnType);
    }
    /**
     * List subscribers removed from workflow
     * Get information about subscribers who were removed from a classic automation workflow.
     * <p><b>200</b> - 
     * <p><b>0</b> - An error generated by the Mailchimp API.
     * @param workflowId The unique id for the Automation workflow. (required)
     * @return RemovedSubscribers
     * @throws RestClientException if an error occurs while attempting to invoke the API
     */
    public RemovedSubscribers getAutomationsIdRemovedSubscribers(String workflowId) throws RestClientException {
        return getAutomationsIdRemovedSubscribersWithHttpInfo(workflowId).getBody();
    }

    /**
     * List subscribers removed from workflow
     * Get information about subscribers who were removed from a classic automation workflow.
     * <p><b>200</b> - 
     * <p><b>0</b> - An error generated by the Mailchimp API.
     * @param workflowId The unique id for the Automation workflow. (required)
     * @return ResponseEntity&lt;RemovedSubscribers&gt;
     * @throws RestClientException if an error occurs while attempting to invoke the API
     */
    public ResponseEntity<RemovedSubscribers> getAutomationsIdRemovedSubscribersWithHttpInfo(String workflowId) throws RestClientException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'workflowId' is set
        if (workflowId == null) {
            throw new HttpClientErrorException(HttpStatus.BAD_REQUEST, "Missing the required parameter 'workflowId' when calling getAutomationsIdRemovedSubscribers");
        }
        
        // create path and map variables
        final Map<String, Object> uriVariables = new HashMap<String, Object>();
        uriVariables.put("workflow_id", workflowId);

        final MultiValueMap<String, String> localVarQueryParams = new LinkedMultiValueMap<String, String>();
        final HttpHeaders localVarHeaderParams = new HttpHeaders();
        final MultiValueMap<String, String> localVarCookieParams = new LinkedMultiValueMap<String, String>();
        final MultiValueMap<String, Object> localVarFormParams = new LinkedMultiValueMap<String, Object>();

        final String[] localVarAccepts = { 
            "application/json", "application/problem+json"
         };
        final List<MediaType> localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        final String[] localVarContentTypes = {  };
        final MediaType localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

        String[] localVarAuthNames = new String[] { "basicAuth" };

        ParameterizedTypeReference<RemovedSubscribers> localReturnType = new ParameterizedTypeReference<RemovedSubscribers>() {};
        return apiClient.invokeAPI("/automations/{workflow_id}/removed-subscribers", HttpMethod.GET, uriVariables, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localReturnType);
    }
    /**
     * Get subscriber removed from workflow
     * Get information about a specific subscriber who was removed from a classic automation workflow.
     * <p><b>200</b> - 
     * <p><b>0</b> - An error generated by the Mailchimp API.
     * @param workflowId The unique id for the Automation workflow. (required)
     * @param subscriberHash The MD5 hash of the lowercase version of the list member&#39;s email address. (required)
     * @return SubscriberRemovedFromAutomationWorkflow
     * @throws RestClientException if an error occurs while attempting to invoke the API
     */
    public SubscriberRemovedFromAutomationWorkflow getAutomationsIdRemovedSubscribersId(String workflowId, String subscriberHash) throws RestClientException {
        return getAutomationsIdRemovedSubscribersIdWithHttpInfo(workflowId, subscriberHash).getBody();
    }

    /**
     * Get subscriber removed from workflow
     * Get information about a specific subscriber who was removed from a classic automation workflow.
     * <p><b>200</b> - 
     * <p><b>0</b> - An error generated by the Mailchimp API.
     * @param workflowId The unique id for the Automation workflow. (required)
     * @param subscriberHash The MD5 hash of the lowercase version of the list member&#39;s email address. (required)
     * @return ResponseEntity&lt;SubscriberRemovedFromAutomationWorkflow&gt;
     * @throws RestClientException if an error occurs while attempting to invoke the API
     */
    public ResponseEntity<SubscriberRemovedFromAutomationWorkflow> getAutomationsIdRemovedSubscribersIdWithHttpInfo(String workflowId, String subscriberHash) throws RestClientException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'workflowId' is set
        if (workflowId == null) {
            throw new HttpClientErrorException(HttpStatus.BAD_REQUEST, "Missing the required parameter 'workflowId' when calling getAutomationsIdRemovedSubscribersId");
        }
        
        // verify the required parameter 'subscriberHash' is set
        if (subscriberHash == null) {
            throw new HttpClientErrorException(HttpStatus.BAD_REQUEST, "Missing the required parameter 'subscriberHash' when calling getAutomationsIdRemovedSubscribersId");
        }
        
        // create path and map variables
        final Map<String, Object> uriVariables = new HashMap<String, Object>();
        uriVariables.put("workflow_id", workflowId);
        uriVariables.put("subscriber_hash", subscriberHash);

        final MultiValueMap<String, String> localVarQueryParams = new LinkedMultiValueMap<String, String>();
        final HttpHeaders localVarHeaderParams = new HttpHeaders();
        final MultiValueMap<String, String> localVarCookieParams = new LinkedMultiValueMap<String, String>();
        final MultiValueMap<String, Object> localVarFormParams = new LinkedMultiValueMap<String, Object>();

        final String[] localVarAccepts = { 
            "application/json", "application/problem+json"
         };
        final List<MediaType> localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        final String[] localVarContentTypes = {  };
        final MediaType localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

        String[] localVarAuthNames = new String[] { "basicAuth" };

        ParameterizedTypeReference<SubscriberRemovedFromAutomationWorkflow> localReturnType = new ParameterizedTypeReference<SubscriberRemovedFromAutomationWorkflow>() {};
        return apiClient.invokeAPI("/automations/{workflow_id}/removed-subscribers/{subscriber_hash}", HttpMethod.GET, uriVariables, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localReturnType);
    }
    /**
     * Update workflow email
     * Update settings for a classic automation workflow email.  Only works with workflows of type: abandonedBrowse, abandonedCart, emailFollowup, or singleWelcome.
     * <p><b>200</b> - 
     * <p><b>0</b> - An error generated by the Mailchimp API.
     * @param workflowId The unique id for the Automation workflow. (required)
     * @param workflowEmailId The unique id for the Automation workflow email. (required)
     * @param body  (required)
     * @return AutomationWorkflowEmail
     * @throws RestClientException if an error occurs while attempting to invoke the API
     */
    public AutomationWorkflowEmail patchAutomationEmailWorkflowId(String workflowId, String workflowEmailId, UpdateInformationAboutASpecificWorkflowEmail body) throws RestClientException {
        return patchAutomationEmailWorkflowIdWithHttpInfo(workflowId, workflowEmailId, body).getBody();
    }

    /**
     * Update workflow email
     * Update settings for a classic automation workflow email.  Only works with workflows of type: abandonedBrowse, abandonedCart, emailFollowup, or singleWelcome.
     * <p><b>200</b> - 
     * <p><b>0</b> - An error generated by the Mailchimp API.
     * @param workflowId The unique id for the Automation workflow. (required)
     * @param workflowEmailId The unique id for the Automation workflow email. (required)
     * @param body  (required)
     * @return ResponseEntity&lt;AutomationWorkflowEmail&gt;
     * @throws RestClientException if an error occurs while attempting to invoke the API
     */
    public ResponseEntity<AutomationWorkflowEmail> patchAutomationEmailWorkflowIdWithHttpInfo(String workflowId, String workflowEmailId, UpdateInformationAboutASpecificWorkflowEmail body) throws RestClientException {
        Object localVarPostBody = body;
        
        // verify the required parameter 'workflowId' is set
        if (workflowId == null) {
            throw new HttpClientErrorException(HttpStatus.BAD_REQUEST, "Missing the required parameter 'workflowId' when calling patchAutomationEmailWorkflowId");
        }
        
        // verify the required parameter 'workflowEmailId' is set
        if (workflowEmailId == null) {
            throw new HttpClientErrorException(HttpStatus.BAD_REQUEST, "Missing the required parameter 'workflowEmailId' when calling patchAutomationEmailWorkflowId");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new HttpClientErrorException(HttpStatus.BAD_REQUEST, "Missing the required parameter 'body' when calling patchAutomationEmailWorkflowId");
        }
        
        // create path and map variables
        final Map<String, Object> uriVariables = new HashMap<String, Object>();
        uriVariables.put("workflow_id", workflowId);
        uriVariables.put("workflow_email_id", workflowEmailId);

        final MultiValueMap<String, String> localVarQueryParams = new LinkedMultiValueMap<String, String>();
        final HttpHeaders localVarHeaderParams = new HttpHeaders();
        final MultiValueMap<String, String> localVarCookieParams = new LinkedMultiValueMap<String, String>();
        final MultiValueMap<String, Object> localVarFormParams = new LinkedMultiValueMap<String, Object>();

        final String[] localVarAccepts = { 
            "application/json", "application/problem+json"
         };
        final List<MediaType> localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        final String[] localVarContentTypes = { 
            "application/json"
         };
        final MediaType localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

        String[] localVarAuthNames = new String[] { "basicAuth" };

        ParameterizedTypeReference<AutomationWorkflowEmail> localReturnType = new ParameterizedTypeReference<AutomationWorkflowEmail>() {};
        return apiClient.invokeAPI("/automations/{workflow_id}/emails/{workflow_email_id}", HttpMethod.PATCH, uriVariables, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localReturnType);
    }
    /**
     * Add automation
     * Create a new classic automation in your Mailchimp account.
     * <p><b>200</b> - 
     * <p><b>0</b> - An error generated by the Mailchimp API.
     * @param body  (required)
     * @return AutomationWorkflow
     * @throws RestClientException if an error occurs while attempting to invoke the API
     */
    public AutomationWorkflow postAutomations(AutomationWorkflow1 body) throws RestClientException {
        return postAutomationsWithHttpInfo(body).getBody();
    }

    /**
     * Add automation
     * Create a new classic automation in your Mailchimp account.
     * <p><b>200</b> - 
     * <p><b>0</b> - An error generated by the Mailchimp API.
     * @param body  (required)
     * @return ResponseEntity&lt;AutomationWorkflow&gt;
     * @throws RestClientException if an error occurs while attempting to invoke the API
     */
    public ResponseEntity<AutomationWorkflow> postAutomationsWithHttpInfo(AutomationWorkflow1 body) throws RestClientException {
        Object localVarPostBody = body;
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new HttpClientErrorException(HttpStatus.BAD_REQUEST, "Missing the required parameter 'body' when calling postAutomations");
        }
        

        final MultiValueMap<String, String> localVarQueryParams = new LinkedMultiValueMap<String, String>();
        final HttpHeaders localVarHeaderParams = new HttpHeaders();
        final MultiValueMap<String, String> localVarCookieParams = new LinkedMultiValueMap<String, String>();
        final MultiValueMap<String, Object> localVarFormParams = new LinkedMultiValueMap<String, Object>();

        final String[] localVarAccepts = { 
            "application/json", "application/problem+json"
         };
        final List<MediaType> localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        final String[] localVarContentTypes = { 
            "application/json"
         };
        final MediaType localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

        String[] localVarAuthNames = new String[] { "basicAuth" };

        ParameterizedTypeReference<AutomationWorkflow> localReturnType = new ParameterizedTypeReference<AutomationWorkflow>() {};
        return apiClient.invokeAPI("/automations", HttpMethod.POST, Collections.<String, Object>emptyMap(), localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localReturnType);
    }
    /**
     * Pause automation emails
     * Pause all emails in a specific classic automation workflow.
     * <p><b>204</b> - Empty Response
     * <p><b>0</b> - An error generated by the Mailchimp API.
     * @param workflowId The unique id for the Automation workflow. (required)
     * @throws RestClientException if an error occurs while attempting to invoke the API
     */
    public void postAutomationsIdActionsPauseAllEmails(String workflowId) throws RestClientException {
        postAutomationsIdActionsPauseAllEmailsWithHttpInfo(workflowId);
    }

    /**
     * Pause automation emails
     * Pause all emails in a specific classic automation workflow.
     * <p><b>204</b> - Empty Response
     * <p><b>0</b> - An error generated by the Mailchimp API.
     * @param workflowId The unique id for the Automation workflow. (required)
     * @return ResponseEntity&lt;Void&gt;
     * @throws RestClientException if an error occurs while attempting to invoke the API
     */
    public ResponseEntity<Void> postAutomationsIdActionsPauseAllEmailsWithHttpInfo(String workflowId) throws RestClientException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'workflowId' is set
        if (workflowId == null) {
            throw new HttpClientErrorException(HttpStatus.BAD_REQUEST, "Missing the required parameter 'workflowId' when calling postAutomationsIdActionsPauseAllEmails");
        }
        
        // create path and map variables
        final Map<String, Object> uriVariables = new HashMap<String, Object>();
        uriVariables.put("workflow_id", workflowId);

        final MultiValueMap<String, String> localVarQueryParams = new LinkedMultiValueMap<String, String>();
        final HttpHeaders localVarHeaderParams = new HttpHeaders();
        final MultiValueMap<String, String> localVarCookieParams = new LinkedMultiValueMap<String, String>();
        final MultiValueMap<String, Object> localVarFormParams = new LinkedMultiValueMap<String, Object>();

        final String[] localVarAccepts = { 
            "application/json", "application/problem+json"
         };
        final List<MediaType> localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        final String[] localVarContentTypes = {  };
        final MediaType localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

        String[] localVarAuthNames = new String[] { "basicAuth" };

        ParameterizedTypeReference<Void> localReturnType = new ParameterizedTypeReference<Void>() {};
        return apiClient.invokeAPI("/automations/{workflow_id}/actions/pause-all-emails", HttpMethod.POST, uriVariables, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localReturnType);
    }
    /**
     * Start automation emails
     * Start all emails in a classic automation workflow.
     * <p><b>204</b> - Empty Response
     * <p><b>0</b> - An error generated by the Mailchimp API.
     * @param workflowId The unique id for the Automation workflow. (required)
     * @throws RestClientException if an error occurs while attempting to invoke the API
     */
    public void postAutomationsIdActionsStartAllEmails(String workflowId) throws RestClientException {
        postAutomationsIdActionsStartAllEmailsWithHttpInfo(workflowId);
    }

    /**
     * Start automation emails
     * Start all emails in a classic automation workflow.
     * <p><b>204</b> - Empty Response
     * <p><b>0</b> - An error generated by the Mailchimp API.
     * @param workflowId The unique id for the Automation workflow. (required)
     * @return ResponseEntity&lt;Void&gt;
     * @throws RestClientException if an error occurs while attempting to invoke the API
     */
    public ResponseEntity<Void> postAutomationsIdActionsStartAllEmailsWithHttpInfo(String workflowId) throws RestClientException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'workflowId' is set
        if (workflowId == null) {
            throw new HttpClientErrorException(HttpStatus.BAD_REQUEST, "Missing the required parameter 'workflowId' when calling postAutomationsIdActionsStartAllEmails");
        }
        
        // create path and map variables
        final Map<String, Object> uriVariables = new HashMap<String, Object>();
        uriVariables.put("workflow_id", workflowId);

        final MultiValueMap<String, String> localVarQueryParams = new LinkedMultiValueMap<String, String>();
        final HttpHeaders localVarHeaderParams = new HttpHeaders();
        final MultiValueMap<String, String> localVarCookieParams = new LinkedMultiValueMap<String, String>();
        final MultiValueMap<String, Object> localVarFormParams = new LinkedMultiValueMap<String, Object>();

        final String[] localVarAccepts = { 
            "application/json", "application/problem+json"
         };
        final List<MediaType> localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        final String[] localVarContentTypes = {  };
        final MediaType localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

        String[] localVarAuthNames = new String[] { "basicAuth" };

        ParameterizedTypeReference<Void> localReturnType = new ParameterizedTypeReference<Void>() {};
        return apiClient.invokeAPI("/automations/{workflow_id}/actions/start-all-emails", HttpMethod.POST, uriVariables, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localReturnType);
    }
    /**
     * Pause automated email
     * Pause an automated email.
     * <p><b>204</b> - Empty Response
     * <p><b>0</b> - An error generated by the Mailchimp API.
     * @param workflowId The unique id for the Automation workflow. (required)
     * @param workflowEmailId The unique id for the Automation workflow email. (required)
     * @throws RestClientException if an error occurs while attempting to invoke the API
     */
    public void postAutomationsIdEmailsIdActionsPause(String workflowId, String workflowEmailId) throws RestClientException {
        postAutomationsIdEmailsIdActionsPauseWithHttpInfo(workflowId, workflowEmailId);
    }

    /**
     * Pause automated email
     * Pause an automated email.
     * <p><b>204</b> - Empty Response
     * <p><b>0</b> - An error generated by the Mailchimp API.
     * @param workflowId The unique id for the Automation workflow. (required)
     * @param workflowEmailId The unique id for the Automation workflow email. (required)
     * @return ResponseEntity&lt;Void&gt;
     * @throws RestClientException if an error occurs while attempting to invoke the API
     */
    public ResponseEntity<Void> postAutomationsIdEmailsIdActionsPauseWithHttpInfo(String workflowId, String workflowEmailId) throws RestClientException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'workflowId' is set
        if (workflowId == null) {
            throw new HttpClientErrorException(HttpStatus.BAD_REQUEST, "Missing the required parameter 'workflowId' when calling postAutomationsIdEmailsIdActionsPause");
        }
        
        // verify the required parameter 'workflowEmailId' is set
        if (workflowEmailId == null) {
            throw new HttpClientErrorException(HttpStatus.BAD_REQUEST, "Missing the required parameter 'workflowEmailId' when calling postAutomationsIdEmailsIdActionsPause");
        }
        
        // create path and map variables
        final Map<String, Object> uriVariables = new HashMap<String, Object>();
        uriVariables.put("workflow_id", workflowId);
        uriVariables.put("workflow_email_id", workflowEmailId);

        final MultiValueMap<String, String> localVarQueryParams = new LinkedMultiValueMap<String, String>();
        final HttpHeaders localVarHeaderParams = new HttpHeaders();
        final MultiValueMap<String, String> localVarCookieParams = new LinkedMultiValueMap<String, String>();
        final MultiValueMap<String, Object> localVarFormParams = new LinkedMultiValueMap<String, Object>();

        final String[] localVarAccepts = { 
            "application/json", "application/problem+json"
         };
        final List<MediaType> localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        final String[] localVarContentTypes = {  };
        final MediaType localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

        String[] localVarAuthNames = new String[] { "basicAuth" };

        ParameterizedTypeReference<Void> localReturnType = new ParameterizedTypeReference<Void>() {};
        return apiClient.invokeAPI("/automations/{workflow_id}/emails/{workflow_email_id}/actions/pause", HttpMethod.POST, uriVariables, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localReturnType);
    }
    /**
     * Start automated email
     * Start an automated email.
     * <p><b>204</b> - Empty Response
     * <p><b>0</b> - An error generated by the Mailchimp API.
     * @param workflowId The unique id for the Automation workflow. (required)
     * @param workflowEmailId The unique id for the Automation workflow email. (required)
     * @throws RestClientException if an error occurs while attempting to invoke the API
     */
    public void postAutomationsIdEmailsIdActionsStart(String workflowId, String workflowEmailId) throws RestClientException {
        postAutomationsIdEmailsIdActionsStartWithHttpInfo(workflowId, workflowEmailId);
    }

    /**
     * Start automated email
     * Start an automated email.
     * <p><b>204</b> - Empty Response
     * <p><b>0</b> - An error generated by the Mailchimp API.
     * @param workflowId The unique id for the Automation workflow. (required)
     * @param workflowEmailId The unique id for the Automation workflow email. (required)
     * @return ResponseEntity&lt;Void&gt;
     * @throws RestClientException if an error occurs while attempting to invoke the API
     */
    public ResponseEntity<Void> postAutomationsIdEmailsIdActionsStartWithHttpInfo(String workflowId, String workflowEmailId) throws RestClientException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'workflowId' is set
        if (workflowId == null) {
            throw new HttpClientErrorException(HttpStatus.BAD_REQUEST, "Missing the required parameter 'workflowId' when calling postAutomationsIdEmailsIdActionsStart");
        }
        
        // verify the required parameter 'workflowEmailId' is set
        if (workflowEmailId == null) {
            throw new HttpClientErrorException(HttpStatus.BAD_REQUEST, "Missing the required parameter 'workflowEmailId' when calling postAutomationsIdEmailsIdActionsStart");
        }
        
        // create path and map variables
        final Map<String, Object> uriVariables = new HashMap<String, Object>();
        uriVariables.put("workflow_id", workflowId);
        uriVariables.put("workflow_email_id", workflowEmailId);

        final MultiValueMap<String, String> localVarQueryParams = new LinkedMultiValueMap<String, String>();
        final HttpHeaders localVarHeaderParams = new HttpHeaders();
        final MultiValueMap<String, String> localVarCookieParams = new LinkedMultiValueMap<String, String>();
        final MultiValueMap<String, Object> localVarFormParams = new LinkedMultiValueMap<String, Object>();

        final String[] localVarAccepts = { 
            "application/json", "application/problem+json"
         };
        final List<MediaType> localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        final String[] localVarContentTypes = {  };
        final MediaType localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

        String[] localVarAuthNames = new String[] { "basicAuth" };

        ParameterizedTypeReference<Void> localReturnType = new ParameterizedTypeReference<Void>() {};
        return apiClient.invokeAPI("/automations/{workflow_id}/emails/{workflow_email_id}/actions/start", HttpMethod.POST, uriVariables, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localReturnType);
    }
    /**
     * Add subscriber to workflow email
     * Manually add a subscriber to a workflow, bypassing the default trigger settings. You can also use this endpoint to trigger a series of automated emails in an API 3.0 workflow type.
     * <p><b>200</b> - 
     * <p><b>0</b> - An error generated by the Mailchimp API.
     * @param workflowId The unique id for the Automation workflow. (required)
     * @param workflowEmailId The unique id for the Automation workflow email. (required)
     * @param body  (required)
     * @return SubscriberInAutomationQueue2
     * @throws RestClientException if an error occurs while attempting to invoke the API
     */
    public SubscriberInAutomationQueue2 postAutomationsIdEmailsIdQueue(String workflowId, String workflowEmailId, SubscriberInAutomationQueue1 body) throws RestClientException {
        return postAutomationsIdEmailsIdQueueWithHttpInfo(workflowId, workflowEmailId, body).getBody();
    }

    /**
     * Add subscriber to workflow email
     * Manually add a subscriber to a workflow, bypassing the default trigger settings. You can also use this endpoint to trigger a series of automated emails in an API 3.0 workflow type.
     * <p><b>200</b> - 
     * <p><b>0</b> - An error generated by the Mailchimp API.
     * @param workflowId The unique id for the Automation workflow. (required)
     * @param workflowEmailId The unique id for the Automation workflow email. (required)
     * @param body  (required)
     * @return ResponseEntity&lt;SubscriberInAutomationQueue2&gt;
     * @throws RestClientException if an error occurs while attempting to invoke the API
     */
    public ResponseEntity<SubscriberInAutomationQueue2> postAutomationsIdEmailsIdQueueWithHttpInfo(String workflowId, String workflowEmailId, SubscriberInAutomationQueue1 body) throws RestClientException {
        Object localVarPostBody = body;
        
        // verify the required parameter 'workflowId' is set
        if (workflowId == null) {
            throw new HttpClientErrorException(HttpStatus.BAD_REQUEST, "Missing the required parameter 'workflowId' when calling postAutomationsIdEmailsIdQueue");
        }
        
        // verify the required parameter 'workflowEmailId' is set
        if (workflowEmailId == null) {
            throw new HttpClientErrorException(HttpStatus.BAD_REQUEST, "Missing the required parameter 'workflowEmailId' when calling postAutomationsIdEmailsIdQueue");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new HttpClientErrorException(HttpStatus.BAD_REQUEST, "Missing the required parameter 'body' when calling postAutomationsIdEmailsIdQueue");
        }
        
        // create path and map variables
        final Map<String, Object> uriVariables = new HashMap<String, Object>();
        uriVariables.put("workflow_id", workflowId);
        uriVariables.put("workflow_email_id", workflowEmailId);

        final MultiValueMap<String, String> localVarQueryParams = new LinkedMultiValueMap<String, String>();
        final HttpHeaders localVarHeaderParams = new HttpHeaders();
        final MultiValueMap<String, String> localVarCookieParams = new LinkedMultiValueMap<String, String>();
        final MultiValueMap<String, Object> localVarFormParams = new LinkedMultiValueMap<String, Object>();

        final String[] localVarAccepts = { 
            "application/json", "application/problem+json"
         };
        final List<MediaType> localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        final String[] localVarContentTypes = { 
            "application/json"
         };
        final MediaType localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

        String[] localVarAuthNames = new String[] { "basicAuth" };

        ParameterizedTypeReference<SubscriberInAutomationQueue2> localReturnType = new ParameterizedTypeReference<SubscriberInAutomationQueue2>() {};
        return apiClient.invokeAPI("/automations/{workflow_id}/emails/{workflow_email_id}/queue", HttpMethod.POST, uriVariables, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localReturnType);
    }
    /**
     * Remove subscriber from workflow
     * Remove a subscriber from a specific classic automation workflow. You can remove a subscriber at any point in an automation workflow, regardless of how many emails they&#39;ve been sent from that workflow. Once they&#39;re removed, they can never be added back to the same workflow.
     * <p><b>200</b> - 
     * <p><b>0</b> - An error generated by the Mailchimp API.
     * @param workflowId The unique id for the Automation workflow. (required)
     * @param body  (required)
     * @return SubscriberRemovedFromAutomationWorkflow
     * @throws RestClientException if an error occurs while attempting to invoke the API
     */
    public SubscriberRemovedFromAutomationWorkflow postAutomationsIdRemovedSubscribers(String workflowId, SubscriberInAutomationQueue1 body) throws RestClientException {
        return postAutomationsIdRemovedSubscribersWithHttpInfo(workflowId, body).getBody();
    }

    /**
     * Remove subscriber from workflow
     * Remove a subscriber from a specific classic automation workflow. You can remove a subscriber at any point in an automation workflow, regardless of how many emails they&#39;ve been sent from that workflow. Once they&#39;re removed, they can never be added back to the same workflow.
     * <p><b>200</b> - 
     * <p><b>0</b> - An error generated by the Mailchimp API.
     * @param workflowId The unique id for the Automation workflow. (required)
     * @param body  (required)
     * @return ResponseEntity&lt;SubscriberRemovedFromAutomationWorkflow&gt;
     * @throws RestClientException if an error occurs while attempting to invoke the API
     */
    public ResponseEntity<SubscriberRemovedFromAutomationWorkflow> postAutomationsIdRemovedSubscribersWithHttpInfo(String workflowId, SubscriberInAutomationQueue1 body) throws RestClientException {
        Object localVarPostBody = body;
        
        // verify the required parameter 'workflowId' is set
        if (workflowId == null) {
            throw new HttpClientErrorException(HttpStatus.BAD_REQUEST, "Missing the required parameter 'workflowId' when calling postAutomationsIdRemovedSubscribers");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new HttpClientErrorException(HttpStatus.BAD_REQUEST, "Missing the required parameter 'body' when calling postAutomationsIdRemovedSubscribers");
        }
        
        // create path and map variables
        final Map<String, Object> uriVariables = new HashMap<String, Object>();
        uriVariables.put("workflow_id", workflowId);

        final MultiValueMap<String, String> localVarQueryParams = new LinkedMultiValueMap<String, String>();
        final HttpHeaders localVarHeaderParams = new HttpHeaders();
        final MultiValueMap<String, String> localVarCookieParams = new LinkedMultiValueMap<String, String>();
        final MultiValueMap<String, Object> localVarFormParams = new LinkedMultiValueMap<String, Object>();

        final String[] localVarAccepts = { 
            "application/json", "application/problem+json"
         };
        final List<MediaType> localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        final String[] localVarContentTypes = { 
            "application/json"
         };
        final MediaType localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

        String[] localVarAuthNames = new String[] { "basicAuth" };

        ParameterizedTypeReference<SubscriberRemovedFromAutomationWorkflow> localReturnType = new ParameterizedTypeReference<SubscriberRemovedFromAutomationWorkflow>() {};
        return apiClient.invokeAPI("/automations/{workflow_id}/removed-subscribers", HttpMethod.POST, uriVariables, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localReturnType);
    }

    @Override
    public <T> ResponseEntity<T> invokeAPI(String url, HttpMethod method, Object request, ParameterizedTypeReference<T> returnType) throws RestClientException {
        String localVarPath = url.replace(apiClient.getBasePath(), "");
        Object localVarPostBody = request;

        final Map<String, Object> uriVariables = new HashMap<String, Object>();
        final MultiValueMap<String, String> localVarQueryParams = new LinkedMultiValueMap<String, String>();
        final HttpHeaders localVarHeaderParams = new HttpHeaders();
        final MultiValueMap<String, String> localVarCookieParams = new LinkedMultiValueMap<String, String>();
        final MultiValueMap<String, Object> localVarFormParams = new LinkedMultiValueMap<String, Object>();

        final String[] localVarAccepts = { 
            "application/json", "application/problem+json"
         };
        final List<MediaType> localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        final String[] localVarContentTypes = { 
            "application/json"
         };
        final MediaType localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

        String[] localVarAuthNames = new String[] { "basicAuth" };

        return apiClient.invokeAPI(localVarPath, method, uriVariables, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, returnType);
    }
}
