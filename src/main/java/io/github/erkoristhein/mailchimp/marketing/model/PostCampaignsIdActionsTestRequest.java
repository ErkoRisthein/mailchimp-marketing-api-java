/*
 * Mailchimp Marketing API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0.55
 * Contact: apihelp@mailchimp.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.erkoristhein.mailchimp.marketing.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * PostCampaignsIdActionsTestRequest
 */
@JsonPropertyOrder({
  PostCampaignsIdActionsTestRequest.JSON_PROPERTY_TEST_EMAILS,
  PostCampaignsIdActionsTestRequest.JSON_PROPERTY_SEND_TYPE
})
@JsonTypeName("postCampaignsIdActionsTest_request")
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-26T16:39:59.516441+03:00[Europe/Helsinki]", comments = "Generator version: 7.5.0")
public class PostCampaignsIdActionsTestRequest {
  public static final String JSON_PROPERTY_TEST_EMAILS = "test_emails";
  private List<String> testEmails = new ArrayList<>();

  /**
   * Choose the type of test email to send.
   */
  public enum SendTypeEnum {
    HTML("html"),
    
    PLAINTEXT("plaintext");

    private String value;

    SendTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static SendTypeEnum fromValue(String value) {
      for (SendTypeEnum b : SendTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_SEND_TYPE = "send_type";
  private SendTypeEnum sendType;

  public PostCampaignsIdActionsTestRequest() {
  }

  public PostCampaignsIdActionsTestRequest testEmails(List<String> testEmails) {
    
    this.testEmails = testEmails;
    return this;
  }

  public PostCampaignsIdActionsTestRequest addTestEmailsItem(String testEmailsItem) {
    if (this.testEmails == null) {
      this.testEmails = new ArrayList<>();
    }
    this.testEmails.add(testEmailsItem);
    return this;
  }

   /**
   * An array of email addresses to send the test email to.
   * @return testEmails
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TEST_EMAILS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<String> getTestEmails() {
    return testEmails;
  }


  @JsonProperty(JSON_PROPERTY_TEST_EMAILS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTestEmails(List<String> testEmails) {
    this.testEmails = testEmails;
  }


  public PostCampaignsIdActionsTestRequest sendType(SendTypeEnum sendType) {
    
    this.sendType = sendType;
    return this;
  }

   /**
   * Choose the type of test email to send.
   * @return sendType
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_SEND_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public SendTypeEnum getSendType() {
    return sendType;
  }


  @JsonProperty(JSON_PROPERTY_SEND_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSendType(SendTypeEnum sendType) {
    this.sendType = sendType;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PostCampaignsIdActionsTestRequest postCampaignsIdActionsTestRequest = (PostCampaignsIdActionsTestRequest) o;
    return Objects.equals(this.testEmails, postCampaignsIdActionsTestRequest.testEmails) &&
        Objects.equals(this.sendType, postCampaignsIdActionsTestRequest.sendType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(testEmails, sendType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PostCampaignsIdActionsTestRequest {\n");
    sb.append("    testEmails: ").append(toIndentedString(testEmails)).append("\n");
    sb.append("    sendType: ").append(toIndentedString(sendType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

