/*
 * Mailchimp Marketing API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0.55
 * Contact: apihelp@mailchimp.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.erkoristhein.mailchimp.marketing.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.math.BigDecimal;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * ListLocation
 */
@JsonPropertyOrder({
  ListLocation.JSON_PROPERTY_COUNTRY,
  ListLocation.JSON_PROPERTY_CC,
  ListLocation.JSON_PROPERTY_PERCENT,
  ListLocation.JSON_PROPERTY_TOTAL
})
@JsonTypeName("List_Location")
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-26T16:39:59.516441+03:00[Europe/Helsinki]", comments = "Generator version: 7.5.0")
public class ListLocation {
  public static final String JSON_PROPERTY_COUNTRY = "country";
  private String country;

  public static final String JSON_PROPERTY_CC = "cc";
  private String cc;

  public static final String JSON_PROPERTY_PERCENT = "percent";
  private BigDecimal percent;

  public static final String JSON_PROPERTY_TOTAL = "total";
  private Integer total;

  public ListLocation() {
  }

  @JsonCreator
  public ListLocation(
    @JsonProperty(JSON_PROPERTY_COUNTRY) String country, 
    @JsonProperty(JSON_PROPERTY_CC) String cc, 
    @JsonProperty(JSON_PROPERTY_PERCENT) BigDecimal percent, 
    @JsonProperty(JSON_PROPERTY_TOTAL) Integer total
  ) {
    this();
    this.country = country;
    this.cc = cc;
    this.percent = percent;
    this.total = total;
  }

   /**
   * The name of the country.
   * @return country
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_COUNTRY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getCountry() {
    return country;
  }




   /**
   * The ISO 3166 2 digit country code.
   * @return cc
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CC)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getCc() {
    return cc;
  }




   /**
   * The percent of subscribers in the country.
   * @return percent
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PERCENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getPercent() {
    return percent;
  }




   /**
   * The total number of subscribers in the country.
   * @return total
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TOTAL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getTotal() {
    return total;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ListLocation listLocation = (ListLocation) o;
    return Objects.equals(this.country, listLocation.country) &&
        Objects.equals(this.cc, listLocation.cc) &&
        Objects.equals(this.percent, listLocation.percent) &&
        Objects.equals(this.total, listLocation.total);
  }

  @Override
  public int hashCode() {
    return Objects.hash(country, cc, percent, total);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ListLocation {\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    cc: ").append(toIndentedString(cc)).append("\n");
    sb.append("    percent: ").append(toIndentedString(percent)).append("\n");
    sb.append("    total: ").append(toIndentedString(total)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

