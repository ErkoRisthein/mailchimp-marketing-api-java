/*
 * Mailchimp Marketing API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0.55
 * Contact: apihelp@mailchimp.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.erkoristhein.mailchimp.marketing.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.github.erkoristhein.mailchimp.marketing.model.ContactCounts;
import io.github.erkoristhein.mailchimp.marketing.model.MergeField3;
import io.github.erkoristhein.mailchimp.marketing.model.OptionsInner;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * The details of a survey question&#39;s report.
 */
@JsonPropertyOrder({
  SurveyQuestionReport.JSON_PROPERTY_ID,
  SurveyQuestionReport.JSON_PROPERTY_SURVEY_ID,
  SurveyQuestionReport.JSON_PROPERTY_QUERY,
  SurveyQuestionReport.JSON_PROPERTY_TYPE,
  SurveyQuestionReport.JSON_PROPERTY_TOTAL_RESPONSES,
  SurveyQuestionReport.JSON_PROPERTY_IS_REQUIRED,
  SurveyQuestionReport.JSON_PROPERTY_HAS_OTHER,
  SurveyQuestionReport.JSON_PROPERTY_OTHER_LABEL,
  SurveyQuestionReport.JSON_PROPERTY_AVERAGE_RATING,
  SurveyQuestionReport.JSON_PROPERTY_RANGE_LOW_LABEL,
  SurveyQuestionReport.JSON_PROPERTY_RANGE_HIGH_LABEL,
  SurveyQuestionReport.JSON_PROPERTY_PLACEHOLDER_LABEL,
  SurveyQuestionReport.JSON_PROPERTY_SUBSCRIBE_CHECKBOX_ENABLED,
  SurveyQuestionReport.JSON_PROPERTY_SUBSCRIBE_CHECKBOX_LABEL,
  SurveyQuestionReport.JSON_PROPERTY_MERGE_FIELD,
  SurveyQuestionReport.JSON_PROPERTY_OPTIONS,
  SurveyQuestionReport.JSON_PROPERTY_CONTACT_COUNTS
})
@JsonTypeName("Survey_Question_Report")
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-26T16:39:59.516441+03:00[Europe/Helsinki]", comments = "Generator version: 7.5.0")
public class SurveyQuestionReport {
  public static final String JSON_PROPERTY_ID = "id";
  private String id;

  public static final String JSON_PROPERTY_SURVEY_ID = "survey_id";
  private String surveyId;

  public static final String JSON_PROPERTY_QUERY = "query";
  private String query;

  /**
   * The response type of the survey question.
   */
  public enum TypeEnum {
    PICKONE("pickOne"),
    
    PICKMANY("pickMany"),
    
    RANGE("range"),
    
    TEXT("text"),
    
    EMAIL("email");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_TYPE = "type";
  private TypeEnum type;

  public static final String JSON_PROPERTY_TOTAL_RESPONSES = "total_responses";
  private Integer totalResponses;

  public static final String JSON_PROPERTY_IS_REQUIRED = "is_required";
  private Boolean isRequired;

  public static final String JSON_PROPERTY_HAS_OTHER = "has_other";
  private Boolean hasOther;

  public static final String JSON_PROPERTY_OTHER_LABEL = "other_label";
  private String otherLabel;

  public static final String JSON_PROPERTY_AVERAGE_RATING = "average_rating";
  private Float averageRating;

  public static final String JSON_PROPERTY_RANGE_LOW_LABEL = "range_low_label";
  private String rangeLowLabel;

  public static final String JSON_PROPERTY_RANGE_HIGH_LABEL = "range_high_label";
  private String rangeHighLabel;

  public static final String JSON_PROPERTY_PLACEHOLDER_LABEL = "placeholder_label";
  private String placeholderLabel;

  public static final String JSON_PROPERTY_SUBSCRIBE_CHECKBOX_ENABLED = "subscribe_checkbox_enabled";
  private Boolean subscribeCheckboxEnabled;

  public static final String JSON_PROPERTY_SUBSCRIBE_CHECKBOX_LABEL = "subscribe_checkbox_label";
  private String subscribeCheckboxLabel;

  public static final String JSON_PROPERTY_MERGE_FIELD = "merge_field";
  private MergeField3 mergeField;

  public static final String JSON_PROPERTY_OPTIONS = "options";
  private List<OptionsInner> options = new ArrayList<>();

  public static final String JSON_PROPERTY_CONTACT_COUNTS = "contact_counts";
  private ContactCounts contactCounts;

  public SurveyQuestionReport() {
  }

  @JsonCreator
  public SurveyQuestionReport(
    @JsonProperty(JSON_PROPERTY_ID) String id, 
    @JsonProperty(JSON_PROPERTY_SURVEY_ID) String surveyId, 
    @JsonProperty(JSON_PROPERTY_QUERY) String query, 
    @JsonProperty(JSON_PROPERTY_TYPE) TypeEnum type, 
    @JsonProperty(JSON_PROPERTY_TOTAL_RESPONSES) Integer totalResponses, 
    @JsonProperty(JSON_PROPERTY_IS_REQUIRED) Boolean isRequired, 
    @JsonProperty(JSON_PROPERTY_HAS_OTHER) Boolean hasOther, 
    @JsonProperty(JSON_PROPERTY_OTHER_LABEL) String otherLabel, 
    @JsonProperty(JSON_PROPERTY_AVERAGE_RATING) Float averageRating, 
    @JsonProperty(JSON_PROPERTY_RANGE_LOW_LABEL) String rangeLowLabel, 
    @JsonProperty(JSON_PROPERTY_RANGE_HIGH_LABEL) String rangeHighLabel, 
    @JsonProperty(JSON_PROPERTY_PLACEHOLDER_LABEL) String placeholderLabel, 
    @JsonProperty(JSON_PROPERTY_SUBSCRIBE_CHECKBOX_ENABLED) Boolean subscribeCheckboxEnabled, 
    @JsonProperty(JSON_PROPERTY_SUBSCRIBE_CHECKBOX_LABEL) String subscribeCheckboxLabel, 
    @JsonProperty(JSON_PROPERTY_OPTIONS) List<OptionsInner> options
  ) {
    this();
    this.id = id;
    this.surveyId = surveyId;
    this.query = query;
    this.type = type;
    this.totalResponses = totalResponses;
    this.isRequired = isRequired;
    this.hasOther = hasOther;
    this.otherLabel = otherLabel;
    this.averageRating = averageRating;
    this.rangeLowLabel = rangeLowLabel;
    this.rangeHighLabel = rangeHighLabel;
    this.placeholderLabel = placeholderLabel;
    this.subscribeCheckboxEnabled = subscribeCheckboxEnabled;
    this.subscribeCheckboxLabel = subscribeCheckboxLabel;
    this.options = options;
  }

   /**
   * The ID of the survey question.
   * @return id
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getId() {
    return id;
  }




   /**
   * The unique ID of the survey.
   * @return surveyId
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SURVEY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSurveyId() {
    return surveyId;
  }




   /**
   * The query of the survey question.
   * @return query
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_QUERY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getQuery() {
    return query;
  }




   /**
   * The response type of the survey question.
   * @return type
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public TypeEnum getType() {
    return type;
  }




   /**
   * The total number of responses to this question.
   * @return totalResponses
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TOTAL_RESPONSES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getTotalResponses() {
    return totalResponses;
  }




   /**
   * Whether this survey question is required to answer.
   * @return isRequired
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_IS_REQUIRED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getIsRequired() {
    return isRequired;
  }




   /**
   * Whether this survey question has an &#39;other&#39; option.
   * @return hasOther
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_HAS_OTHER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getHasOther() {
    return hasOther;
  }




   /**
   * Label used for the &#39;other&#39; option of this survey question.
   * @return otherLabel
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_OTHER_LABEL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getOtherLabel() {
    return otherLabel;
  }




   /**
   * The average rating for this range question.
   * @return averageRating
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_AVERAGE_RATING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Float getAverageRating() {
    return averageRating;
  }




   /**
   * Label for the low end of the range.
   * @return rangeLowLabel
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_RANGE_LOW_LABEL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getRangeLowLabel() {
    return rangeLowLabel;
  }




   /**
   * Label for the high end of the range.
   * @return rangeHighLabel
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_RANGE_HIGH_LABEL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getRangeHighLabel() {
    return rangeHighLabel;
  }




   /**
   * Placeholder text for this survey question&#39;s answer box.
   * @return placeholderLabel
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PLACEHOLDER_LABEL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getPlaceholderLabel() {
    return placeholderLabel;
  }




   /**
   * Whether the subscribe checkbox is shown for this email question.
   * @return subscribeCheckboxEnabled
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SUBSCRIBE_CHECKBOX_ENABLED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getSubscribeCheckboxEnabled() {
    return subscribeCheckboxEnabled;
  }




   /**
   * Label used for the subscribe checkbox for this email question.
   * @return subscribeCheckboxLabel
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SUBSCRIBE_CHECKBOX_LABEL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSubscribeCheckboxLabel() {
    return subscribeCheckboxLabel;
  }




  public SurveyQuestionReport mergeField(MergeField3 mergeField) {
    
    this.mergeField = mergeField;
    return this;
  }

   /**
   * Get mergeField
   * @return mergeField
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MERGE_FIELD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public MergeField3 getMergeField() {
    return mergeField;
  }


  @JsonProperty(JSON_PROPERTY_MERGE_FIELD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMergeField(MergeField3 mergeField) {
    this.mergeField = mergeField;
  }


   /**
   * The answer choices for this question.
   * @return options
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_OPTIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<OptionsInner> getOptions() {
    return options;
  }




  public SurveyQuestionReport contactCounts(ContactCounts contactCounts) {
    
    this.contactCounts = contactCounts;
    return this;
  }

   /**
   * Get contactCounts
   * @return contactCounts
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CONTACT_COUNTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ContactCounts getContactCounts() {
    return contactCounts;
  }


  @JsonProperty(JSON_PROPERTY_CONTACT_COUNTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setContactCounts(ContactCounts contactCounts) {
    this.contactCounts = contactCounts;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SurveyQuestionReport surveyQuestionReport = (SurveyQuestionReport) o;
    return Objects.equals(this.id, surveyQuestionReport.id) &&
        Objects.equals(this.surveyId, surveyQuestionReport.surveyId) &&
        Objects.equals(this.query, surveyQuestionReport.query) &&
        Objects.equals(this.type, surveyQuestionReport.type) &&
        Objects.equals(this.totalResponses, surveyQuestionReport.totalResponses) &&
        Objects.equals(this.isRequired, surveyQuestionReport.isRequired) &&
        Objects.equals(this.hasOther, surveyQuestionReport.hasOther) &&
        Objects.equals(this.otherLabel, surveyQuestionReport.otherLabel) &&
        Objects.equals(this.averageRating, surveyQuestionReport.averageRating) &&
        Objects.equals(this.rangeLowLabel, surveyQuestionReport.rangeLowLabel) &&
        Objects.equals(this.rangeHighLabel, surveyQuestionReport.rangeHighLabel) &&
        Objects.equals(this.placeholderLabel, surveyQuestionReport.placeholderLabel) &&
        Objects.equals(this.subscribeCheckboxEnabled, surveyQuestionReport.subscribeCheckboxEnabled) &&
        Objects.equals(this.subscribeCheckboxLabel, surveyQuestionReport.subscribeCheckboxLabel) &&
        Objects.equals(this.mergeField, surveyQuestionReport.mergeField) &&
        Objects.equals(this.options, surveyQuestionReport.options) &&
        Objects.equals(this.contactCounts, surveyQuestionReport.contactCounts);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, surveyId, query, type, totalResponses, isRequired, hasOther, otherLabel, averageRating, rangeLowLabel, rangeHighLabel, placeholderLabel, subscribeCheckboxEnabled, subscribeCheckboxLabel, mergeField, options, contactCounts);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SurveyQuestionReport {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    surveyId: ").append(toIndentedString(surveyId)).append("\n");
    sb.append("    query: ").append(toIndentedString(query)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    totalResponses: ").append(toIndentedString(totalResponses)).append("\n");
    sb.append("    isRequired: ").append(toIndentedString(isRequired)).append("\n");
    sb.append("    hasOther: ").append(toIndentedString(hasOther)).append("\n");
    sb.append("    otherLabel: ").append(toIndentedString(otherLabel)).append("\n");
    sb.append("    averageRating: ").append(toIndentedString(averageRating)).append("\n");
    sb.append("    rangeLowLabel: ").append(toIndentedString(rangeLowLabel)).append("\n");
    sb.append("    rangeHighLabel: ").append(toIndentedString(rangeHighLabel)).append("\n");
    sb.append("    placeholderLabel: ").append(toIndentedString(placeholderLabel)).append("\n");
    sb.append("    subscribeCheckboxEnabled: ").append(toIndentedString(subscribeCheckboxEnabled)).append("\n");
    sb.append("    subscribeCheckboxLabel: ").append(toIndentedString(subscribeCheckboxLabel)).append("\n");
    sb.append("    mergeField: ").append(toIndentedString(mergeField)).append("\n");
    sb.append("    options: ").append(toIndentedString(options)).append("\n");
    sb.append("    contactCounts: ").append(toIndentedString(contactCounts)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

