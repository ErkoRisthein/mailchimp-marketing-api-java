/*
 * Mailchimp Marketing API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0.55
 * Contact: apihelp@mailchimp.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.erkoristhein.mailchimp.marketing.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Determines if the campaign qualifies to be resent to non-openers.
 */
@JsonPropertyOrder({
  ToNonOpeners.JSON_PROPERTY_IS_ELIGIBLE,
  ToNonOpeners.JSON_PROPERTY_REASON
})
@JsonTypeName("To_Non_Openers")
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-26T16:39:59.516441+03:00[Europe/Helsinki]", comments = "Generator version: 7.5.0")
public class ToNonOpeners {
  public static final String JSON_PROPERTY_IS_ELIGIBLE = "is_eligible";
  private Boolean isEligible;

  public static final String JSON_PROPERTY_REASON = "reason";
  private String reason;

  public ToNonOpeners() {
  }

  @JsonCreator
  public ToNonOpeners(
    @JsonProperty(JSON_PROPERTY_IS_ELIGIBLE) Boolean isEligible, 
    @JsonProperty(JSON_PROPERTY_REASON) String reason
  ) {
    this();
    this.isEligible = isEligible;
    this.reason = reason;
  }

   /**
   * Determines if the campaign qualifies to be resent to this segment.
   * @return isEligible
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_IS_ELIGIBLE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getIsEligible() {
    return isEligible;
  }




   /**
   * The reason the campaign is not eligible to be resent to this segment.
   * @return reason
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_REASON)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getReason() {
    return reason;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ToNonOpeners toNonOpeners = (ToNonOpeners) o;
    return Objects.equals(this.isEligible, toNonOpeners.isEligible) &&
        Objects.equals(this.reason, toNonOpeners.reason);
  }

  @Override
  public int hashCode() {
    return Objects.hash(isEligible, reason);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ToNonOpeners {\n");
    sb.append("    isEligible: ").append(toIndentedString(isEligible)).append("\n");
    sb.append("    reason: ").append(toIndentedString(reason)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

