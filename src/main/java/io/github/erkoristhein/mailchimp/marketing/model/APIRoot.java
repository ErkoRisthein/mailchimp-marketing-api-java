/*
 * Mailchimp Marketing API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0.55
 * Contact: apihelp@mailchimp.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.erkoristhein.mailchimp.marketing.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.github.erkoristhein.mailchimp.marketing.model.AccountContact;
import io.github.erkoristhein.mailchimp.marketing.model.IndustryStats;
import io.github.erkoristhein.mailchimp.marketing.model.ResourceLink;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * The API root resource links to all other resources available in the API.
 */
@JsonPropertyOrder({
  APIRoot.JSON_PROPERTY_ACCOUNT_ID,
  APIRoot.JSON_PROPERTY_LOGIN_ID,
  APIRoot.JSON_PROPERTY_ACCOUNT_NAME,
  APIRoot.JSON_PROPERTY_EMAIL,
  APIRoot.JSON_PROPERTY_FIRST_NAME,
  APIRoot.JSON_PROPERTY_LAST_NAME,
  APIRoot.JSON_PROPERTY_USERNAME,
  APIRoot.JSON_PROPERTY_AVATAR_URL,
  APIRoot.JSON_PROPERTY_ROLE,
  APIRoot.JSON_PROPERTY_MEMBER_SINCE,
  APIRoot.JSON_PROPERTY_PRICING_PLAN_TYPE,
  APIRoot.JSON_PROPERTY_FIRST_PAYMENT,
  APIRoot.JSON_PROPERTY_ACCOUNT_TIMEZONE,
  APIRoot.JSON_PROPERTY_ACCOUNT_INDUSTRY,
  APIRoot.JSON_PROPERTY_CONTACT,
  APIRoot.JSON_PROPERTY_PRO_ENABLED,
  APIRoot.JSON_PROPERTY_LAST_LOGIN,
  APIRoot.JSON_PROPERTY_TOTAL_SUBSCRIBERS,
  APIRoot.JSON_PROPERTY_INDUSTRY_STATS,
  APIRoot.JSON_PROPERTY_LINKS
})
@JsonTypeName("API_Root")
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-26T16:39:59.516441+03:00[Europe/Helsinki]", comments = "Generator version: 7.5.0")
public class APIRoot {
  public static final String JSON_PROPERTY_ACCOUNT_ID = "account_id";
  private String accountId;

  public static final String JSON_PROPERTY_LOGIN_ID = "login_id";
  private String loginId;

  public static final String JSON_PROPERTY_ACCOUNT_NAME = "account_name";
  private String accountName;

  public static final String JSON_PROPERTY_EMAIL = "email";
  private String email;

  public static final String JSON_PROPERTY_FIRST_NAME = "first_name";
  private String firstName;

  public static final String JSON_PROPERTY_LAST_NAME = "last_name";
  private String lastName;

  public static final String JSON_PROPERTY_USERNAME = "username";
  private String username;

  public static final String JSON_PROPERTY_AVATAR_URL = "avatar_url";
  private String avatarUrl;

  public static final String JSON_PROPERTY_ROLE = "role";
  private String role;

  public static final String JSON_PROPERTY_MEMBER_SINCE = "member_since";
  private OffsetDateTime memberSince;

  /**
   * The type of pricing plan the account is on.
   */
  public enum PricingPlanTypeEnum {
    MONTHLY("monthly"),
    
    PAY_AS_YOU_GO("pay_as_you_go"),
    
    FOREVER_FREE("forever_free");

    private String value;

    PricingPlanTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static PricingPlanTypeEnum fromValue(String value) {
      for (PricingPlanTypeEnum b : PricingPlanTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_PRICING_PLAN_TYPE = "pricing_plan_type";
  private PricingPlanTypeEnum pricingPlanType;

  public static final String JSON_PROPERTY_FIRST_PAYMENT = "first_payment";
  private OffsetDateTime firstPayment;

  public static final String JSON_PROPERTY_ACCOUNT_TIMEZONE = "account_timezone";
  private String accountTimezone;

  public static final String JSON_PROPERTY_ACCOUNT_INDUSTRY = "account_industry";
  private String accountIndustry;

  public static final String JSON_PROPERTY_CONTACT = "contact";
  private AccountContact contact;

  public static final String JSON_PROPERTY_PRO_ENABLED = "pro_enabled";
  private Boolean proEnabled;

  public static final String JSON_PROPERTY_LAST_LOGIN = "last_login";
  private OffsetDateTime lastLogin;

  public static final String JSON_PROPERTY_TOTAL_SUBSCRIBERS = "total_subscribers";
  private Integer totalSubscribers;

  public static final String JSON_PROPERTY_INDUSTRY_STATS = "industry_stats";
  private IndustryStats industryStats;

  public static final String JSON_PROPERTY_LINKS = "_links";
  private List<ResourceLink> links = new ArrayList<>();

  public APIRoot() {
  }

  @JsonCreator
  public APIRoot(
    @JsonProperty(JSON_PROPERTY_ACCOUNT_ID) String accountId, 
    @JsonProperty(JSON_PROPERTY_LOGIN_ID) String loginId, 
    @JsonProperty(JSON_PROPERTY_ACCOUNT_NAME) String accountName, 
    @JsonProperty(JSON_PROPERTY_EMAIL) String email, 
    @JsonProperty(JSON_PROPERTY_FIRST_NAME) String firstName, 
    @JsonProperty(JSON_PROPERTY_LAST_NAME) String lastName, 
    @JsonProperty(JSON_PROPERTY_USERNAME) String username, 
    @JsonProperty(JSON_PROPERTY_AVATAR_URL) String avatarUrl, 
    @JsonProperty(JSON_PROPERTY_ROLE) String role, 
    @JsonProperty(JSON_PROPERTY_MEMBER_SINCE) OffsetDateTime memberSince, 
    @JsonProperty(JSON_PROPERTY_PRICING_PLAN_TYPE) PricingPlanTypeEnum pricingPlanType, 
    @JsonProperty(JSON_PROPERTY_FIRST_PAYMENT) OffsetDateTime firstPayment, 
    @JsonProperty(JSON_PROPERTY_ACCOUNT_TIMEZONE) String accountTimezone, 
    @JsonProperty(JSON_PROPERTY_ACCOUNT_INDUSTRY) String accountIndustry, 
    @JsonProperty(JSON_PROPERTY_PRO_ENABLED) Boolean proEnabled, 
    @JsonProperty(JSON_PROPERTY_LAST_LOGIN) OffsetDateTime lastLogin, 
    @JsonProperty(JSON_PROPERTY_TOTAL_SUBSCRIBERS) Integer totalSubscribers, 
    @JsonProperty(JSON_PROPERTY_LINKS) List<ResourceLink> links
  ) {
    this();
    this.accountId = accountId;
    this.loginId = loginId;
    this.accountName = accountName;
    this.email = email;
    this.firstName = firstName;
    this.lastName = lastName;
    this.username = username;
    this.avatarUrl = avatarUrl;
    this.role = role;
    this.memberSince = memberSince;
    this.pricingPlanType = pricingPlanType;
    this.firstPayment = firstPayment;
    this.accountTimezone = accountTimezone;
    this.accountIndustry = accountIndustry;
    this.proEnabled = proEnabled;
    this.lastLogin = lastLogin;
    this.totalSubscribers = totalSubscribers;
    this.links = links;
  }

   /**
   * The Mailchimp account ID.
   * @return accountId
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ACCOUNT_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getAccountId() {
    return accountId;
  }




   /**
   * The ID associated with the user who owns this API key. If you can login to multiple accounts, this ID will be the same for each account.
   * @return loginId
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LOGIN_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getLoginId() {
    return loginId;
  }




   /**
   * The name of the account.
   * @return accountName
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ACCOUNT_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getAccountName() {
    return accountName;
  }




   /**
   * The account email address.
   * @return email
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_EMAIL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getEmail() {
    return email;
  }




   /**
   * The first name tied to the account.
   * @return firstName
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FIRST_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getFirstName() {
    return firstName;
  }




   /**
   * The last name tied to the account.
   * @return lastName
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LAST_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getLastName() {
    return lastName;
  }




   /**
   * The username tied to the account.
   * @return username
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_USERNAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getUsername() {
    return username;
  }




   /**
   * URL of the avatar for the user.
   * @return avatarUrl
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_AVATAR_URL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getAvatarUrl() {
    return avatarUrl;
  }




   /**
   * The [user role](https://mailchimp.com/help/manage-user-levels-in-your-account/) for the account.
   * @return role
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ROLE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getRole() {
    return role;
  }




   /**
   * The date and time that the account was created in ISO 8601 format.
   * @return memberSince
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MEMBER_SINCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OffsetDateTime getMemberSince() {
    return memberSince;
  }




   /**
   * The type of pricing plan the account is on.
   * @return pricingPlanType
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PRICING_PLAN_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public PricingPlanTypeEnum getPricingPlanType() {
    return pricingPlanType;
  }




   /**
   * Date of first payment for monthly plans.
   * @return firstPayment
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FIRST_PAYMENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OffsetDateTime getFirstPayment() {
    return firstPayment;
  }




   /**
   * The timezone currently set for the account.
   * @return accountTimezone
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ACCOUNT_TIMEZONE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getAccountTimezone() {
    return accountTimezone;
  }




   /**
   * The user-specified industry associated with the account.
   * @return accountIndustry
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ACCOUNT_INDUSTRY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getAccountIndustry() {
    return accountIndustry;
  }




  public APIRoot contact(AccountContact contact) {
    
    this.contact = contact;
    return this;
  }

   /**
   * Get contact
   * @return contact
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CONTACT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public AccountContact getContact() {
    return contact;
  }


  @JsonProperty(JSON_PROPERTY_CONTACT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setContact(AccountContact contact) {
    this.contact = contact;
  }


   /**
   * Legacy - whether the account includes [Mailchimp Pro](https://mailchimp.com/help/about-mailchimp-pro/).
   * @return proEnabled
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PRO_ENABLED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getProEnabled() {
    return proEnabled;
  }




   /**
   * The date and time of the last login for this account in ISO 8601 format.
   * @return lastLogin
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LAST_LOGIN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OffsetDateTime getLastLogin() {
    return lastLogin;
  }




   /**
   * The total number of subscribers across all lists in the account.
   * @return totalSubscribers
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TOTAL_SUBSCRIBERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getTotalSubscribers() {
    return totalSubscribers;
  }




  public APIRoot industryStats(IndustryStats industryStats) {
    
    this.industryStats = industryStats;
    return this;
  }

   /**
   * Get industryStats
   * @return industryStats
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_INDUSTRY_STATS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public IndustryStats getIndustryStats() {
    return industryStats;
  }


  @JsonProperty(JSON_PROPERTY_INDUSTRY_STATS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIndustryStats(IndustryStats industryStats) {
    this.industryStats = industryStats;
  }


   /**
   * A list of link types and descriptions for the API schema documents.
   * @return links
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LINKS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<ResourceLink> getLinks() {
    return links;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    APIRoot apIRoot = (APIRoot) o;
    return Objects.equals(this.accountId, apIRoot.accountId) &&
        Objects.equals(this.loginId, apIRoot.loginId) &&
        Objects.equals(this.accountName, apIRoot.accountName) &&
        Objects.equals(this.email, apIRoot.email) &&
        Objects.equals(this.firstName, apIRoot.firstName) &&
        Objects.equals(this.lastName, apIRoot.lastName) &&
        Objects.equals(this.username, apIRoot.username) &&
        Objects.equals(this.avatarUrl, apIRoot.avatarUrl) &&
        Objects.equals(this.role, apIRoot.role) &&
        Objects.equals(this.memberSince, apIRoot.memberSince) &&
        Objects.equals(this.pricingPlanType, apIRoot.pricingPlanType) &&
        Objects.equals(this.firstPayment, apIRoot.firstPayment) &&
        Objects.equals(this.accountTimezone, apIRoot.accountTimezone) &&
        Objects.equals(this.accountIndustry, apIRoot.accountIndustry) &&
        Objects.equals(this.contact, apIRoot.contact) &&
        Objects.equals(this.proEnabled, apIRoot.proEnabled) &&
        Objects.equals(this.lastLogin, apIRoot.lastLogin) &&
        Objects.equals(this.totalSubscribers, apIRoot.totalSubscribers) &&
        Objects.equals(this.industryStats, apIRoot.industryStats) &&
        Objects.equals(this.links, apIRoot.links);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountId, loginId, accountName, email, firstName, lastName, username, avatarUrl, role, memberSince, pricingPlanType, firstPayment, accountTimezone, accountIndustry, contact, proEnabled, lastLogin, totalSubscribers, industryStats, links);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class APIRoot {\n");
    sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
    sb.append("    loginId: ").append(toIndentedString(loginId)).append("\n");
    sb.append("    accountName: ").append(toIndentedString(accountName)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    firstName: ").append(toIndentedString(firstName)).append("\n");
    sb.append("    lastName: ").append(toIndentedString(lastName)).append("\n");
    sb.append("    username: ").append(toIndentedString(username)).append("\n");
    sb.append("    avatarUrl: ").append(toIndentedString(avatarUrl)).append("\n");
    sb.append("    role: ").append(toIndentedString(role)).append("\n");
    sb.append("    memberSince: ").append(toIndentedString(memberSince)).append("\n");
    sb.append("    pricingPlanType: ").append(toIndentedString(pricingPlanType)).append("\n");
    sb.append("    firstPayment: ").append(toIndentedString(firstPayment)).append("\n");
    sb.append("    accountTimezone: ").append(toIndentedString(accountTimezone)).append("\n");
    sb.append("    accountIndustry: ").append(toIndentedString(accountIndustry)).append("\n");
    sb.append("    contact: ").append(toIndentedString(contact)).append("\n");
    sb.append("    proEnabled: ").append(toIndentedString(proEnabled)).append("\n");
    sb.append("    lastLogin: ").append(toIndentedString(lastLogin)).append("\n");
    sb.append("    totalSubscribers: ").append(toIndentedString(totalSubscribers)).append("\n");
    sb.append("    industryStats: ").append(toIndentedString(industryStats)).append("\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

