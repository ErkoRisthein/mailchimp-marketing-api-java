/*
 * Mailchimp Marketing API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0.81
 * Contact: apihelp@mailchimp.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.erkoristhein.mailchimp.marketing.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.github.erkoristhein.mailchimp.marketing.model.AnOptionForSignupFormStyles;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Collection of Element style for List Signup Forms.
 */
@JsonPropertyOrder({
  CollectionOfElementStyleForListSignupForms.JSON_PROPERTY_SELECTOR,
  CollectionOfElementStyleForListSignupForms.JSON_PROPERTY_OPTIONS
})
@JsonTypeName("Collection_of_Element_style_for_List_Signup_Forms")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-02-03T13:08:30.305646+02:00[Europe/Tallinn]")
public class CollectionOfElementStyleForListSignupForms {
  /**
   * A string that identifies the element selector.
   */
  public enum SelectorEnum {
    PAGE_BACKGROUND("page_background"),
    
    PAGE_HEADER("page_header"),
    
    PAGE_OUTER_WRAPPER("page_outer_wrapper"),
    
    BODY_BACKGROUND("body_background"),
    
    BODY_LINK_STYLE("body_link_style"),
    
    FORMS_BUTTONS("forms_buttons"),
    
    FORMS_BUTTONS_HOVERED("forms_buttons_hovered"),
    
    FORMS_FIELD_LABEL("forms_field_label"),
    
    FORMS_FIELD_TEXT("forms_field_text"),
    
    FORMS_REQUIRED("forms_required"),
    
    FORMS_REQUIRED_LEGEND("forms_required_legend"),
    
    FORMS_HELP_TEXT("forms_help_text"),
    
    FORMS_ERRORS("forms_errors"),
    
    MONKEY_REWARDS_BADGE("monkey_rewards_badge");

    private String value;

    SelectorEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static SelectorEnum fromValue(String value) {
      for (SelectorEnum b : SelectorEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_SELECTOR = "selector";
  private SelectorEnum selector;

  public static final String JSON_PROPERTY_OPTIONS = "options";
  private List<AnOptionForSignupFormStyles> options;

  public CollectionOfElementStyleForListSignupForms() {
  }

  public CollectionOfElementStyleForListSignupForms selector(SelectorEnum selector) {
    
    this.selector = selector;
    return this;
  }

   /**
   * A string that identifies the element selector.
   * @return selector
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SELECTOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public SelectorEnum getSelector() {
    return selector;
  }


  @JsonProperty(JSON_PROPERTY_SELECTOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSelector(SelectorEnum selector) {
    this.selector = selector;
  }


  public CollectionOfElementStyleForListSignupForms options(List<AnOptionForSignupFormStyles> options) {
    
    this.options = options;
    return this;
  }

  public CollectionOfElementStyleForListSignupForms addOptionsItem(AnOptionForSignupFormStyles optionsItem) {
    if (this.options == null) {
      this.options = new ArrayList<>();
    }
    this.options.add(optionsItem);
    return this;
  }

   /**
   * A collection of options for a selector.
   * @return options
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_OPTIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<AnOptionForSignupFormStyles> getOptions() {
    return options;
  }


  @JsonProperty(JSON_PROPERTY_OPTIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOptions(List<AnOptionForSignupFormStyles> options) {
    this.options = options;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CollectionOfElementStyleForListSignupForms collectionOfElementStyleForListSignupForms = (CollectionOfElementStyleForListSignupForms) o;
    return Objects.equals(this.selector, collectionOfElementStyleForListSignupForms.selector) &&
        Objects.equals(this.options, collectionOfElementStyleForListSignupForms.options);
  }

  @Override
  public int hashCode() {
    return Objects.hash(selector, options);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CollectionOfElementStyleForListSignupForms {\n");
    sb.append("    selector: ").append(toIndentedString(selector)).append("\n");
    sb.append("    options: ").append(toIndentedString(options)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

