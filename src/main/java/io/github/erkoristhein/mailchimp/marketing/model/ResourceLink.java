/*
 * Mailchimp Marketing API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0.55
 * Contact: apihelp@mailchimp.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.erkoristhein.mailchimp.marketing.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * This object represents a link from the resource where it is found to another resource or action that may be performed.
 */
@JsonPropertyOrder({
  ResourceLink.JSON_PROPERTY_REL,
  ResourceLink.JSON_PROPERTY_HREF,
  ResourceLink.JSON_PROPERTY_METHOD,
  ResourceLink.JSON_PROPERTY_TARGET_SCHEMA,
  ResourceLink.JSON_PROPERTY_SCHEMA
})
@JsonTypeName("Resource_Link")
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-26T16:39:59.516441+03:00[Europe/Helsinki]", comments = "Generator version: 7.5.0")
public class ResourceLink {
  public static final String JSON_PROPERTY_REL = "rel";
  private String rel;

  public static final String JSON_PROPERTY_HREF = "href";
  private String href;

  /**
   * The HTTP method that should be used when accessing the URL defined in &#39;href&#39;.
   */
  public enum MethodEnum {
    GET("GET"),
    
    POST("POST"),
    
    PUT("PUT"),
    
    PATCH("PATCH"),
    
    DELETE("DELETE"),
    
    OPTIONS("OPTIONS"),
    
    HEAD("HEAD");

    private String value;

    MethodEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static MethodEnum fromValue(String value) {
      for (MethodEnum b : MethodEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_METHOD = "method";
  private MethodEnum method;

  public static final String JSON_PROPERTY_TARGET_SCHEMA = "targetSchema";
  private String targetSchema;

  public static final String JSON_PROPERTY_SCHEMA = "schema";
  private String schema;

  public ResourceLink() {
  }

  @JsonCreator
  public ResourceLink(
    @JsonProperty(JSON_PROPERTY_REL) String rel, 
    @JsonProperty(JSON_PROPERTY_HREF) String href, 
    @JsonProperty(JSON_PROPERTY_METHOD) MethodEnum method, 
    @JsonProperty(JSON_PROPERTY_TARGET_SCHEMA) String targetSchema, 
    @JsonProperty(JSON_PROPERTY_SCHEMA) String schema
  ) {
    this();
    this.rel = rel;
    this.href = href;
    this.method = method;
    this.targetSchema = targetSchema;
    this.schema = schema;
  }

   /**
   * As with an HTML &#39;rel&#39; attribute, this describes the type of link.
   * @return rel
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_REL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getRel() {
    return rel;
  }




   /**
   * This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.
   * @return href
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_HREF)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getHref() {
    return href;
  }




   /**
   * The HTTP method that should be used when accessing the URL defined in &#39;href&#39;.
   * @return method
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_METHOD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public MethodEnum getMethod() {
    return method;
  }




   /**
   * For GETs, this is a URL representing the schema that the response should conform to.
   * @return targetSchema
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TARGET_SCHEMA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getTargetSchema() {
    return targetSchema;
  }




   /**
   * For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.
   * @return schema
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SCHEMA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSchema() {
    return schema;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ResourceLink resourceLink = (ResourceLink) o;
    return Objects.equals(this.rel, resourceLink.rel) &&
        Objects.equals(this.href, resourceLink.href) &&
        Objects.equals(this.method, resourceLink.method) &&
        Objects.equals(this.targetSchema, resourceLink.targetSchema) &&
        Objects.equals(this.schema, resourceLink.schema);
  }

  @Override
  public int hashCode() {
    return Objects.hash(rel, href, method, targetSchema, schema);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ResourceLink {\n");
    sb.append("    rel: ").append(toIndentedString(rel)).append("\n");
    sb.append("    href: ").append(toIndentedString(href)).append("\n");
    sb.append("    method: ").append(toIndentedString(method)).append("\n");
    sb.append("    targetSchema: ").append(toIndentedString(targetSchema)).append("\n");
    sb.append("    schema: ").append(toIndentedString(schema)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

